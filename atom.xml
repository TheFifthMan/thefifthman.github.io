<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-12T09:54:47.050Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>0x002-exploitdb</title>
    <link href="http://yoursite.com/2018/08/12/metasploit/0x002-exploitdb/"/>
    <id>http://yoursite.com/2018/08/12/metasploit/0x002-exploitdb/</id>
    <published>2018-08-12T09:51:53.000Z</published>
    <updated>2018-08-12T09:54:47.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="exploitdb"><a class="markdownIt-Anchor" href="#exploitdb"></a> exploitdb</h1><p>有着很多公开漏洞的POC，我们可以直接使用metasploit进行利用</p><h1 id="searchsploit"><a class="markdownIt-Anchor" href="#searchsploit"></a> searchsploit</h1><h2 id="用法示例"><a class="markdownIt-Anchor" href="#用法示例"></a> 用法示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">searchsploit 漏洞编号</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">searchsploit ms15-100</span><br></pre></td></tr></table></figure><h2 id="结果示例"><a class="markdownIt-Anchor" href="#结果示例"></a> 结果示例</h2><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/metasploit/searchsploit.jpg" alt="image"></p><h1 id="更新metasploit"><a class="markdownIt-Anchor" href="#更新metasploit"></a> 更新metasploit</h1><h2 id="新建文件夹"><a class="markdownIt-Anchor" href="#新建文件夹"></a> 新建文件夹</h2><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/metasploit/msfmodelsfolder.jpg" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这个文件夹是按照上图所示的文件夹建立的</span><br><span class="line">mkdir -p /root/.msf4/modules/exploits/windows/remote</span><br></pre></td></tr></table></figure><h2 id="复制到msf模块中"><a class="markdownIt-Anchor" href="#复制到msf模块中"></a> 复制到msf模块中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/windows/remote/38195.rb .</span><br></pre></td></tr></table></figure><h2 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatedb</span><br></pre></td></tr></table></figure><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>打开msfconsole就会看到如下效果<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/metasploit/models.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;exploitdb&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#exploitdb&quot;&gt;&lt;/a&gt; exploitdb&lt;/h1&gt;
&lt;p&gt;有着很多公开漏洞的POC，我们可以直接使用metasploit进行利用&lt;/p&gt;
&lt;h1 id=&quot;sea
      
    
    </summary>
    
      <category term="metasploit" scheme="http://yoursite.com/categories/metasploit/"/>
    
    
      <category term="metasploit" scheme="http://yoursite.com/tags/metasploit/"/>
    
  </entry>
  
  <entry>
    <title>移动端测试4-安装apk</title>
    <link href="http://yoursite.com/2018/08/11/appium/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%954-%E5%AE%89%E8%A3%85apk/"/>
    <id>http://yoursite.com/2018/08/11/appium/移动端测试4-安装apk/</id>
    <published>2018-08-11T15:29:51.000Z</published>
    <updated>2018-08-11T15:30:04.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>决定放弃安卓自带的虚拟机，一是因为x86支持现在大部分的apk，二是实在太难用。选择<a href="https://www.genymotion.com/download/" target="_blank" rel="noopener">genymotion</a>做为虚拟机运行工具</p><h1 id="adb"><a class="markdownIt-Anchor" href="#adb"></a> adb</h1><p>使用adb 安装软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install xxxx.apk</span><br></pre></td></tr></table></figure><p>然后就遇到了 Failure [INSTALL_FAILED_NO_MATCHING_ABIS] 这样的问题，虽然可以下载相关的插件进行拖进虚拟机里面安装，但是还没找到这个软件的官方地址。。。解决方案也是大家抄来抄去，一个答案2016年抄到了2018都有… 这里就不赘述了。</p><h1 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h1><p>成功安装了一个软件</p><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/Android/apk.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;决定放弃安卓自带的虚拟机，一是因为x86支持现在大部分的apk，二是实在太难用。选择&lt;a href=&quot;https://www.genymotio
      
    
    </summary>
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>0x007-部署centos</title>
    <link href="http://yoursite.com/2018/08/11/flask/0x007-%E9%83%A8%E7%BD%B2centos/"/>
    <id>http://yoursite.com/2018/08/11/flask/0x007-部署centos/</id>
    <published>2018-08-11T07:20:39.000Z</published>
    <updated>2018-08-11T07:22:19.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统配置"><a class="markdownIt-Anchor" href="#系统配置"></a> 系统配置</h1><h2 id="创建新用户"><a class="markdownIt-Anchor" href="#创建新用户"></a> 创建新用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">adduser -U wluser -s /bin/bash</span><br><span class="line">passwd wluser</span><br><span class="line">passwd:xxxx</span><br><span class="line"></span><br><span class="line">visudo</span><br><span class="line">====</span><br><span class="line">wluser  ALL=(ALL) ALL</span><br><span class="line">=====</span><br><span class="line">su wluser</span><br></pre></td></tr></table></figure><h2 id="导入环境变量"><a class="markdownIt-Anchor" href="#导入环境变量"></a> 导入环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export MAIL_SERVER=smtp.163.com</span><br><span class="line">export MAIL_PORT=25</span><br><span class="line">export MAIL_USERNAME=</span><br><span class="line">export MAIL_PASSWORD=</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="安装python3"><a class="markdownIt-Anchor" href="#安装python3"></a> 安装python3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ sudo mkdir /usr/local/python3 # 创建安装目录</span><br><span class="line"></span><br><span class="line"># 下载 Python 源文件</span><br><span class="line">$ wget --no-check-certificate https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz</span><br><span class="line"># 注意：wget获取https的时候要加上：--no-check-certificate</span><br><span class="line"></span><br><span class="line">$ tar -xzvf Python-3.6.0.tgz # 解压缩包</span><br><span class="line"></span><br><span class="line">$ cd Python-3.6.0 # 进入解压目录</span><br><span class="line"></span><br><span class="line">$ sudo ./configure --prefix=/usr/local/python3 # 指定创建的目录</span><br><span class="line"></span><br><span class="line">$ sudo make</span><br><span class="line"></span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line">$ sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br><span class="line"></span><br><span class="line">$ cd /usr/bin</span><br><span class="line"></span><br><span class="line">$ sudo mv python python.bak</span><br><span class="line"></span><br><span class="line">$ sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python</span><br><span class="line"></span><br><span class="line">$ sudo vim /usr/bin/yum</span><br><span class="line">改为：</span><br><span class="line">#!/usr/bin/python2</span><br><span class="line"></span><br><span class="line">$ sudo vim /usr/libexec/urlgrabber-ext-down</span><br><span class="line">改为：</span><br><span class="line">#!/usr/bin/python2</span><br><span class="line"></span><br><span class="line"># 首先安装 epel 扩展源</span><br><span class="line">$ sudo yum -y install epel-release</span><br><span class="line"></span><br><span class="line"># 安装 python-pip</span><br><span class="line">$ sudo yum -y install python-pip</span><br><span class="line"></span><br><span class="line"># 清除 cache</span><br><span class="line">$ sudo yum clean all</span><br></pre></td></tr></table></figure><h1 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> mysql</h1><h2 id="下载安装mysql"><a class="markdownIt-Anchor" href="#下载安装mysql"></a> 下载安装mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 5.6 版本</span><br><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-7.noarch.rpm</span><br><span class="line"></span><br><span class="line"># rpm安装源</span><br><span class="line">rpm -ivh mysql-community-release-el7-7.noarch.rpm</span><br><span class="line"># yum安装</span><br><span class="line">yum install -y mysql-server</span><br><span class="line"># 设置默认目录权限</span><br><span class="line">chown -R wluser:wluser /var/lib/mysql</span><br><span class="line"># 重启mysql</span><br><span class="line">service mysqld restart</span><br><span class="line"></span><br><span class="line"># 创建数据库</span><br><span class="line">create database `databasename` default character set utf8 collate utf8_general_ci;</span><br><span class="line"></span><br><span class="line"># 更改root密码</span><br><span class="line">update user set password=password(&apos;qwer1234&apos;) where user=&apos;root&apos;;</span><br><span class="line"></span><br><span class="line"># 远程登录用户</span><br><span class="line">grant all privileges on *(db name).* to &apos;username&apos;@&apos;%&apos; identified by &apos;qwe123&apos; with grant option</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 创建本地登录用户</span><br><span class="line">use awesome;</span><br><span class="line">grant all privileges on megablog.* to &apos;john&apos;@&apos;localhost&apos; identified by &apos;qwe123&apos;;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 重启mysql</span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h1 id="openresty"><a class="markdownIt-Anchor" href="#openresty"></a> openresty</h1><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. 安装完以后，如果不是root安装，很容易访问首页会出现403 forbin的现象。 </span><br><span class="line"></span><br><span class="line">2. 安装依赖</span><br><span class="line">sudo yum install pcre-devel openssl-devel gcc curl</span><br><span class="line"></span><br><span class="line">3. 下载openresty</span><br><span class="line"></span><br><span class="line">4. 解压</span><br><span class="line">tar -zxvf openresty.tar.gz</span><br><span class="line"></span><br><span class="line">5. 安装</span><br><span class="line">./configure --with-luajit \</span><br><span class="line">            --without-http_redis2_module \</span><br><span class="line">            --with-http_iconv_module \</span><br><span class="line">            --with-http_postgres_module</span><br><span class="line">gmake</span><br><span class="line">gmake install</span><br></pre></td></tr></table></figure><h2 id="nginxconf"><a class="markdownIt-Anchor" href="#nginxconf"></a> nginx.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #lua_shared_dict limit 50m;</span><br><span class="line">    #lua_package_path &quot;/opt/openresty/nginx/conf/waf/?.lua&quot;;</span><br><span class="line">    #init_by_lua_file &quot;/opt/openresty/nginx/conf/waf/init.lua&quot;;</span><br><span class="line">    #access_by_lua_file &quot;/opt/openresty/nginx/conf/waf/access.lua&quot;;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    ...</span><br><span class="line">    # 省略的配置全部注释掉</span><br><span class="line">    include &quot;/home/wluser/opt/nginx/conf/www.microblog.com.conf&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网站配置"><a class="markdownIt-Anchor" href="#网站配置"></a> 网站配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">upstream microblog &#123;</span><br><span class="line">   server 127.0.0.1:8000;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name www.microblog.com;</span><br><span class="line">   location / &#123;</span><br><span class="line">    proxy_pass http://microblog;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gunicorn"><a class="markdownIt-Anchor" href="#gunicorn"></a> gunicorn</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动四个线程</span><br><span class="line">gunicorn -b 127.0.0.1:8000 -w 4 run:app -D</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>本来还想再上个waf的，但是出现问题，对于lua+nginx还不是太熟，就先放下了。后面继续完善</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#系统配置&quot;&gt;&lt;/a&gt; 系统配置&lt;/h1&gt;
&lt;h2 id=&quot;创建新用户&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#创建新用户&quot;&gt;&lt;/a&gt; 创建新用户&lt;
      
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>python模块-configparse</title>
    <link href="http://yoursite.com/2018/08/10/python/python%E6%A8%A1%E5%9D%97-configparse/"/>
    <id>http://yoursite.com/2018/08/10/python/python模块-configparse/</id>
    <published>2018-08-10T13:37:49.000Z</published>
    <updated>2018-08-10T13:38:39.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>学习一下configparse的用法。其实很简单，就是记录一下代码。方便查找</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><h2 id="configini"><a class="markdownIt-Anchor" href="#configini"></a> config.ini</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[head]</span><br><span class="line">title=&apos;Hello World&apos;</span><br><span class="line"></span><br><span class="line">[body]</span><br><span class="line">div=&quot;this is world&quot;</span><br><span class="line">h1 = &quot;this is h1&quot;</span><br></pre></td></tr></table></figure><h2 id="configpy"><a class="markdownIt-Anchor" href="#configpy"></a> <a href="http://config.py" target="_blank" rel="noopener">config.py</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python </span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">config.read(&apos;config.ini&apos;)</span><br><span class="line"></span><br><span class="line">sections = config.sections()</span><br><span class="line">print(sections)  # [head, body]</span><br><span class="line"></span><br><span class="line">head = config[&apos;head&apos;]</span><br><span class="line">print(head) #  &lt;Section: head&gt;</span><br><span class="line"> </span><br><span class="line">title = head[&apos;title&apos;]</span><br><span class="line">print(title) # &apos;Hello World&apos;</span><br><span class="line"></span><br><span class="line">body = config[&apos;body&apos;]</span><br><span class="line">print(body)  # &lt;Section: body&gt;  </span><br><span class="line"></span><br><span class="line">for k,v in body.items():</span><br><span class="line">    print(k,v)</span><br><span class="line">    </span><br><span class="line"># div &quot;this is world&quot;</span><br><span class="line"># h1 &quot;this is h1&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;学习一下configparse的用法。其实很简单，就是记录一下代码。方便查找&lt;/p&gt;
&lt;h1 id=&quot;代码&quot;&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
      <category term="python模块" scheme="http://yoursite.com/categories/python%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>移动端测试3-第一个脚本</title>
    <link href="http://yoursite.com/2018/08/10/appium/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%953-%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/08/10/appium/移动端测试3-第一个脚本/</id>
    <published>2018-08-10T13:30:36.000Z</published>
    <updated>2018-08-10T13:33:51.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动安卓虚拟机"><a class="markdownIt-Anchor" href="#启动安卓虚拟机"></a> 启动安卓虚拟机</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -avd avd_name</span><br></pre></td></tr></table></figure><h1 id="ui-automate-viewer"><a class="markdownIt-Anchor" href="#ui-automate-viewer"></a> UI automate viewer</h1><h2 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 在SDK的目录下面，直接运行脚本即可打开，</span><br><span class="line">2. 然后点击 device screenshot 按钮</span><br><span class="line">3. 需要注意的是appium要关掉不能打开，否则会出现错误</span><br><span class="line">4. 点击选取元素</span><br></pre></td></tr></table></figure><h1 id="appium"><a class="markdownIt-Anchor" href="#appium"></a> appium</h1><h2 id="命令行开启"><a class="markdownIt-Anchor" href="#命令行开启"></a> 命令行开启</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 直接输入，也就启动了</span><br><span class="line"># 看来一下，appium貌似会启动adb，去寻找连接的安卓设备。还是挺好用的。</span><br><span class="line"></span><br><span class="line">appium</span><br></pre></td></tr></table></figure><h2 id="桌面版启动"><a class="markdownIt-Anchor" href="#桌面版启动"></a> 桌面版启动</h2><p>直接双击启动</p><h1 id="第一个脚本"><a class="markdownIt-Anchor" href="#第一个脚本"></a> 第一个脚本</h1><p>我们基于python写第一个自动化测试脚本</p><h2 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install appium-python-client</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line"># author: johnw</span><br><span class="line"></span><br><span class="line">from appium import webdriver</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">desired_caps = &#123;&#125;</span><br><span class="line">desired_caps[&apos;platformName&apos;] = &apos;Android&apos;  </span><br><span class="line">desired_caps[&apos;platformVersion&apos;] = &apos;6.0&apos;  </span><br><span class="line">desired_caps[&apos;deviceName&apos;] = &apos;Android Emulator&apos;  </span><br><span class="line">desired_caps[&apos;appPackage&apos;] = &apos;com.android.calculator2&apos;  </span><br><span class="line">desired_caps[&apos;appActivity&apos;] = &apos;.Calculator&apos;</span><br><span class="line">driver = webdriver.Remote(&apos;http://localhost:4723/wd/hub&apos;, desired_caps)</span><br><span class="line">driver.find_element_by_id(&quot;com.android.calculator2:id/digit_8&quot;).click()</span><br><span class="line">driver.find_element_by_id(&quot;com.android.calculator2:id/op_mul&quot;).click()</span><br><span class="line">driver.find_element_by_id(&quot;com.android.calculator2:id/digit_9&quot;).click()</span><br><span class="line">driver.find_element_by_id(&quot;com.android.calculator2:id/eq&quot;).click()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>appium不需要做任何的设置，直接打开，在代码里面写好相关参数，直接运行，appium就能够连接到安卓虚拟机，进行执行。</p><h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1><p>还有以下问题需要在以后实践：</p><ol><li>如何连接真机</li><li>如果启动多台虚拟机多线程做自动化</li><li>如何启动多台真机做自动化</li><li>如何混合做自动化</li><li>如何持续集成</li><li>如何安装测试软件，安装过程如何测试</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;启动安卓虚拟机&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#启动安卓虚拟机&quot;&gt;&lt;/a&gt; 启动安卓虚拟机&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>移动端测试2-测试环境搭建</title>
    <link href="http://yoursite.com/2018/08/09/appium/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%952-%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/08/09/appium/移动端测试2-测试环境搭建/</id>
    <published>2018-08-09T12:46:53.000Z</published>
    <updated>2018-08-09T12:52:07.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>最近接触移动端测试，csdn大神写的真的是糊里糊涂，还号称从零入门，估计自己都没搞清楚。。。<br>也因为这样走了不少弯路，在这里记录一下。<br>实际上，要启动安卓虚拟机根本不需要狗屁的studio。直接下载命令行的sdk tool即可，下载studio下了一天。。。。<br>挂上梯子下载很多东西就很快。</p><h2 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装nodejs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 上官网下载安装</span><br><span class="line">2. 升级已有的nodejs</span><br><span class="line">sudo npm install n -g</span><br><span class="line">// 升级到最新版本</span><br><span class="line">sudo n latest</span><br><span class="line">//升级到稳定版本</span><br><span class="line">sudo n stable</span><br><span class="line">3. 升级npm</span><br><span class="line">sudo npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="命令安装appium"><a class="markdownIt-Anchor" href="#命令安装appium"></a> 命令安装appium</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g cnpm</span><br><span class="line">cnpm install -g appium</span><br><span class="line">cnmp install -g appium-doctor</span><br></pre></td></tr></table></figure><h2 id="软件安装appium"><a class="markdownIt-Anchor" href="#软件安装appium"></a> 软件安装appium</h2><p>直接上官网下载安装</p><h2 id="检查appium"><a class="markdownIt-Anchor" href="#检查appium"></a> 检查appium</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appium-doctor</span><br></pre></td></tr></table></figure><h2 id="检查配置"><a class="markdownIt-Anchor" href="#检查配置"></a> 检查配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 有时候你的shell设置为zsh的话，那么设置在.bash_profile 就会失效。这个时候就要设置在.zshrc里面，</span><br><span class="line"></span><br><span class="line"># JAVA</span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar</span><br><span class="line"></span><br><span class="line"># android</span><br><span class="line">export ANDROID_HOME=/Users/wenzhongwei/Library/Android/sdk</span><br><span class="line">export ANDRIOD_SDK_HOME=/Users/wenzhongwei/Library/Android/sdk</span><br><span class="line">export ANDROID_AVD_HOME=/Users/wenzhongwei/.android/avd</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$ANDRIOD_SDK_HOME/tools:$ANDRIOD_SDK_HOME/platform-tools$ANDRIOD_HOME/emulator:$PATH</span><br><span class="line"></span><br><span class="line">alias emulator=$&#123;ANDROID_HOME&#125;/emulator/emulator</span><br><span class="line"></span><br><span class="line"># 另外安装，用于测试ios</span><br><span class="line">brew install carthage</span><br></pre></td></tr></table></figure><h2 id="启动安卓虚拟机"><a class="markdownIt-Anchor" href="#启动安卓虚拟机"></a> 启动安卓虚拟机</h2><h4 id="下载sdk-tools"><a class="markdownIt-Anchor" href="#下载sdk-tools"></a> 下载sdk tools</h4><p>不需要下载android studio。只需要命令行的sdk tools即可<br>点击<a href="https://developer.android.com/studio/#downloads" target="_blank" rel="noopener">下载</a></p><h4 id="命令行启动"><a class="markdownIt-Anchor" href="#命令行启动"></a> 命令行启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/wenzhongwei/Library/Android/sdk</span><br><span class="line">cd tools/bin</span><br><span class="line"></span><br><span class="line"># 查看平台</span><br><span class="line">./sdkmanager --list</span><br><span class="line"></span><br><span class="line"># 安装平台</span><br><span class="line">./sdkmanager &quot;platform;andriod-27&quot;</span><br><span class="line"></span><br><span class="line"># 创建虚拟机</span><br><span class="line">./avdmanager create avd --name myavd1 -k &quot;platform;andriod-27&quot;</span><br><span class="line"></span><br><span class="line">注意： 这里要指定ANDROID_AVD_HOME否则会出错。</span><br><span class="line"></span><br><span class="line"># 查看有哪一些虚拟机</span><br><span class="line">./avdmanager list avd</span><br><span class="line"></span><br><span class="line"># 注： 这里在windows上面要安装haxm，最新版安装失败，选择7.0 版本即可，在github上搜索Intel的版本进行下载</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">emulator -avd myavd</span><br></pre></td></tr></table></figure><h2 id="启动ios虚拟机"><a class="markdownIt-Anchor" href="#启动ios虚拟机"></a> 启动ios虚拟机</h2><p>使用simulator开启虚拟机</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;最近接触移动端测试，csdn大神写的真的是糊里糊涂，还号称从零入门，估计自己都没搞清楚。。。&lt;br&gt;
也因为这样走了不少弯路，在这里记录一下。&lt;
      
    
    </summary>
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>0x006-使用email</title>
    <link href="http://yoursite.com/2018/08/08/flask/0x006-%E4%BD%BF%E7%94%A8email/"/>
    <id>http://yoursite.com/2018/08/08/flask/0x006-使用email/</id>
    <published>2018-08-08T14:15:14.000Z</published>
    <updated>2018-08-08T14:16:00.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发送邮件重置密码"><a class="markdownIt-Anchor" href="#发送邮件重置密码"></a> 发送邮件重置密码</h1><h2 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h2><ol><li>重置密码需要用户输入邮箱，因此需要开发一个输入邮箱的页面</li><li>开发重置密码功能</li></ol><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-mail</span><br><span class="line">pip install pyjwt</span><br></pre></td></tr></table></figure><h2 id="开发输入邮箱用于重置密码的页面"><a class="markdownIt-Anchor" href="#开发输入邮箱用于重置密码的页面"></a> 开发输入邮箱用于重置密码的页面</h2><h3 id="表单对象"><a class="markdownIt-Anchor" href="#表单对象"></a> 表单对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class ResetPasswdByEmailForm(FlaskForm):</span><br><span class="line">    email = StringField(&quot;请输入你的邮箱：&quot;,validators=[DataRequired()])</span><br><span class="line">    submit = Submit(&quot;提交&quot;)</span><br></pre></td></tr></table></figure><h3 id="模板页面"><a class="markdownIt-Anchor" href="#模板页面"></a> 模板页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;_layout.html&quot; %&#125;</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;form method=&quot;POST&quot;&gt;</span><br><span class="line">        &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123; form.email.label &#125;&#125;</span><br><span class="line">            &#123;&#123; form.email() &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &#123;&#123; form.submit() &#125;&#125;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="业务逻辑"><a class="markdownIt-Anchor" href="#业务逻辑"></a> 业务逻辑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 重置密码所需要填入email的页面</span><br><span class="line">@app.route(&apos;/reset/password&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class="line">def reset_passwd_by_email():</span><br><span class="line">    if current_user.is_authenticated:</span><br><span class="line">        flash(&quot;已经登录啦&quot;)</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line">    form = RestPasswdByEmailForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        user = User.query.filter_by(email=form.email.data).first()</span><br><span class="line">        if user:</span><br><span class="line">            send_password_reset_email(user)</span><br><span class="line">        flash(&quot;已经发送邮件，如果没有收到邮件，请检查邮箱地址是否正确。&quot;)</span><br><span class="line">        return redirect(url_for(&apos;login&apos;))</span><br><span class="line">    return render_template(&apos;reset_passwd_by_email.html&apos;,form=form)</span><br></pre></td></tr></table></figure><h2 id="开发重置密码功能"><a class="markdownIt-Anchor" href="#开发重置密码功能"></a> 开发重置密码功能</h2><h3 id="准备发送给用户邮件"><a class="markdownIt-Anchor" href="#准备发送给用户邮件"></a> 准备发送给用户邮件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># templates/email/reset_passwd.txt | reset_passwd.html</span><br><span class="line">&lt;p&gt;Dear &#123;&#123; user.username &#125;&#125;,&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    To reset your password</span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(&apos;reset_password&apos;, token=token, _external=True) &#125;&#125;&quot;&gt;</span><br><span class="line">        click here</span><br><span class="line">    &lt;/a&gt;.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Alternatively, you can paste the following link in your browser&apos;s address bar:&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; url_for(&apos;reset_password&apos;, token=token, _external=True) &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;If you have not requested a password reset simply ignore this message.&lt;/p&gt;</span><br><span class="line">&lt;a href=&quot;javascript:alert(0)&quot;&gt;Click me to show xss&lt;/a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    alert(1);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;p&gt;Sincerely,&lt;/p&gt;</span><br><span class="line">&lt;p&gt;The Microblog Team&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="发送邮件的功能"><a class="markdownIt-Anchor" href="#发送邮件的功能"></a> 发送邮件的功能</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 首先配置服务器地址，在config.py里面配置</span><br><span class="line">MAIL_SERVER = os.environ.get(<span class="string">"MAIL_SERVER"</span>)</span><br><span class="line">MAIL_PORT = os.environ.get(<span class="string">"MAIL_PORT"</span>) <span class="keyword">or</span> <span class="number">25</span></span><br><span class="line">MAIL_USE_TLS = os.environ.get(<span class="string">"MAIL_USE_TLS"</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br><span class="line">MAIL_USERNAME = os.environ.get(<span class="string">"MAIL_USERNAME"</span>)</span><br><span class="line">MAIL_PASSWORD = os.environ.get(<span class="string">"MAIL_PASSWORD"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 开发发送邮件的函数, email.py</span><br><span class="line"><span class="comment"># 在flask中，有两个状态，一个是请求上下文，一个应用程序上下文</span></span><br><span class="line"><span class="comment"># 很多时候，这两种状态，flask会自动去调配</span></span><br><span class="line"><span class="comment"># 但是如果是自己起的线程，就需要自己去适配。</span></span><br><span class="line"><span class="comment"># 具体还需要学习。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_async_email</span><span class="params">(app,msg)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        mail.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span><span class="params">(subject,sender,recipients,text_body,html_body)</span>:</span></span><br><span class="line">    msg = Message(subject,sender=sender,recipients=recipients)</span><br><span class="line">    msg.body = text_body</span><br><span class="line">    msg.html = html_body</span><br><span class="line">    Thread(target=send_async_email, args=(app,msg)).start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_password_reset_email</span><span class="params">(user)</span>:</span></span><br><span class="line">    token = user.generate_token()</span><br><span class="line">    send_email(<span class="string">"【重置你的密码】"</span>,sender=app.config[<span class="string">'MAIL_USERNAME'</span>],recipients=[user.email],</span><br><span class="line">            text_body=render_template(<span class="string">'email/reset_password.txt'</span>,user=user,token=token),</span><br><span class="line">            html_body = render_template(<span class="string">'email/reset_password.html'</span>,user=user,token=token))</span><br></pre></td></tr></table></figure><h3 id="token的功能"><a class="markdownIt-Anchor" href="#token的功能"></a> token的功能</h3><blockquote><p>token用于我们判断这个用户是否是本人，也就是从这个邮箱里面链接，这个我们在这个用户的类里面直接生成。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(UserMixix,db.Model)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_token</span><span class="params">(self,expires_in=<span class="number">600</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> jwt.encode(</span><br><span class="line">            &#123;<span class="string">"reset_passwd"</span>:self.id,<span class="string">"exp"</span>:time()+ expires_in&#125;,</span><br><span class="line">            app.config[<span class="string">'SECRET_KEY'</span>],algorithm=<span class="string">'HS256'</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_token</span><span class="params">(token)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            id = jwt.decode(</span><br><span class="line">                token,app.config[<span class="string">'SECRET_KEY'</span>],algorithms=[<span class="string">'HS256'</span>])[<span class="string">'reset_passwd'</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            app.logger.error(<span class="string">"查无此人，此token为&#123;&#125;"</span>.format(token))</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">return</span> User.query.get(id)</span><br></pre></td></tr></table></figure><h3 id="修改密码的实际页面"><a class="markdownIt-Anchor" href="#修改密码的实际页面"></a> 修改密码的实际页面</h3><ol><li>首先判断这个user是不是登录了</li><li>验证一下传过来的token，查询用户，如果是失效的，或者不符合的，直接返回</li><li>开始接受表单数据，写入数据库</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置密码的真实页面</span></span><br><span class="line"><span class="meta">@app.route('/reset/password/&lt;token&gt;',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset_password</span><span class="params">(token)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        flash(<span class="string">"已经登录啦。"</span>)</span><br><span class="line">        <span class="keyword">return</span> rediretc(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line">    user = User.validate_token(token)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        flash(<span class="string">"验证失败，返回首页"</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    </span><br><span class="line">    form = ResetPasswdForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        passwd = form.password.data</span><br><span class="line">        user.set_password(passwd)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db.session.commit()</span><br><span class="line">            flash(<span class="string">"成功修改密码！！"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            app.logger.error(e)</span><br><span class="line">            db.session.rollback()</span><br><span class="line">            flash(<span class="string">"修改密码失败！"</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'reset_passwd'</span>))</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'reset_passwd.html'</span>,form=form)</span><br></pre></td></tr></table></figure><h3 id="模板页面-2"><a class="markdownIt-Anchor" href="#模板页面-2"></a> 模板页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;_layout.html&quot; %&#125;</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;form method=&quot;POST&quot;&gt;</span><br><span class="line">        &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123; form.password.label &#125;&#125;</span><br><span class="line">            &#123;&#123; form.password() &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123; form.password2.label &#125;&#125;</span><br><span class="line">            &#123;&#123; form.password2() &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &#123;&#123; form.submit() &#125;&#125;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;发送邮件重置密码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#发送邮件重置密码&quot;&gt;&lt;/a&gt; 发送邮件重置密码&lt;/h1&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#需求&quot;&gt;&lt;/a&gt; 
      
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>0x005-错误处理</title>
    <link href="http://yoursite.com/2018/08/08/flask/0x005-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/08/08/flask/0x005-错误处理/</id>
    <published>2018-08-08T14:14:37.000Z</published>
    <updated>2018-08-08T14:14:55.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h1><ol><li>页面错误的处理，比如404页面，500页面</li><li>发送email，通知当前发生的错误</li><li>将发生的错误记录到本地log</li></ol><h1 id="页面错误的处理"><a class="markdownIt-Anchor" href="#页面错误的处理"></a> 页面错误的处理</h1><p>页面错误的处理其实有两种，一种是基于全局的，一种是基于蓝图。我们这个项目没有用到蓝图</p><ol><li>全局的就使用errorhandler(404)</li><li>蓝图就要使用app_errorhandler(404)</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'404.html'</span>),<span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(500)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Internal_error</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'500.html'</span>),<span class="number">500</span></span><br></pre></td></tr></table></figure><h1 id="记录log"><a class="markdownIt-Anchor" href="#记录log"></a> 记录log</h1><p>flask 内部维护了一个logger记录器，可以直接使用app.logger来使用，我们在定义RotatingFileHandler这个类来进行日志格式的定义。这样就完成了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># microapp/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> app.debug:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'logs'</span>):</span><br><span class="line">        os.mkdir(<span class="string">'logs'</span>)</span><br><span class="line">    </span><br><span class="line">    file_handler = RotatingFileHandler(<span class="string">'logs/microblog.log'</span>,maxBytes=<span class="number">10240</span>,backupCount=<span class="number">10</span>)</span><br><span class="line">    file_handler.setFormatter(logging.Formatter(</span><br><span class="line">        <span class="string">'%(asctime)s %(levelname)s:%(message)s [in %(pathname)s:%(lineno)d]'</span></span><br><span class="line">    ))</span><br><span class="line">    app.logger.addHandler(file_handler)</span><br><span class="line">    app.logger.setLevel(logging.INFO)</span><br><span class="line">    app.logger.info(<span class="string">"app startup"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#需求&quot;&gt;&lt;/a&gt; 需求&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;页面错误的处理，比如404页面，500页面&lt;/li&gt;
&lt;li&gt;发送email，通知当前发生的错误&lt;/li&gt;
&lt;li&gt;将发生的错误记录
      
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>0x004-数据库使用</title>
    <link href="http://yoursite.com/2018/08/08/flask/0x004-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/08/08/flask/0x004-数据库使用/</id>
    <published>2018-08-08T14:14:04.000Z</published>
    <updated>2018-08-08T14:14:22.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><ol><li>使用pymysql做为数据库驱动</li><li>使用flask-sqlalchemy做为数据库orm对象框架</li><li>使用flask-migrate做为数据库版本控制框架</li></ol><h1 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h1><h3 id="安装数据库相关依赖"><a class="markdownIt-Anchor" href="#安装数据库相关依赖"></a> 安装数据库相关依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br><span class="line">pip install flask-sqlalchemy</span><br><span class="line">pip install flask-migrate</span><br></pre></td></tr></table></figure><h3 id="数据库配置"><a class="markdownIt-Anchor" href="#数据库配置"></a> 数据库配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">"mysql+pymysql://test:qwe123@192.168.232.132/megablog"</span></span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"><span class="comment"># microapp/__init__.py</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate </span><br><span class="line">...</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line">migrate = Migrate(db,app)</span><br></pre></td></tr></table></figure><h1 id="数据库关系"><a class="markdownIt-Anchor" href="#数据库关系"></a> 数据库关系</h1><p>一般来说现在有三种数据库关系</p><ol><li>一对一</li><li>多对一</li><li>多对多</li></ol><h4 id="一对一"><a class="markdownIt-Anchor" href="#一对一"></a> 一对一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一对多的关系语句上db.relationship()基础上添加一个uselist=False</span><br></pre></td></tr></table></figure><h4 id="一对多"><a class="markdownIt-Anchor" href="#一对多"></a> 一对多</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">数据库中如果是一对多的关系，那么就是在唯一的一方，保存id，在多的一方保存关系</span><br><span class="line"></span><br><span class="line">比如，</span><br><span class="line">一片文章只能有一个人来发表，那么post里面就保存user_id 作为外键</span><br><span class="line">一个人可以发表多篇文章，那么user里面就保存关系</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    user_id = db.Column(db.Integer,db.ForeignKey(<span class="string">'user.id'</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(UserMixin,db.Model)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    posts = db.relationship(<span class="string">'Post'</span>,backref=<span class="string">'author'</span>,lazy=<span class="string">'dynamic'</span>)</span><br></pre></td></tr></table></figure><h3 id="多对多"><a class="markdownIt-Anchor" href="#多对多"></a> 多对多</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">多对多比较复杂，有两种情况，需要新建一个表来进行映射，这里我们采用学生和老师的关系来理解第一种情况，即多对多是两个不同的类</span><br><span class="line"><span class="number">1.</span> 一个学生的类，肯定是对应着多位老师的类</span><br><span class="line"><span class="number">2.</span> 一个老师的类，肯定也是对应着多位学生的类</span><br><span class="line">association = db.Table(<span class="string">'association'</span>,</span><br><span class="line">    <span class="comment"># 把学生放在了左边</span></span><br><span class="line">    db.Column(<span class="string">'student_id'</span>,db.Integer,db.ForeignKey(<span class="string">'student.id'</span>)), </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 把老师放在了右边</span></span><br><span class="line">    db.Column(<span class="string">'teacher_id'</span>,db.Integer,db.ForeignKey(<span class="string">'teacher.id'</span>)),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ =<span class="string">'student'</span></span><br><span class="line">    id = db.Column(db.Integer,primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name=db.Column(db.String(<span class="number">64</span>))</span><br><span class="line">    <span class="comment"># 这个backref应该通常要指回自己，代表反向查询</span></span><br><span class="line">    <span class="comment"># 比如我们可以通过student.teachers查询到所有老师</span></span><br><span class="line">    <span class="comment"># 又通过某个老师查询到所有学生student.teachers[0].students</span></span><br><span class="line">    teachers = db.relationship(<span class="string">'Teacher'</span>,secondary=association,backref=<span class="string">'students'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ =<span class="string">'teacher'</span></span><br><span class="line">    id =db.Column(db.Integer,primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">120</span>))</span><br><span class="line">    students = db.relationship(<span class="string">'Student'</span>,secondary=association,backref=<span class="string">'teachers'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作流程</span></span><br><span class="line"><span class="comment"># 添加两个学生两个老师</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student(name=<span class="string">"johnw1"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = Student(name=<span class="string">"jacob"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = Teacher(name=<span class="string">"jack1"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t2 = Teacher(name=<span class="string">"jack2"</span>)</span><br><span class="line"><span class="comment"># 在学生里面添加老师</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.teachers.append(t1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.teachers.append(t2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2.teachers.append(t1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2.teachers.append(t2)</span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.add(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.add(t1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.add(t2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.add(s2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.commit()</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2.teachers</span><br><span class="line">[&lt;Teacher <span class="number">3</span>&gt;, &lt;Teacher <span class="number">4</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2.teachers[<span class="number">0</span>].student</span><br><span class="line">[&lt;Student <span class="number">2</span>&gt;, &lt;Student <span class="number">3</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.teachers</span><br><span class="line">[&lt;Teacher <span class="number">3</span>&gt;, &lt;Teacher <span class="number">4</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向查询，通过学生查到老师，再查到一共有几个学生。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.teachers[<span class="number">0</span>].students</span><br><span class="line">[&lt;Student <span class="number">2</span>&gt;, &lt;Student <span class="number">3</span>&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 老师添加学生也是同样的情况</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s3 = Student(name=<span class="string">"wen"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s4 = Student(name=<span class="string">"wen2"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1.students.append(s3)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1.students.append(s4)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.session.commit()</span><br><span class="line"></span><br><span class="line">第二种情况，多对多是同一个类。以本程序为例子，用户关注和被关注，都是用到了user这个类而已。</span><br><span class="line"><span class="number">1.</span> 首先新建一个映射的表</span><br><span class="line">follow_table = db.Table(<span class="string">"follow_table"</span>,</span><br><span class="line">                db.Column(<span class="string">"follower_id"</span>,db.Integer,db.ForeignKey(<span class="string">'user.id'</span>)),</span><br><span class="line">                db.Column(<span class="string">"followed_id"</span>,db.Integer,db.ForeignKey(<span class="string">"user.id"</span>)))</span><br><span class="line"></span><br><span class="line">在这里我们将关注者放在了左边，被关注者放在了右边</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 创建关系</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(UserMixin,db.Model)</span>:</span></span><br><span class="line">    followed = db.relationship(<span class="string">"User"</span>,secondary=follow_table,</span><br><span class="line">                <span class="comment"># 第一层定义关注者</span></span><br><span class="line">                primaryjoin = (follow_table.c.follower_id == id),</span><br><span class="line">                <span class="comment"># 第二层定义被关注者</span></span><br><span class="line">                secondaryjoin = (follow_table.c.followed_id == id),</span><br><span class="line">                <span class="comment"># 反向查询，就可以查询出这个被关注者有多少粉丝</span></span><br><span class="line">                backref = db.backref(<span class="string">'followers'</span>,lazy=<span class="string">'dynamic'</span>),lazy=<span class="string">'dynamic'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过sql打印，我们可以看到</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(u2.followed)</span><br><span class="line">SELECT user.id AS user_id, user.username AS user_username, user.email AS user_email, user.password_hash AS user_password_hash, user.des AS user_des, user.register_date AS user_register_date</span><br><span class="line">FROM user, follow_table</span><br><span class="line">WHERE follow_table.follower_id = %(param_1)s AND follow_table.followed_id = user.id</span><br></pre></td></tr></table></figure><p><mark>最后，上面代码中使用了多次 lazy = ‘dynamic’<br>这是为了避免一次查询的数据太多，如果只是返回一个数据，那就没必要，如果返回大量的数据，那么性能就会提高很多。</mark></p><h1 id="数据库orm写法"><a class="markdownIt-Anchor" href="#数据库orm写法"></a> 数据库ORM写法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class User(db.Model):</span><br><span class="line">    __tablename__ = &quot;user&quot;</span><br><span class="line">    id = db.Column(db.Integer,primary_key=True)</span><br><span class="line">    username = db.Column(db.String(64),index=True,unique=True)</span><br><span class="line">    email = db.Column(db.String(120),index=True,unique=True)</span><br><span class="line">    password_hash = db.Column(db.String(128))</span><br><span class="line">    des = db.Column(db.Text)</span><br><span class="line">    register_date = db.Column(db.DateTime,default=datetime.now)</span><br><span class="line">    posts = db.relationship(&apos;Post&apos;,backref=&apos;author&apos;,lazy=&apos;dynamic&apos;)</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;&lt;user:&#123;&#125;&gt;&quot;.format(self.username)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;使用pymysql做为数据库驱动&lt;/li&gt;
&lt;li&gt;使用flask-sqlalchemy做为数据库orm对象框架&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>0x003-表单的应用</title>
    <link href="http://yoursite.com/2018/08/08/flask/0x003-%E8%A1%A8%E5%8D%95%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2018/08/08/flask/0x003-表单的应用/</id>
    <published>2018-08-08T14:13:32.000Z</published>
    <updated>2018-08-08T14:13:51.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>在flask中，通常使用flask-wtf来创建一个表单对象，并在表单对象中，对其中的字段进行验证。</p><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><h4 id="安装flask-wtf"><a class="markdownIt-Anchor" href="#安装flask-wtf"></a> 安装flask-wtf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-wtf</span><br></pre></td></tr></table></figure><h4 id="设置secret_key"><a class="markdownIt-Anchor" href="#设置secret_key"></a> 设置SECRET_KEY</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.config[&apos;SECRET_KEY&apos;] = &apos;xxxxx&apos;</span><br><span class="line">新建config.py</span><br><span class="line"></span><br><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">class Config(object):</span><br><span class="line">    SECRET_KEY = &apos;02cc16ca-a181-4fe5-bf7e-3e7820fb9bfb&apos;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">最后使用</span><br><span class="line">app.config.from_object(Config)</span><br></pre></td></tr></table></figure><h2 id="使用flask-wtf创建对象"><a class="markdownIt-Anchor" href="#使用flask-wtf创建对象"></a> 使用flask-wtf创建对象</h2><h4 id="创建表单对象"><a class="markdownIt-Anchor" href="#创建表单对象"></a> 创建表单对象</h4><ol><li>render_kw 用于渲染html属性</li><li>validate_xxxfield 用于验证xxx字段</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class LoginForm(FlaskForm):</span><br><span class="line">    username = StringField(&apos;Username&apos;,validators=[DataRequired()],render_kw=&#123;</span><br><span class="line">        &quot;class&quot;:&quot;form-control&quot;,</span><br><span class="line">        &quot;id&quot;:&quot;inputEmail3&quot;,</span><br><span class="line">        &quot;placeholder&quot;:&quot;Username&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">    submit = SubmitField(&quot;Submit&quot;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">class RegisterForm(FlaskForm):</span><br><span class="line">    username = StringField(&quot;请输入用户名：&quot;,validators = [DataRequired(),Length(1,16,message=&apos;用户名不能超过16个字符&apos;),Regexp(r&apos;[a-zA-Z0-9\u4e00-\u9fa5]&apos;,message=&apos;只接受字母数字和中文&apos;)])</span><br><span class="line">    password = PasswordField(&quot;请输入密码：&quot;,validators = [DataRequired()])</span><br><span class="line">    password2 = PasswordField(&quot;重新输入密码：&quot;,validators=[DataRequired(),EqualTo(&quot;password&quot;,message=&quot;两次输入的密码必须要相同&quot;)])</span><br><span class="line">    email = StringField(&quot;请输入邮箱：&quot;,validators = [DataRequired(),Email(message=&apos;邮箱格式有误。&apos;)])</span><br><span class="line">    des = TextAreaField(&quot;自我介绍:&quot;,validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(&quot;提交&quot;)</span><br><span class="line"></span><br><span class="line">    def validate_username(self,username):</span><br><span class="line">        user = User.query.filter_by(username=username.data).first()</span><br><span class="line">        if user:</span><br><span class="line">            raise ValidationError(&apos;error&apos;)</span><br><span class="line">    </span><br><span class="line">    def validate_email(self,email):</span><br><span class="line">        email = User.query.filter_by(email = email.data).first()</span><br><span class="line">        if email:</span><br><span class="line">            raise ValidationError(&quot;error&quot;)</span><br></pre></td></tr></table></figure><h4 id="模板应用"><a class="markdownIt-Anchor" href="#模板应用"></a> 模板应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;form class=&quot;form-horizontal&quot; method=&quot;POST&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">        </span><br><span class="line">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">        &#123;&#123; form.username.label(class_=&quot;col-sm-2 control-label&quot;)&#125;&#125;</span><br><span class="line">        </span><br><span class="line">        &lt;div class=&quot;col-sm-10&quot;&gt;</span><br><span class="line">        </span><br><span class="line">                &#123;&#123; form.username() &#125;&#125;</span><br><span class="line">                &#123;% for error in form.username.errors %&#125;</span><br><span class="line">                &lt;span style=&quot;color:red&quot;&gt;&#123;&#123; error &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">                </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</span><br><span class="line">            &#123;&#123; form.submit(class_=&apos;class=&quot;btn btn-default&quot;&apos;)&#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="视图函数"><a class="markdownIt-Anchor" href="#视图函数"></a> 视图函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@auth.route(&apos;/login&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class="line">def login():</span><br><span class="line">    ...</span><br><span class="line">    form=LoginForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        ...</span><br><span class="line">    return render_template(&apos;auth/login.html&apos;,title=&apos;login&apos;,form=form)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;在flask中，通常使用flask-wtf来创建一个表单对象，并在表单对象中，对其中的字段进行验证。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>0x002-jinja2静态模板应用</title>
    <link href="http://yoursite.com/2018/08/08/flask/0x002-jinja2%E9%9D%99%E6%80%81%E6%A8%A1%E6%9D%BF%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2018/08/08/flask/0x002-jinja2静态模板应用/</id>
    <published>2018-08-08T14:13:00.000Z</published>
    <updated>2018-08-08T14:13:18.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>在flask中，通常结合jinja2做模板的渲染。<a href="http://jinja.pocoo.org/" target="_blank" rel="noopener">jinja2</a>是一套流行的python模板语言</p><h1 id="flask中静态模板的应用"><a class="markdownIt-Anchor" href="#flask中静态模板的应用"></a> flask中静态模板的应用</h1><h2 id="jinja2简单介绍"><a class="markdownIt-Anchor" href="#jinja2简单介绍"></a> jinja2简单介绍</h2><blockquote><p>jinja2 使用一个名为Environment的中心对象，这个类用于存储配置，全局对象。如果不是结合flask来使用jinja2的话，那么你需要使用以下的语法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from jinja2 import Environment,PackageLoader</span><br><span class="line"></span><br><span class="line"># 新建templates文件夹在当前目录下，里面放置模板</span><br><span class="line"># 因为我们是直接运行这个文件，所以第一个参数填的是main。</span><br><span class="line"># 如果不是当前的文件执行，可以填写python的包名</span><br><span class="line">env = Environment(loader=PackageLoader(&apos;main&apos;,&apos;templates&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template = env.get_template(&apos;index.html&apos;)</span><br><span class="line">with open(&apos;index.html&apos;,&apos;w&apos;)as f:</span><br><span class="line">    f.write(template.render(title=&apos;welcome&apos;,welcome=&apos;Hello jinja2&apos;))</span><br></pre></td></tr></table></figure><h2 id="flask中的jinja2"><a class="markdownIt-Anchor" href="#flask中的jinja2"></a> flask中的jinja2</h2><blockquote><p>flask中的jinja2不用这么麻烦，只要在当前的app下面新建好templates的文件夹，在views里面就可以直接使用render_template进行模板渲染了。下面介绍常见模板用法</p></blockquote><h4 id="普通用法"><a class="markdownIt-Anchor" href="#普通用法"></a> 普通用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#microapp/templates/_layout.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &#123;% block title %&#125;&#123;% endblock %&#125;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &#123;% block main %&#125;&#123;% endblock %&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html</span><br></pre></td></tr></table></figure><h4 id="模板继承"><a class="markdownIt-Anchor" href="#模板继承"></a> 模板继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># microapp/templates/index.html</span><br><span class="line">&#123;% extends &quot;_layout.html&quot; %&#125;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">&lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;h1&gt;here is content &lt;/h1&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="模板包含"><a class="markdownIt-Anchor" href="#模板包含"></a> 模板包含</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 包含</span><br><span class="line">&#123;% extends &quot;_layout.html&quot; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    ...</span><br><span class="line">    &#123;% include &quot;_posts.html&quot; %&#125;</span><br><span class="line">    &#123;% include &quot;_pagination.html&quot;%&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">   </span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h4 id="循环"><a class="markdownIt-Anchor" href="#循环"></a> 循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for post in posts %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h4 id="条件"><a class="markdownIt-Anchor" href="#条件"></a> 条件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if current_user.is_authenticated %&#125;</span><br><span class="line">    ...</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h4 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% with message = get_flashed_messages() %&#125;</span><br><span class="line">    &#123;% if message %&#125;</span><br><span class="line">        alert(&quot;&#123;&#123; message &#125;&#125;&quot;)</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;在flask中，通常结合jinja2做模板的渲染。&lt;a href=&quot;http://jinja.pocoo.org/&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>0x001-初始化项目</title>
    <link href="http://yoursite.com/2018/08/08/flask/0x001-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2018/08/08/flask/0x001-初始化项目/</id>
    <published>2018-08-08T14:12:08.000Z</published>
    <updated>2018-08-12T10:00:57.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化项目"><a class="markdownIt-Anchor" href="#初始化项目"></a> 初始化项目</h1><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><h4 id="安装python3"><a class="markdownIt-Anchor" href="#安装python3"></a> 安装python3</h4><p>下载 <a href="https://www.python.org/downloads/" target="_blank" rel="noopener">点击</a> 安装</p><h4 id="创建python虚拟环境"><a class="markdownIt-Anchor" href="#创建python虚拟环境"></a> 创建python虚拟环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python -m venv venv</span><br><span class="line"></span><br><span class="line"># windows</span><br><span class="line">.\venv\Scripts\activate</span><br><span class="line"># mac</span><br><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure><h4 id="安装相关依赖"><a class="markdownIt-Anchor" href="#安装相关依赖"></a> 安装相关依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><h2 id="初始化项目-2"><a class="markdownIt-Anchor" href="#初始化项目-2"></a> 初始化项目</h2><h4 id="项目结构"><a class="markdownIt-Anchor" href="#项目结构"></a> 项目结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">microapp</span><br><span class="line">    --auth</span><br><span class="line">        --__init__.py</span><br><span class="line">        --forms.py</span><br><span class="line">        --views.py</span><br><span class="line">    --home</span><br><span class="line">        --__init__.py</span><br><span class="line">        --forms.py</span><br><span class="line">        --views.py</span><br><span class="line">    --profile</span><br><span class="line">        --__init__.py</span><br><span class="line">        --forms.py</span><br><span class="line">        --views.py</span><br><span class="line">    --templates</span><br><span class="line">    --static</span><br><span class="line">    __init__.py</span><br><span class="line">    common.py</span><br><span class="line">    email.py</span><br><span class="line">    errors.py</span><br><span class="line">    models.py</span><br><span class="line">    exceptions.py</span><br><span class="line">test</span><br><span class="line">venv</span><br><span class="line">run.py</span><br><span class="line">config.py</span><br></pre></td></tr></table></figure><h4 id="初始化flask"><a class="markdownIt-Anchor" href="#初始化flask"></a> 初始化flask</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate </span><br><span class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> LoginManager</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail</span><br><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line">db = SQLAlchemy()</span><br><span class="line">migrate = Migrate()</span><br><span class="line">loginmanager = LoginManager()</span><br><span class="line">loginmanager.login_view = <span class="string">'auth.login'</span></span><br><span class="line">loginmanager.login_message = <span class="string">u"Please login to access this url"</span></span><br><span class="line">loginmanager.session_protection = <span class="string">"strong"</span></span><br><span class="line">mail = Mail()</span><br><span class="line">bootstrap = Bootstrap()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">(ConfigObejct)</span>:</span></span><br><span class="line">    <span class="comment"># 指明flask的应用所在，用于以后templates/static等文件位置的放置</span></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    app.config.from_object(ConfigObejct)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    migrate.init_app(app,db)</span><br><span class="line">    loginmanager.init_app(app)</span><br><span class="line">    mail.init_app(app)</span><br><span class="line">    bootstrap.init_app(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_app</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">from</span> .auth <span class="keyword">import</span> auth <span class="keyword">as</span> auth_blueprint</span><br><span class="line">    app.register_blueprint(auth_blueprint,url_prefix=<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">from</span> .home <span class="keyword">import</span> home <span class="keyword">as</span> home_blueprint</span><br><span class="line">    app.register_blueprint(home_blueprint,url_prefix=<span class="string">'/'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> .profiles <span class="keyword">import</span> profiles <span class="keyword">as</span> profiles_blueprint</span><br><span class="line">    app.register_blueprint(profiles_blueprint,url_prefix=<span class="string">'/profile'</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> app.debug:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'logs'</span>):</span><br><span class="line">            os.mkdir(<span class="string">'logs'</span>)</span><br><span class="line">    </span><br><span class="line">        file_handler = RotatingFileHandler(<span class="string">'logs/microblog.log'</span>,maxBytes=<span class="number">10240</span>,backupCount=<span class="number">10</span>)</span><br><span class="line">        file_handler.setFormatter(logging.Formatter(</span><br><span class="line">            <span class="string">'%(asctime)s %(levelname)s:%(message)s [in %(pathname)s:%(lineno)d]'</span></span><br><span class="line">        ))</span><br><span class="line">        app.logger.addHandler(file_handler)</span><br><span class="line">        app.logger.setLevel(logging.INFO)</span><br><span class="line">        app.logger.info(<span class="string">"app startup"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><h4 id="初始化蓝图对象"><a class="markdownIt-Anchor" href="#初始化蓝图对象"></a> 初始化蓝图对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># microapp/auth/__init__.py</span><br><span class="line"></span><br><span class="line">#!/usr/bin/env python </span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">from flask import Blueprint</span><br><span class="line">auth = Blueprint(&apos;auth&apos;,__name__)</span><br><span class="line"></span><br><span class="line">from . import routes,forms</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;初始化项目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#初始化项目&quot;&gt;&lt;/a&gt; 初始化项目&lt;/h1&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#准备工作&quot;&gt;&lt;/a&gt; 准备工作&lt;
      
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>kafka入门</title>
    <link href="http://yoursite.com/2018/08/01/linux/kafka%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/08/01/linux/kafka入门/</id>
    <published>2018-08-01T15:36:35.000Z</published>
    <updated>2018-08-01T15:37:02.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装kafka"><a class="markdownIt-Anchor" href="#安装kafka"></a> 安装Kafka</h1><p>根据架构，我们再安装kafka服务器，因为资源问题，我们已经虚拟了3台zookeeper服务器，接着我们就在一台虚拟机上面虚拟3个kafka服务，使之成为一个伪集群的概念</p><h4 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h4><p>kafka目前的定位是分布式流式处理平台和消息引擎。其核心架构：</p><ol><li>生产者发送消息给kafka服务器</li><li>消费者从kafka服务器读取消息</li><li>kafka服务器依托zookeeper集群进行服务的协调管理。</li></ol><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><h5 id="首先我们需要三份配置文件如下"><a class="markdownIt-Anchor" href="#首先我们需要三份配置文件如下"></a> 首先我们需要三份配置文件，如下</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#config/server1.properties</span><br><span class="line">borker.id=0</span><br><span class="line">delete.topic.enable=true</span><br><span class="line">listeners=PLAINTEXT://192.168.31.64:9092</span><br><span class="line">log.dirs=/data/logs/kafka1</span><br><span class="line">zookeeper.connect=192.168.31.144:2181,192.168.31.20:2181,192.168.31.223:2181</span><br><span class="line">unclean.leader.election.enable=false</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># config/server2.properties</span><br><span class="line">borker.id=1</span><br><span class="line">delete.topic.enable=true</span><br><span class="line">listeners=PLAINTEXT://192.168.31.64:9093</span><br><span class="line">log.dirs=/data/logs/kafka2</span><br><span class="line">zookeeper.connect=192.168.31.144:2181,192.168.31.20:2181,192.168.31.223:2181</span><br><span class="line">unclean.leader.election.enable=false</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># config/server3.properties</span><br><span class="line">borker.id=2</span><br><span class="line">delete.topic.enable=true</span><br><span class="line">listeners=PLAINTEXT://192.168.31.64:9094</span><br><span class="line">log.dirs=/data/logs/kafka3</span><br><span class="line">zookeeper.connect=192.168.31.144:2181,192.168.31.20:2181,192.168.31.223:2181</span><br><span class="line">unclean.leader.election.enable=false</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br></pre></td></tr></table></figure><h5 id="安装jps"><a class="markdownIt-Anchor" href="#安装jps"></a> 安装jps</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk-devel.x86_64 -y</span><br></pre></td></tr></table></figure><h5 id="启动kafka服务器"><a class="markdownIt-Anchor" href="#启动kafka服务器"></a> 启动kafka服务器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/kafka-server-start.sh -daemon config/server1.properties </span><br><span class="line">./bin/kafka-server-start.sh -daemon config/server2.properties </span><br><span class="line">./bin/kafka-server-start.sh -daemon config/server3.properties</span><br></pre></td></tr></table></figure><h5 id="验证服务启动"><a class="markdownIt-Anchor" href="#验证服务启动"></a> 验证服务启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; jps|grep Kafka</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">39969 Kafka</span><br><span class="line">39364 Kafka</span><br><span class="line">39644 Kafka</span><br></pre></td></tr></table></figure><h5 id="验证部署"><a class="markdownIt-Anchor" href="#验证部署"></a> 验证部署</h5><p>我们要验证一下我们部署的可用性。</p><h6 id="测试topic创建和删除"><a class="markdownIt-Anchor" href="#测试topic创建和删除"></a> 测试topic创建和删除</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建</span><br><span class="line">./bin/kafka-topics.sh --zookeeper 192.168.31.144:2181,192.168.31.223:2181,192.168.31.20:2181 --create --topic test-topic --partitions 3 --replication-factor 3</span><br><span class="line"></span><br><span class="line"># 查看topic</span><br><span class="line">./bin/kafka-topics.sh --zookeeper 192.168.31.144:2181,192.168.31.223:2181,192.168.31.20:2181 -list</span><br><span class="line"></span><br><span class="line"># 查看分区信息</span><br><span class="line">./bin/kafka-topics.sh --zookeeper 192.168.31.144:2181,192.168.31.223:2181,192.168.31.20:2181 --describe --topic test-topic </span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">./bin/kafka-topics.sh --zookeeper 192.168.31.144:2181,192.168.31.223:2181,192.168.31.20:2181 --delete --topic test-topic</span><br></pre></td></tr></table></figure><h6 id="测试消息发送和消费"><a class="markdownIt-Anchor" href="#测试消息发送和消费"></a> 测试消息发送和消费</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 开两个终端</span><br><span class="line"># 生产者</span><br><span class="line">./bin/kafka-console-producer.sh --broker-list 192.168.31.64:9092,192.168.31.64:9093,192.168.31.64:9094 --topic test-topic</span><br><span class="line"></span><br><span class="line"># 消费者</span><br><span class="line">./bin/kafka-console-consumer.sh --bootstrap-server 192.168.31.64:9092,192.168.31.64:9093,192.168.31.64:9094 --topic test-topic --from-beginning</span><br></pre></td></tr></table></figure><h1 id="kafka开发"><a class="markdownIt-Anchor" href="#kafka开发"></a> kafka开发</h1><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>无论kafka如何变化，其核心一定是有外部的生产者给自己发送信息，然后有外部的消费者读取信息。kafka封装了一套二进制通信协议，可以使用任何的语言，按照这套协议进行开发编程，在这里我们使用python进行实践</p><h2 id="producer"><a class="markdownIt-Anchor" href="#producer"></a> producer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python </span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line">from kafka import KafkaProducer</span><br><span class="line">from kafka.errors import KafkaError</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">producer = KafkaProducer(bootstrap_servers=[&apos;192.168.31.64:9092&apos;,&apos;192.168.31.64:9093&apos;,&apos;192.168.31.64:9094&apos;],retries=5)</span><br><span class="line"></span><br><span class="line"># Asynchronous by default</span><br><span class="line">future = producer.send(&apos;my-topic&apos;, b&apos;raw_bytes&apos;)</span><br><span class="line"></span><br><span class="line"># Block for &apos;synchronous&apos; sends</span><br><span class="line">try:</span><br><span class="line">    record_metadata = future.get(timeout=10)</span><br><span class="line">except KafkaError:</span><br><span class="line">    # Decide what to do if produce request failed...</span><br><span class="line">    log.exception()</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print (record_metadata.topic)</span><br><span class="line">print (record_metadata.partition)</span><br><span class="line">print (record_metadata.offset)</span><br><span class="line"></span><br><span class="line">producer.send(&apos;my-topic&apos;,key=b&apos;test&apos;,value=b&apos;this is testing message&apos;)</span><br><span class="line"></span><br><span class="line">producer2 = KafkaProducer(bootstrap_servers=[&apos;192.168.31.64:9092&apos;,&apos;192.168.31.64:9093&apos;,&apos;192.168.31.64:9094&apos;],value_serializer=lambda m:json.dumps(m).encode(&apos;utf-8&apos;))</span><br><span class="line">producer2.send(&apos;json-files&apos;,&apos;&#123;&quot;keyxxxx&quot;:&quot;valuexxx&quot;&#125;&apos;)</span><br></pre></td></tr></table></figure><h2 id="consumer"><a class="markdownIt-Anchor" href="#consumer"></a> consumer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from kafka import KafkaConsumer</span><br><span class="line"></span><br><span class="line"># To consume latest messages and auto-commit offsets</span><br><span class="line">consumer = KafkaConsumer(&apos;my-topic&apos;,</span><br><span class="line">                         group_id=&apos;my-group&apos;,</span><br><span class="line">                         bootstrap_servers=[&apos;192.168.31.64:9092&apos;,&apos;192.168.31.64:9093&apos;,&apos;192.168.31.64:9094&apos;])</span><br><span class="line">for message in consumer:</span><br><span class="line">    # message value and key are raw bytes -- decode if necessary!</span><br><span class="line">    # e.g., for unicode: `message.value.decode(&apos;utf-8&apos;)`</span><br><span class="line">    print (&quot;%s:%d:%d: key=%s value=%s&quot; % (message.topic, message.partition,</span><br><span class="line">                                          message.offset, message.key,</span><br><span class="line">                                          message.value))</span><br><span class="line"></span><br><span class="line"># 实时取得数据</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://blog.csdn.net/learn_tech/article/details/80665568" target="_blank" rel="noopener">-bash: jps: command not found</a></p><p><a href="https://blog.csdn.net/LOUISLIAOXH/article/details/51567515" target="_blank" rel="noopener">server.properties配置实践</a></p><p><a href="https://kafka-python.readthedocs.io/en/master/usage.html#kafkaconsumer" target="_blank" rel="noopener">consumber</a></p><p><a href="https://kafka-python.readthedocs.io/en/master/usage.html#kafkaproducer" target="_blank" rel="noopener">producer</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装kafka&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装kafka&quot;&gt;&lt;/a&gt; 安装Kafka&lt;/h1&gt;
&lt;p&gt;根据架构，我们再安装kafka服务器，因为资源问题，我们已经虚拟了3台zookeeper服务器，接着我们就在一台虚
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper简介</title>
    <link href="http://yoursite.com/2018/07/30/linux/zookeeper%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/07/30/linux/zookeeper简介/</id>
    <published>2018-07-30T15:29:11.000Z</published>
    <updated>2018-07-30T15:30:24.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装zookeeper"><a class="markdownIt-Anchor" href="#安装zookeeper"></a> 安装Zookeeper</h2><h4 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h4><p>Zookeeper 是一个非常流行的分布式系统协调服务，目前的应用非常的广泛，其主要特点：</p><ol><li>分布式集群</li><li>高可用性</li><li>奇数个节点</li></ol><p>其应用场景有如下：</p><ol><li>服务器主从选举。假设我们有多个服务器需要提供服务，但是为了数据的一致性，我们需要每一个时刻只能有一个服务器来提供服务，其他服务器做为主服务器的备份，如果主服务器挂了，立马备份服务器就成了主服务器进行工作。这种场景常见于数据库服务器</li><li>批量更新配置，如果我们有多个服务器节点需要更新配置文件的内容，这个时候如果挨个去改，很容易出错，尤其是服务器很多的情况下，统一推送配置文件，就显得很重要。因此我们可以将配置文件存放在第三方，修改后，通知zookeeper通知其他节点，各个节点自己读取配置文件。</li></ol><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><h5 id="安装jdk"><a class="markdownIt-Anchor" href="#安装jdk"></a> 安装Jdk</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install jdk -y</span><br></pre></td></tr></table></figure><h5 id="下载zookeeper"><a class="markdownIt-Anchor" href="#下载zookeeper"></a> 下载zookeeper</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 下载</span><br><span class="line">2. 解压</span><br><span class="line">tar -zxvf zookeeper.tar.gz</span><br></pre></td></tr></table></figure><h5 id="zookeeper的配置文件"><a class="markdownIt-Anchor" href="#zookeeper的配置文件"></a> zookeeper的配置文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 文件位于 zookeeper/conf/zoo.cfg</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line">dataDir=/data/zookeeper</span><br><span class="line">clientPort=2181</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">server.1=192.168.31.144:2888:3888</span><br><span class="line">server.2=192.168.31.20:2888:3888</span><br><span class="line">server.3=192.168.31.223:2888:3888</span><br></pre></td></tr></table></figure><h5 id="将zookeeper复制到多个服务器上面"><a class="markdownIt-Anchor" href="#将zookeeper复制到多个服务器上面"></a> 将zookeeper复制到多个服务器上面</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r zookeeper root@192.168.31.20:.</span><br><span class="line">scp -r zookeeper root@192.168.31.44:.</span><br></pre></td></tr></table></figure><h5 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zookeeper/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><h5 id="查看状态"><a class="markdownIt-Anchor" href="#查看状态"></a> 查看状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zookeeper/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><h5 id="完成后"><a class="markdownIt-Anchor" href="#完成后"></a> 完成后</h5><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/security/zookeeper1.jpg" alt="image"><br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/security/zookeeper2.jpg" alt="image"><br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/security/zookeeper3.jpg" alt="image"></p><h5 id="pythonzookeeper"><a class="markdownIt-Anchor" href="#pythonzookeeper"></a> python+zookeeper</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kazoo.client <span class="keyword">import</span> KazooClient</span><br><span class="line"></span><br><span class="line">zk = KazooClient(hosts=<span class="string">"192.168.31.144:2181,192.168.31.20:2181,192.168.31.223:2181"</span>)</span><br><span class="line">zk.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除节点</span></span><br><span class="line">zk.delete(<span class="string">"/bb/aa/validator"</span>,recursive=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建节点</span></span><br><span class="line">result = zk.create(<span class="string">'/bb/aa/validator'</span>,<span class="string">b'validator_huabei_1'</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新节点</span></span><br><span class="line">zk.set(<span class="string">"/bb/aa/validator"</span>,<span class="string">b"updated new message"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取节点</span></span><br><span class="line">data,stat = zk.get(<span class="string">"/bb/aa/validator"</span>)</span><br><span class="line">print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(stat)</span><br><span class="line"><span class="comment">#zk.delete("/bb/aa/validator",recursive=True)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听节点</span></span><br><span class="line"><span class="meta">@zk.DataWatch("/bb/aa/validator")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">watch_node</span><span class="params">(data, stat)</span>:</span></span><br><span class="line">    print(<span class="string">"Version: %s, data: %s"</span> % (stat, data.decode(<span class="string">"utf-8"</span>)))</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://blog.csdn.net/mrbcy/article/details/54767484" target="_blank" rel="noopener">ZooKeeper简介与安装</a><br><a href="https://blog.csdn.net/liaosiqian/article/details/77828036" target="_blank" rel="noopener">zookeeper伪集群启动失败失败：Invalid config, exiting abnormally</a><br><a href="https://blog.csdn.net/mrbcy/article/details/60869079" target="_blank" rel="noopener">Python与ZooKeeper集群连接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装zookeeper&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装zookeeper&quot;&gt;&lt;/a&gt; 安装Zookeeper&lt;/h2&gt;
&lt;h4 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python模块-协程</title>
    <link href="http://yoursite.com/2018/07/25/python/python%E6%A8%A1%E5%9D%97-%E5%8D%8F%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/07/25/python/python模块-协程/</id>
    <published>2018-07-25T13:41:40.000Z</published>
    <updated>2018-08-10T13:39:32.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="协程"><a class="markdownIt-Anchor" href="#协程"></a> 协程</h1><p>首先写一段简单的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">async def test1():</span><br><span class="line">    await test2()</span><br><span class="line">    print(&apos;This is test1&apos;)</span><br><span class="line">    </span><br><span class="line">async def test2():</span><br><span class="line">    print(&quot;This is test2&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ ==&quot;__main__&quot;:</span><br><span class="line">    b = test1()</span><br><span class="line">    b.send(None)</span><br></pre></td></tr></table></figure><p>很简单的代码，加上async以后，这个函数就成了一个异步函数。异步函数需要通过send() 方法才能执行。否则会报错。</p><h1 id="之前的疑惑"><a class="markdownIt-Anchor" href="#之前的疑惑"></a> 之前的疑惑</h1><p>之前最大的疑惑就是，test2都被挂起在那里了，就只有单线程，单线程都去执行test1了，怎么test2还会有值会返回？</p><p>后来陆续看了一些文章，涉及到了系统底层。<br>系统将这样的IO变化称之为事件变化，提供了专门的模块来进行处理，<br>所以，很明显test2触发了，比如发送请求了，但是没返回，所以先把test2挂起来以后，就由系统去检测其IO变化.<br>一旦有值返回了，系统回来告诉应用程序，<br>应用程序通过回调函数对值做处理。</p><h1 id="简单的协程代码"><a class="markdownIt-Anchor" href="#简单的协程代码"></a> 简单的协程代码</h1><p>在python里面，只有调用了 send方法，协程函数才会去调用一次，所以要整个协程放进去事件循环里面，才能完全的执行完协程函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">test1 start 2018-07-25 14:35:56.808890</span><br><span class="line">test1 start 2018-07-25 14:35:56.808890</span><br><span class="line">test1 start 2018-07-25 14:35:56.808890</span><br><span class="line">test1 done 2018-07-25 14:36:01.835863</span><br><span class="line">test1 done 2018-07-25 14:36:01.835863</span><br><span class="line">test1 done 2018-07-25 14:36:01.835863</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">async def test1():</span><br><span class="line">    print(&quot;test1 start &#123;&#125;&quot;.format(datetime.now()))</span><br><span class="line">    await asyncio.sleep(5)</span><br><span class="line">    print(&quot;test1 done &#123;&#125;&quot;.format(datetime.now()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    a = test1()</span><br><span class="line">    b = test1()</span><br><span class="line">    c = test1()</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [</span><br><span class="line">        asyncio.ensure_future(a),</span><br><span class="line">        asyncio.ensure_future(b),</span><br><span class="line">        asyncio.ensure_future(c),</span><br><span class="line">    ]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks)) # 如果是task，必须要wait一下。</span><br></pre></td></tr></table></figure><p>在这一段代码里面，run_until_complete将协程包装成了一个task对象，也就是Future类的子类.<br>保存了协程运行后的状态，方便后面IO变化以后，用于获取协程的结果。</p><h1 id="增加回调函数"><a class="markdownIt-Anchor" href="#增加回调函数"></a> 增加回调函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">I am test1 and the param is 2</span><br><span class="line">the waitting x is 20</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">async def test1(x):</span><br><span class="line">    print(&quot;I am test1 and the param is &#123;&#125;&quot;.format(x))</span><br><span class="line">    await asyncio.sleep(10)</span><br><span class="line">    return x*10</span><br><span class="line"></span><br><span class="line"># param 是一个future对象。想象一下，这个类来自未来。</span><br><span class="line">def callback(param):</span><br><span class="line">    print(&apos;the waitting x is &#123;&#125;&apos;.format(param.result()))</span><br><span class="line"></span><br><span class="line">a = test1(2)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">task = asyncio.ensure_future(a)</span><br><span class="line">task.add_done_callback(callback)</span><br><span class="line">loop.run_until_complete(task)</span><br></pre></td></tr></table></figure><p>调用了一个回调函数，用于处理异步函数test1的返回值。<br>如果回调函数需要增加参数，可以使用functools.partial。</p><p>使用回调函数需要十分小心，避免掉进回调的地狱。<br>这里我们使用同步的方式来处理异步函数返回来的值，而不一定使用回调函数，<br>其方式就是借用future对象，可以取到异步执行后的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">I am test1 and the param is 2</span><br><span class="line">20</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">async def test1(x):</span><br><span class="line">    print(&quot;I am test1 and the param is &#123;&#125;&quot;.format(x))</span><br><span class="line">    await asyncio.sleep(10)  # 这里是异步操作，所以可以挂起</span><br><span class="line">    return x*10</span><br><span class="line"></span><br><span class="line">a = test1(2)</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"># task 是来自未来的对象</span><br><span class="line">task = asyncio.ensure_future(a)</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line">print(task.result())</span><br></pre></td></tr></table></figure><h1 id="线程阻塞问题"><a class="markdownIt-Anchor" href="#线程阻塞问题"></a> 线程阻塞问题</h1><p>在使用requests的时候，会阻塞掉唯一的线程，就是说你的函数虽然是异步的，<br>但是在这个异步的函数里面，有阻塞线程的调用.<br>于是，你没办法挂起这个函数。这个时候，可以开一个线程让它去阻塞，而当前线程继续执行。<br>当然这样做，就成了多线程了就是。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">from datetime import datetime</span><br><span class="line">import time,requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def run(url):</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    print(&apos;start &#123;&#125; and time is &#123;&#125;&apos;.format(url,datetime.now()))</span><br><span class="line">    try:</span><br><span class="line">        task = loop.run_in_executor(None,requests.get,url)</span><br><span class="line">        #task2 = loop.run_in_executor(None,time.sleep,10)</span><br><span class="line">        complete,pending = await asyncio.wait([task])</span><br><span class="line">        for t in complete:</span><br><span class="line">            print(t.result())</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">    print(&apos;done &#123;&#125; and time is &#123;&#125;&apos;.format(url,datetime.now()))</span><br><span class="line"></span><br><span class="line">url_list = [&apos;http://www.baidu.com&apos;,&apos;http://www.google.com&apos;,&apos;http://www.sina.com.cn&apos;]</span><br><span class="line">tasks = [asyncio.ensure_future(run(url)) for url in url_list]</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"># 这里是并发的场景，每当有协程挂起，就需要wait，如果没加，就会报错。</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start http://www.baidu.com and time is 2018-07-25 15:37:57.221670</span><br><span class="line">start http://www.google.com and time is 2018-07-25 15:37:57.222670</span><br><span class="line">start http://www.sina.com.cn and time is 2018-07-25 15:37:57.223670</span><br><span class="line">done http://www.sina.com.cn and time is 2018-07-25 15:38:07.759670</span><br><span class="line">done http://www.google.com and time is 2018-07-25 15:38:07.936670</span><br><span class="line">done http://www.baidu.com and time is 2018-07-25 15:38:08.014670</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>在协程中，因为很多请求是同步的，会阻塞掉当前的线程，你根本无法挂起这个请求，执行并发，除非使用一些异步框架来做，或者如上开一个另外的线程来 做这种阻塞的动作。这样其实跟多线程没啥区别了，有待研究。当然可以使用gevent这样的框架来做，可以用写同步函数的方式来做异步IO的事情，执行并发等等，但是也有其他的一些缺陷，但是对其底层不了解的话，很容易出现不知所谓的错误。<br>优点：<br>协程开销小</p><p>缺点：<br>复杂<br>一旦异步，全部都必须异步。</p><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> reference</h1><ol><li><p><a href="http://www.dongwm.com/archives/%E4%BD%BF%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-asyncio%E7%AF%87/" target="_blank" rel="noopener">http://www.dongwm.com/archives/使用Python进行并发编程-asyncio篇/</a></p></li><li><p><a href="http://thief.one/2018/06/21/1/" target="_blank" rel="noopener">http://thief.one/2018/06/21/1/</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;协程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#协程&quot;&gt;&lt;/a&gt; 协程&lt;/h1&gt;
&lt;p&gt;首先写一段简单的代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="python模块" scheme="http://yoursite.com/categories/python%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python模块-多进程</title>
    <link href="http://yoursite.com/2018/07/25/python/python%E6%A8%A1%E5%9D%97-%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/07/25/python/python模块-多进程/</id>
    <published>2018-07-25T12:47:20.000Z</published>
    <updated>2018-08-10T13:39:35.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><ul><li>[x] 多进程概念</li><li>[x] 多进程的Process</li><li>[x] 多进程的Pool</li><li>[x] 多进程的Pool相关函数</li><li>[x] 基于队列的多进程</li></ul><h1 id="多进程概念"><a class="markdownIt-Anchor" href="#多进程概念"></a> 多进程概念</h1><blockquote><p>顾名思义，多进程就是多个进程，可以并发执行任务，从而提高效率，在python中，因为全局锁的原因，对于CPU密集的任务，多线程起不到任何的作用，反而会因为线程切换，而导致效率下降。而多进程可以解决这个问题。</p></blockquote><p>多进程一般有两种实现方式</p><ol><li>Process</li><li>Pool</li></ol><h1 id="多进程的process"><a class="markdownIt-Anchor" href="#多进程的process"></a> 多进程的Process</h1><p>首先先上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from multiprocessing import Process</span><br><span class="line">import os</span><br><span class="line">from datetime import datetime</span><br><span class="line">def run_proc(name):</span><br><span class="line">    print(&apos;Child process &#123;0&#125; is running&apos;.format(name,os.getpid()))</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    print(&apos;parent process &#123;&#125; is running&apos;.format(os.getpid()))</span><br><span class="line">    for i in range(5):</span><br><span class="line">        p = Process(target=run_proc,args=(str(i),))</span><br><span class="line">        print(&apos;process start &#123;&#125;&apos;.format(datetime.now()))</span><br><span class="line">        p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    print(&apos;close&apos;)</span><br></pre></td></tr></table></figure><p>很简单的代码示例，跟多线程有点像。</p><h1 id="多进程的pool"><a class="markdownIt-Anchor" href="#多进程的pool"></a> 多进程的Pool</h1><p>有时候进程开的太多容易使得程序崩溃。这个时候可以通过进程池来解决这个问题，如果启动的进程达到了池子里面的数量，就会先执行当前的进程，执行完一个再放进来一个。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*-coding:utf-8-*-</span><br><span class="line"># Pool 指定数量的进程，默认是CPU数量，如果池子没有满，就创建一个新进程，否则就等待</span><br><span class="line"># apply_async 允许多个进程进入池子进行执行</span><br><span class="line"># apply 只允许一个进程</span><br><span class="line"></span><br><span class="line">from multiprocessing import Process,Pool</span><br><span class="line">import os</span><br><span class="line">from datetime import datetime</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def run_proc(i):</span><br><span class="line">    time.sleep(10)</span><br><span class="line">    print(&apos;[process &#123;&#125;]I am child process &#123;&#125; and the start time is &#123;&#125;&apos;.format(i,os.getpid(),datetime.now()))</span><br><span class="line">    time.sleep(10)</span><br><span class="line">    print(&apos;task done&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    p = Pool(processes=os.cpu_count())</span><br><span class="line">    for i in range(10):</span><br><span class="line">        p.apply_async(run_proc,args=(str(i),))</span><br><span class="line">        #p.apply(run_proc,args=(str(i),))</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    print(&apos;all done&apos;)</span><br></pre></td></tr></table></figure><h1 id="多进程的pool相关函数"><a class="markdownIt-Anchor" href="#多进程的pool相关函数"></a> 多进程的Pool相关函数</h1><h3 id="start"><a class="markdownIt-Anchor" href="#start"></a> start()</h3><blockquote><p>启动进程</p></blockquote><h3 id="join"><a class="markdownIt-Anchor" href="#join"></a> join()</h3><blockquote><p>跟多线程一样，使用了join函数，会使得主进程等待子进程结束才会结束，否则就会提前结束</p></blockquote><h3 id="name"><a class="markdownIt-Anchor" href="#name"></a> name</h3><blockquote><p>这不是函数，是一个属性，指的是进程的名字</p></blockquote><h3 id="is_alive"><a class="markdownIt-Anchor" href="#is_alive"></a> is_alive()</h3><blockquote><p>检查进程是否存活，除非进程terminates了。</p></blockquote><h3 id="close"><a class="markdownIt-Anchor" href="#close"></a> close()</h3><blockquote><p>close函数必须要在join函数前面，调用了close函数以后，就不能再添加进程了。这里的close指的是关闭进程池。在Pool里面一定要关闭进程池，而且<mark>必须要在join面前</mark>，要不执行不了。找不到更多的解释，估计很多人也是一知半解。</p></blockquote><h3 id="terminate"><a class="markdownIt-Anchor" href="#terminate"></a> terminate</h3><blockquote><p>结束当前的进程，不在处理</p></blockquote><h1 id="基于队列的多进程"><a class="markdownIt-Anchor" href="#基于队列的多进程"></a> 基于队列的多进程</h1><p>一个简单的多进程队列例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">from multiprocessing import Queue,Pool,Process</span><br><span class="line"></span><br><span class="line"># 使用队列进行多进程</span><br><span class="line"></span><br><span class="line">def producer(q):</span><br><span class="line">    for i in range(20):</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line">def worker(q):</span><br><span class="line">    while not q.empty():</span><br><span class="line">        item = q.get()</span><br><span class="line">        print(item)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    # 在这里加入队列</span><br><span class="line">    q=Queue()</span><br><span class="line">    producer(q)</span><br><span class="line">    for i in range(10):</span><br><span class="line">        p = Process(target=worker,args=(q,))</span><br><span class="line">        p.start()</span><br><span class="line">    </span><br><span class="line">    p.join()</span><br><span class="line">    print(&quot;done&quot;)</span><br></pre></td></tr></table></figure><p>但是需要注意的是，这里的Queue只适用于Process在，不适用于Pool</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[x] 多进程概念&lt;/li&gt;
&lt;li&gt;[x] 多进程的Process&lt;/li&gt;
&lt;li&gt;[x] 多进程的Pool&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="python模块" scheme="http://yoursite.com/categories/python%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>移动端测试1-MAC下配置Android Studio环境</title>
    <link href="http://yoursite.com/2018/07/22/appium/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%951-MAC%E4%B8%8B%E9%85%8D%E7%BD%AEAndroid-Studio%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/07/22/appium/移动端测试1-MAC下配置Android-Studio环境/</id>
    <published>2018-07-22T14:33:51.000Z</published>
    <updated>2018-07-25T12:43:57.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>本来安装工具这种东西是没什么好记录的，点点点就完了，但是因为我国的特殊网络环境，发现在下载android的SDK，一直报&quot; SDK tools directory is missing&quot; 试过多种方法，多种镜像网站，发现均不能下载。最后终于找到解决方法了</p><h1 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h1><h3 id="设置代理"><a class="markdownIt-Anchor" href="#设置代理"></a> 设置代理</h3><p>testhome提供了http代理地址：<br><img src="https://testerhome.com/uploads/photo/2018/c4f0647b-6255-4631-b2f9-24f654d91c4c.png" alt="image"></p><p>其中port number，比如今天是7月22号，port number就是 60722</p><h3 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h3><p>还有一个坑就是，在mac下面删除android，直接从app里面删除是不够的。下面提供彻底删除的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rm -Rf /Applications/Android\ Studio.app</span><br><span class="line">rm -Rf ~/Library/Preferences/AndroidStudio*</span><br><span class="line">rm ~/Library/Preferences/com.google.android.studio.plist</span><br><span class="line">rm -Rf ~/Library/Application\ Support/AndroidStudio*</span><br><span class="line">rm -Rf ~/Library/Logs/AndroidStudio*</span><br><span class="line">rm -Rf ~/Library/Caches/AndroidStudio*</span><br><span class="line">rm -Rf ~/.gradle</span><br><span class="line">rm -Rf ~/.android</span><br><span class="line">rm -Rf ~/Library/Android*</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>算是做为了解移动端的一个起步吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;本来安装工具这种东西是没什么好记录的，点点点就完了，但是因为我国的特殊网络环境，发现在下载android的SDK，一直报&amp;quot; SDK t
      
    
    </summary>
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>python学习-装饰器</title>
    <link href="http://yoursite.com/2018/07/22/python/python%E5%AD%A6%E4%B9%A0-%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://yoursite.com/2018/07/22/python/python学习-装饰器/</id>
    <published>2018-07-22T14:17:13.000Z</published>
    <updated>2018-08-10T13:38:46.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>学习一下python的装饰器函数。关于装饰器的定义，底层，肯定说得不如网上的文章好。这里就简单记录一下其使用。</p><h1 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h1><p>python的装饰器其实是一种面向切面的编程方式，可以将大量可复用的代码抽离出来进行复用，这样的编程方式显得优雅。其主要需求有几种：</p><ol><li>插入日志</li><li>性能测试</li><li>权限检验</li><li>事务处理</li><li>缓存</li><li>…</li></ol><h1 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h1><p>装饰器的语法也很简单，其原理可以先这样理解：<br>假设我们要为一个函数打印log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def foo():</span><br><span class="line">    print(&quot;I am foo&quot;)</span><br><span class="line">    </span><br><span class="line">def print_log_for_foo(func):</span><br><span class="line">    print(&quot;Hello log&quot;)</span><br><span class="line">    func()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">print_log_for_foo(foo)</span><br></pre></td></tr></table></figure><p>这样我们就为foo打印了log，但不是很优雅，因为我们调用的是另一个函数，这样显得杂乱无章。用了装饰器就显得清晰明白了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def decoration(func):</span><br><span class="line">    def wrapper(*args,**kw):</span><br><span class="line">        print(&quot;Hello logs&quot;)</span><br><span class="line">        return func(*args,**kw)</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@decoration    </span><br><span class="line">def foo():</span><br><span class="line">    print(&apos;Hello I am foo&apos;)</span><br><span class="line">    </span><br><span class="line">foo() # 调用foo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 输出</span><br><span class="line">Hello logs</span><br><span class="line">Hello I am foo</span><br></pre></td></tr></table></figure><p>同样的，这样还存在一些问题，[foo函数]被[wrapper函数]包裹住了，这个时候，函数的元信息就变成了[wrapper函数]的了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(foo.__name__) # wrapper</span><br></pre></td></tr></table></figure><p>这个时候我们要引入另一个装饰函数，把元信息也给传进去.<br>所以废话这么多，完整的case是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line">def decoration(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def wrapper(*args,**kw):</span><br><span class="line">        print(&quot;Hello logs&quot;)</span><br><span class="line">        return func(*args,**kw)</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@decoration    </span><br><span class="line">def foo():</span><br><span class="line">    print(&apos;Hello I am foo&apos;)</span><br><span class="line">    </span><br><span class="line">a = foo() # 调用foo</span><br><span class="line">print(foo.__name__) # foo</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 输出</span><br><span class="line">Hello logs</span><br><span class="line">Hello I am foo</span><br><span class="line">foo</span><br></pre></td></tr></table></figure><h1 id="类装饰器"><a class="markdownIt-Anchor" href="#类装饰器"></a> 类装饰器</h1><p>类也有装饰器，其装饰器是通过<figure class="highlight plain"><figcaption><span>函数```来实现的.通过@调用了这个函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>class Decorations(object):<br>def <strong>init</strong>(self,func):<br>self.func = func</p><pre><code>def __call__(self):    print('Hello i am decarations')    self.func()</code></pre><p>@Decorations<br>def foo():<br>print(‘i am foo’)</p><p>foo()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">类装饰器具有以下优点</span><br><span class="line">1. 灵活度大</span><br><span class="line">2. 高内聚</span><br><span class="line">3. 封装性</span><br><span class="line"></span><br><span class="line"># 总结</span><br><span class="line">当然平时一些小东西，也就用函数装饰器就足够使用了。</span><br><span class="line">最后附上写flask时候验证admin权限的装饰器</span><br></pre></td></tr></table></figure><p>def adminRequired(func):<br>@functools.wraps(func)<br>def decoration(*args,**kw):<br>if current_user.is_authenticated and current_user.is_admin == 1:<br>return func(*args,**kw)<br>else:<br>return redirect(url_for(‘auth.login’))<br>return decoration</p><p>@admin.route(’/’)<br>@adminRequired<br>def home():<br>return “Hello This is admin”</p><pre class="highlight"><code class=""># 参考https://foofish.net/python-decorator.html https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318435599930270c0381a3b44db991cd6d858064ac0000 </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;学习一下python的装饰器函数。关于装饰器的定义，底层，肯定说得不如网上的文章好。这里就简单记录一下其使用。&lt;/p&gt;
&lt;h1 id=&quot;需求&quot;&gt;
      
    
    </summary>
    
      <category term="python模块" scheme="http://yoursite.com/categories/python%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试-ui自动化+docker</title>
    <link href="http://yoursite.com/2018/07/19/test/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95-ui%E8%87%AA%E5%8A%A8%E5%8C%96-docker/"/>
    <id>http://yoursite.com/2018/07/19/test/自动化测试-ui自动化-docker/</id>
    <published>2018-07-19T15:54:54.000Z</published>
    <updated>2018-07-19T15:55:54.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>在docker里面创建UI自动化测试平台</p><h1 id="搭建环境"><a class="markdownIt-Anchor" href="#搭建环境"></a> 搭建环境</h1><h2 id="安装docker"><a class="markdownIt-Anchor" href="#安装docker"></a> 安装docker</h2><p>详细见docker官方文档</p><h2 id="安装selenoid"><a class="markdownIt-Anchor" href="#安装selenoid"></a> 安装selenoid</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker pull aerokube/selenoid:latest-release</span><br><span class="line">mkdir -p /data/config</span><br><span class="line">vim /data/config/browsers.json</span><br><span class="line">---------------------------</span><br><span class="line">&#123;</span><br><span class="line">    &quot;firefox&quot;: &#123;</span><br><span class="line">        &quot;default&quot;: &quot;57.0&quot;,</span><br><span class="line">        &quot;versions&quot;: &#123;</span><br><span class="line">            &quot;57.0&quot;: &#123;</span><br><span class="line">                &quot;image&quot;: &quot;selenoid/vnc:firefox_57.0&quot;,</span><br><span class="line">                &quot;port&quot;: &quot;4444&quot;,</span><br><span class="line">                &quot;path&quot;: &quot;/wd/hub&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------</span><br><span class="line"></span><br><span class="line">docker run -d       \</span><br><span class="line">--name selenoid   \</span><br><span class="line">-p 14444:4444     \</span><br><span class="line">-v /data/config:/etc/selenoid/:ro \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">aerokube/selenoid:latest-release</span><br></pre></td></tr></table></figure><p>注意：最好使用其他的端口转发4444端口。4444端口不是安全的，应该禁止掉。</p><h2 id="安装selenoid-ui"><a class="markdownIt-Anchor" href="#安装selenoid-ui"></a> 安装selenoid ui</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker pull aerokube/selenoid-ui</span><br><span class="line">如果selenoid是跟selenoid-ui安装在一起的话，那么需要查看selenoid的IP</span><br><span class="line">&gt;&gt;&gt; ifconfig | grep -E &quot;([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot; | grep -v 127.0.0.1 | awk &apos;&#123; print $2 &#125;&apos; | cut -f2 -d: | head -n1</span><br><span class="line">&gt;&gt;&gt; 172.17.0.1</span><br><span class="line">&gt;&gt;&gt; docker run -d --name selenoid-ui -p 8080:8080 aerokube/selenoid-ui --selenoid-uri http://172.17.0.1:14444</span><br></pre></td></tr></table></figure><h1 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h1><p>在本地写好脚本，用python撸了一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import selenium </span><br><span class="line">from selenium import webdriver</span><br><span class="line">        </span><br><span class="line">capabilities = &#123;</span><br><span class="line">    &quot;browserName&quot;: &quot;firefox&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;57.0&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">driver = webdriver.Remote(</span><br><span class="line">    command_executor=&quot;http://192.168.31.236:4444/wd/hub&quot;,</span><br><span class="line">    desired_capabilities=capabilities)</span><br><span class="line"></span><br><span class="line">driver.get(&apos;https://www.baidu.com&apos;)</span><br><span class="line">print(driver.title)</span><br></pre></td></tr></table></figure><p>然后你就可以看到成功运行的样子<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/selenium/success.jpg" alt="image"></p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>然后打开 <a href="http://yourip:8080" target="_blank" rel="noopener">http://yourip:8080</a> 就可以打开相应的webUI界面，在这里我们可以看到selenoid的使用方法，最后编写相应的脚本放上去跑就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;在docker里面创建UI自动化测试平台&lt;/p&gt;
&lt;h1 id=&quot;搭建环境&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
      <category term="自动化测试" scheme="http://yoursite.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="ui自动化" scheme="http://yoursite.com/tags/ui%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>python模块-requests</title>
    <link href="http://yoursite.com/2018/07/08/python/python%E6%A8%A1%E5%9D%97-requests/"/>
    <id>http://yoursite.com/2018/07/08/python/python模块-requests/</id>
    <published>2018-07-08T15:32:50.000Z</published>
    <updated>2018-08-10T13:39:17.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>requests是python中热门的模块，它封装了python底层的库，并且更加容易使用。在python爬虫中非常常见的使用这个框架作为其请求的发送，这里记录其部分常见用法。</p><h1 id="requests"><a class="markdownIt-Anchor" href="#requests"></a> requests</h1><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install reqeusts</span><br></pre></td></tr></table></figure><h2 id="简单使用"><a class="markdownIt-Anchor" href="#简单使用"></a> 简单使用</h2><h3 id="post请求"><a class="markdownIt-Anchor" href="#post请求"></a> POST请求</h3><h5 id="x-www-form-urlencode"><a class="markdownIt-Anchor" href="#x-www-form-urlencode"></a> x-www-form-urlencode</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data=&#123;</span><br><span class="line">&quot;xx&quot;:&quot;yy&quot;,</span><br><span class="line">&quot;aa&quot;:&quot;bb&quot;</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(&quot;http://www.posturl.com&quot;,data=data)</span><br></pre></td></tr></table></figure><h5 id="json"><a class="markdownIt-Anchor" href="#json"></a> json</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">json=&quot;&#123;&apos;type&apos;:&apos;post&apos;,&apos;age&apos;:123&#125;&quot;</span><br><span class="line">r = requests.post(url,data=json)</span><br></pre></td></tr></table></figure><h2 id="get"><a class="markdownIt-Anchor" href="#get"></a> GET</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;</span><br><span class="line">&quot;user-agent&quot;:&apos;xxxx&apos;,</span><br><span class="line">&#125;</span><br><span class="line">r=requests.get(url,headers=headers)</span><br></pre></td></tr></table></figure><h1 id="高级使用"><a class="markdownIt-Anchor" href="#高级使用"></a> 高级使用</h1><h2 id="有时候某些场景会出现ssl错误我们需要禁用"><a class="markdownIt-Anchor" href="#有时候某些场景会出现ssl错误我们需要禁用"></a> 有时候某些场景会出现SSL错误，我们需要禁用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from urllib3.exceptions import InsecureRequestWarning</span><br><span class="line">requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">requests.api.request(&apos;post&apos;, url, data=&#123;&apos;bar&apos;:&apos;baz&apos;&#125;, json=None, verify=False)</span><br></pre></td></tr></table></figure><h2 id="我们需要session来保持网站的连接"><a class="markdownIt-Anchor" href="#我们需要session来保持网站的连接"></a> 我们需要session来保持网站的连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session = requests.session()</span><br><span class="line">response = session.get(url)</span><br></pre></td></tr></table></figure><h2 id="上传文件模拟"><a class="markdownIt-Anchor" href="#上传文件模拟"></a> 上传文件模拟</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; url = &apos;http://httpbin.org/post&apos;</span><br><span class="line">&gt;&gt;&gt; files = &#123;&apos;file&apos;: (&apos;report.xls&apos;, open(&apos;report.xls&apos;, &apos;rb&apos;), &apos;application/vnd.ms-excel&apos;, &#123;&apos;Expires&apos;: &apos;0&apos;&#125;)&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r = requests.post(url, files=files)</span><br><span class="line">&gt;&gt;&gt; r.text</span><br></pre></td></tr></table></figure><h2 id="responsetext-和-responsecontent"><a class="markdownIt-Anchor" href="#responsetext-和-responsecontent"></a> response.text 和 response.content</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text是正常的字符流</span><br><span class="line">content是二进制的字节流，常用于图片的传输</span><br></pre></td></tr></table></figure><h1 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h1><p>结合unittest做API测试框架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install html-testRunner</span><br><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HtmlTestRunner</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPyRequest</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.url = <span class="string">'https://api.douban.com'</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test_douban_api</span><span class="params">(self)</span>:</span></span><br><span class="line">    r = requests.get(self.url+<span class="string">'/v2/movie/top250'</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">    self.assertTrue(r.status_code,<span class="number">200</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  unittest.main(testRunner=HtmlTestRunner.HTMLTestRunner(output=<span class="string">'.'</span>))</span><br></pre></td></tr></table></figure><p>以上我们就完成了一个以requests发送请求，以html-testRunner生成report，unittest作为验证断言的api框架，（以上代码只为简略的演示。）</p><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> reference</h1><p><a href="http://docs.python-requests.org/zh_CN/latest/" target="_blank" rel="noopener">http://docs.python-requests.org/zh_CN/latest/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;requests是python中热门的模块，它封装了python底层的库，并且更加容易使用。在python爬虫中非常常见的使用这个框架作为其请求
      
    
    </summary>
    
      <category term="python模块" scheme="http://yoursite.com/categories/python%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>
