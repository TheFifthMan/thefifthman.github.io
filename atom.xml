<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-15T14:50:35.941Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构6-哈希表理论学习</title>
    <link href="http://yoursite.com/2018/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%846-%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/08/15/数据结构/数据结构6-哈希表理论学习/</id>
    <published>2018-08-15T14:49:41.000Z</published>
    <updated>2018-08-15T14:50:35.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>哈希表是一种非常重要的数据结构，基于数组实现。有以下优点</p><ol><li>可以快速的执行插入-删除-查找操作</li><li>速度比树还快，可以瞬间找到想要的元素</li></ol><p>一些不足：</p><ol><li>数据没有顺序，不能以固定规则遍历</li><li>key值不能重复</li></ol><p>所以哈希表，其实就是数组的一种变形，数组以数字来标识下标，而哈希表以哈希函数得到的值做为下标。</p><h1 id="场景"><a class="markdownIt-Anchor" href="#场景"></a> 场景</h1><ol><li>1家公司有10000个员工，如何存储信息，并且需要的时候，查找员工信息</li></ol><h4 id="使用数组"><a class="markdownIt-Anchor" href="#使用数组"></a> 使用数组</h4><p>插入和删除需要比较大的消耗，查找只能通过其他标识，比如员工编号查找</p><h4 id="使用链表"><a class="markdownIt-Anchor" href="#使用链表"></a> 使用链表</h4><p>获取只能通过遍历查找，不现实</p><h4 id="哈希表"><a class="markdownIt-Anchor" href="#哈希表"></a> 哈希表</h4><p>将员工名进行哈希，做为下标，可以很容易实现查找</p><h1 id="地址冲突"><a class="markdownIt-Anchor" href="#地址冲突"></a> 地址冲突</h1><p>哈希表是通过将相关信息进行哈希函数，最后得到的值作为地址，存入数据。当要检索数据的时候，通过这个地址可以很快的检索出数据，存入数据的时候，也可以很快的得到地址，直接进行存入。但是会有一个问题，就是计算出来的哈希值地址是重复的。这个时候就要用到下面两个方法解决</p><ol><li>链地址法</li><li>开放地址发</li></ol><h4 id="链地址法"><a class="markdownIt-Anchor" href="#链地址法"></a> 链地址法</h4><p>如下图codewhy师父所说的，链地址法是一个常见解决冲突的方案，存储在地址上的不是单纯的一个元素，而是一个对象，一个链条，如果发现重复地址，就将元素接在链条后面，查询的时候，查出来的是一个链条，这个时候在通过链条间的遍历，查询数据，这个时候链条使用数组结构或者链表结构都差不多。因为都是遍历的操作。<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/structs/%E5%93%88%E5%B8%8C%E9%93%BE%E5%9C%B0%E5%9D%80%E6%B3%95.jpg" alt=""></p><h4 id="开放地址法"><a class="markdownIt-Anchor" href="#开放地址法"></a> 开放地址法</h4><p>因为开放地址法，效率并不如链地址法高，所以比较少用，做一下了解<br>主要有几种方式：</p><ol><li>线性探测： 如果这个地址有数据了，就index+1 查找没有元素的空白地址，进行插入。 容易造成元素聚集，影响性能</li><li>二次探测： 如果这个地址有数据了，就index+1，index+2,index+3 进行探测，有空白地址就进行插入。同样还是会造成元素聚集</li><li>再哈希法：采用另外的哈希函数进行地址的获取。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;哈希表是一种非常重要的数据结构，基于数组实现。有以下优点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以快速的执行插入-删除-查找操作&lt;/li&gt;
&lt;li&gt;速度比
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构5-集合</title>
    <link href="http://yoursite.com/2018/08/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%845-%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2018/08/15/数据结构/数据结构5-集合/</id>
    <published>2018-08-15T14:48:43.000Z</published>
    <updated>2018-08-15T14:51:00.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>编程语言中的集合，主要有几个特点</p><ol><li>集合中的元素不能重复</li><li>集合是无序的</li></ol><h1 id="封装集合类"><a class="markdownIt-Anchor" href="#封装集合类"></a> 封装集合类</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Set</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.items = &#123;&#125;</span><br><span class="line">  <span class="built_in">Set</span>.prototype.has = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.hasOwnProperty(element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Set</span>.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.has(element))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.items[element] = element;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Set</span>.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.has(elem))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.items[elem];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Set</span>.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.items = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Set</span>.prototype.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.items).length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Set</span>.prototype.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.items);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="number">1</span>);</span><br><span class="line">s.add(<span class="number">2</span>);</span><br><span class="line">s.add(<span class="number">3</span>);</span><br><span class="line">s.add(<span class="number">1</span>);</span><br><span class="line">alert(s.value());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;编程语言中的集合，主要有几个特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集合中的元素不能重复&lt;/li&gt;
&lt;li&gt;集合是无序的&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端测试5-第一个自动化测试demo</title>
    <link href="http://yoursite.com/2018/08/15/appium/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%955-%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95demo/"/>
    <id>http://yoursite.com/2018/08/15/appium/移动端测试5-第一个自动化测试demo/</id>
    <published>2018-08-15T14:36:29.000Z</published>
    <updated>2018-08-15T14:48:12.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>这里采用了以下几点做测试</p><ol><li>python的unittest做为校验</li><li>appium</li></ol><h2 id="apk"><a class="markdownIt-Anchor" href="#apk"></a> apk</h2><p>测试一个apk，我们需要知道一些配置信息，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;platformName&apos;</span><br><span class="line">&apos;platformVersion&apos;</span><br><span class="line">&apos;deviceName&apos;</span><br><span class="line">&apos;appPackage&apos;</span><br><span class="line">&apos;appActivity&apos;</span><br></pre></td></tr></table></figure><p>我们需要aapt这个工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $ANDROID_HOME/build-tools/28.0.1 </span><br><span class="line"></span><br><span class="line">./aapt dump badging ~/Downloads/apk/vipkid_v1.5.5_17106180_default_defaultChannel.apk</span><br></pre></td></tr></table></figure><p>然后我们就可以看到如下的appPackage 和 appActicity</p><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/Android/1.jpg" alt="image"><br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/Android/2.jpg" alt="image"></p><p>接着我们要获取deviceName，可以使用以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./abd devices</span><br></pre></td></tr></table></figure><p>platformVersion 需要我们从虚拟机看，或者实际手机查看</p><h1 id="定位元素"><a class="markdownIt-Anchor" href="#定位元素"></a> 定位元素</h1><blockquote><p>使用./uiautomation 进行元素捕获</p></blockquote><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/Android/ui.jpg" alt="image"></p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><h4 id="目录结构"><a class="markdownIt-Anchor" href="#目录结构"></a> 目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--android</span><br><span class="line">    |TestCase</span><br><span class="line">     --|common</span><br><span class="line">     ----| Base.py</span><br><span class="line">     ----| config.py</span><br><span class="line">    |TestCase1.py</span><br><span class="line">    |TestCase2.py</span><br><span class="line">    |TestCase3.py</span><br></pre></td></tr></table></figure><h4 id="basepy"><a class="markdownIt-Anchor" href="#basepy"></a> <a href="http://Base.py" target="_blank" rel="noopener">Base.py</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import unittest</span><br><span class="line">from config import Config</span><br><span class="line"></span><br><span class="line">class BaseTest(unittest.TestCase):</span><br><span class="line">    def setUp(self):</span><br><span class="line">        desired_caps = &#123;&#125;</span><br><span class="line">        desired_caps[&apos;platformName&apos;] = Config[&apos;platformName&apos;]  </span><br><span class="line">        desired_caps[&apos;platformVersion&apos;] = Config[&apos;platformVersion&apos;]  </span><br><span class="line">        desired_caps[&apos;deviceName&apos;] = Config[&apos;deviceName&apos;]  </span><br><span class="line">        desired_caps[&apos;appPackage&apos;] = Config[&apos;appPackage&apos;]   </span><br><span class="line">        desired_caps[&apos;appActivity&apos;] = Config[&apos;appActivity&apos;]  </span><br><span class="line">        self.driver = webdriver.Remote(&apos;http://localhost:4723/wd/hub&apos;, desired_caps)</span><br></pre></td></tr></table></figure><h4 id="configpy"><a class="markdownIt-Anchor" href="#configpy"></a> <a href="http://config.py" target="_blank" rel="noopener">config.py</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Config = &#123;</span><br><span class="line">    &apos;platformName&apos;:&quot;Android&quot;,</span><br><span class="line">    &apos;platformVersion&apos;:&apos;6.0&apos;,</span><br><span class="line">    &apos;deviceName&apos;:&apos;Android Emulator&apos;,</span><br><span class="line">    &apos;appPackage&apos;:&apos;com.android.calculator2&apos;,</span><br><span class="line">    &apos;appActivity&apos;:&apos;.Calculator&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="testcase1py"><a class="markdownIt-Anchor" href="#testcase1py"></a> <a href="http://TestCase1.py" target="_blank" rel="noopener">TestCase1.py</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import unittest</span><br><span class="line">from common.Base import BaseTest</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestCase1(BaseTest):</span><br><span class="line">    def test_register(self):</span><br><span class="line">        self.driver.find_element_by_id(&apos;com.vipkid.app:id/mSignUpLayout&apos;).click()</span><br><span class="line">        self.driver.find_element_by_xpath(&apos;//android.widget.EditText[@content-desc=&quot;请输入您的手机号码&quot;]&apos;).set_value(&apos;18850523947&apos;)</span><br><span class="line">        self.driver.find_element_by_xpath(&apos;//android.widget.EditText[@content-desc=&quot;请输入验证码&quot;]&apos;).send_keys(&apos;12345&apos;)</span><br><span class="line">        self.driver.find_element_by_xpath(&apos;//android.widget.EditText[@content-desc=&quot;请输入推荐人手机号(选填)&quot;]&apos;).send_keys(&apos;1234567890&apos;)</span><br><span class="line">        self.driver.find_element_by_class_name(&apos;android.view.View&apos;).click()</span><br><span class="line">        </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="图示"><a class="markdownIt-Anchor" href="#图示"></a> 图示</h4><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/Android/app.jpg" alt="image"></p><p>至此，完成了一个小demo，虽然还称不上是一个测试，后续需要补上selenium的一些操作知识点。这样的框架无法用于真实生产环境，有几个缺点</p><ol><li>测试用例无法复用</li><li>一个脚本无法用于多个环境</li></ol><p>就当做初学的一个尝试，其代码地址： <a href="https://github.com/TheFifthMan/python_modules/tree/master/android_appium/TestCaseSuites" target="_blank" rel="noopener">https://github.com/TheFifthMan/python_modules/tree/master/android_appium/TestCaseSuites</a></p><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://blog.csdn.net/greta_guo/article/details/71635965" target="_blank" rel="noopener">https://blog.csdn.net/greta_guo/article/details/71635965</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;这里采用了以下几点做测试&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;python的unittest做为校验&lt;/li&gt;
&lt;li&gt;appium&lt;/li&gt;
&lt;/ol&gt;
      
    
    </summary>
    
      <category term="appium" scheme="http://yoursite.com/categories/appium/"/>
    
    
      <category term="appium" scheme="http://yoursite.com/tags/appium/"/>
    
  </entry>
  
  <entry>
    <title>python学习-mixin类</title>
    <link href="http://yoursite.com/2018/08/14/python/python%E5%AD%A6%E4%B9%A0-mixin%E7%B1%BB/"/>
    <id>http://yoursite.com/2018/08/14/python/python学习-mixin类/</id>
    <published>2018-08-14T15:13:37.000Z</published>
    <updated>2018-08-14T15:14:23.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>在看到django-rest-framework的源码的时候，发现使用了mixin类。这里进行一点简单的总结，方便复习</p><h1 id="源码"><a class="markdownIt-Anchor" href="#源码"></a> 源码</h1><p>在rest_framework/mixin.py里面,有这么一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class ListModelMixin(object):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    List a queryset.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def list(self, request, *args, **kwargs):</span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line"></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        if page is not None:</span><br><span class="line">            serializer = self.get_serializer(page, many=True)</span><br><span class="line">            return self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">        serializer = self.get_serializer(queryset, many=True)</span><br><span class="line">        return Response(serializer.data)</span><br></pre></td></tr></table></figure><p>其中，self.filter_queryset(self.get_queryset()) 这个函数是在这个类里面并没有定义，同时，这个类也没有继承其他函数，经过查看，这个函数存在于 GenericAPIView，说明是复用于GenericAPIView。</p><h2 id="自己的理解"><a class="markdownIt-Anchor" href="#自己的理解"></a> 自己的理解:</h2><p>我们写两个类，一个stu类，一个peo类</p><p>stu类，做为mixin类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># stu.py</span><br><span class="line">class StuMixin(object):</span><br><span class="line">  def methodtest(self):</span><br><span class="line">    res = self.print_str()</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure><p>peo类，做为父类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class People(object):</span><br><span class="line">  def print_str(self):</span><br><span class="line">    return &quot;I am a people&quot;</span><br></pre></td></tr></table></figure><p>实例类，做为实例类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Instancetest(StuMixin,People):</span><br><span class="line">  def main(self):</span><br><span class="line">    self.methodtest()</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">  i = Instancetest()</span><br><span class="line">  i.main()</span><br><span class="line">  </span><br><span class="line"># 打印出</span><br><span class="line">I am a people</span><br></pre></td></tr></table></figure><p><strong>说明stu类虽然没有定义方法，但是它直接使用了peo类的方法，这个或许就是mixin类的一大特点。其基础功能由父类实现。</strong> <mark>自己主要实现搭建在这些基础功能之上的功能</mark></p><p>举个例子：</p><blockquote><p>django—rest模块，ListModelMixin模块主要实现数据库检索数据并展示出来，其基础的数据库检索等功能统统是由一个具体的父类实现的。自己只进行组合，这样代码虽然有耦合，但是功能上分得很清楚，基础功能只由父类去做，组合由mixin类进行组合。</p></blockquote><h2 id="进一步拓展"><a class="markdownIt-Anchor" href="#进一步拓展"></a> 进一步拓展</h2><p>假如，你有两个父类： people1，people2。那么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class People(object):</span><br><span class="line">  def print_str(self):</span><br><span class="line">    return &quot;I am a people&quot;</span><br><span class="line"></span><br><span class="line">class People2(object):</span><br><span class="line">  def print_str(self):</span><br><span class="line">    return &quot;I am a people2&quot;</span><br><span class="line"></span><br><span class="line">class Instancetest(StuMixin,People,People2):</span><br><span class="line">  def main(self):</span><br><span class="line">    self.methodtest()</span><br><span class="line">打印出来的是 i am people。</span><br></pre></td></tr></table></figure><p><mark>说明哪个先出现，就继承哪个的方法</mark></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;在看到django-rest-framework的源码的时候，发现使用了mixin类。这里进行一点简单的总结，方便复习&lt;/p&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
      <category term="python模块" scheme="http://yoursite.com/categories/python%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Burp主动扫描</title>
    <link href="http://yoursite.com/2018/08/14/web_security/Burp%E4%B8%BB%E5%8A%A8%E6%89%AB%E6%8F%8F/"/>
    <id>http://yoursite.com/2018/08/14/web_security/Burp主动扫描/</id>
    <published>2018-08-14T14:52:58.000Z</published>
    <updated>2018-08-14T15:00:42.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="burp主动扫描"><a class="markdownIt-Anchor" href="#burp主动扫描"></a> burp主动扫描</h1><h4 id="设置代理"><a class="markdownIt-Anchor" href="#设置代理"></a> 设置代理</h4><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/burp/p1.png" alt="image"></p><h4 id="浏览器设置代理"><a class="markdownIt-Anchor" href="#浏览器设置代理"></a> 浏览器设置代理</h4><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/burp/p2.png" alt="image"></p><h4 id="安装证书"><a class="markdownIt-Anchor" href="#安装证书"></a> 安装证书</h4><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/burp/p3.png" alt="image"><br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/burp/p4.png" alt="image"></p><h4 id="运行业务流程进行流量捕捉"><a class="markdownIt-Anchor" href="#运行业务流程进行流量捕捉"></a> 运行业务流程进行流量捕捉</h4><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/burp/p5.png" alt="image"></p><h4 id="开始扫描"><a class="markdownIt-Anchor" href="#开始扫描"></a> 开始扫描</h4><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/burp/p6.png" alt="image"><br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/burp/p7.png" alt="image"><br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/burp/p8.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;burp主动扫描&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#burp主动扫描&quot;&gt;&lt;/a&gt; burp主动扫描&lt;/h1&gt;
&lt;h4 id=&quot;设置代理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#设置代理&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="web_security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构4-链表</title>
    <link href="http://yoursite.com/2018/08/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%844-%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/08/14/数据结构/数据结构4-链表/</id>
    <published>2018-08-14T13:54:14.000Z</published>
    <updated>2018-08-14T14:52:27.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链表优缺点"><a class="markdownIt-Anchor" href="#链表优缺点"></a> 链表优缺点</h1><p>对于数组来说，链表的优缺点：</p><h4 id="数组的缺点"><a class="markdownIt-Anchor" href="#数组的缺点"></a> 数组的缺点</h4><ol><li>数组的插入和移除是需要比较大成本的，因为每次操作，都需要移动大量的元素</li><li>数组是需要指定一块相对大小的内存</li></ol><h4 id="数组的优点"><a class="markdownIt-Anchor" href="#数组的优点"></a> 数组的优点</h4><ol><li>可以很方便的取出某一个位置的值，适合用于检索数据</li></ol><h4 id="链表的缺点"><a class="markdownIt-Anchor" href="#链表的缺点"></a> 链表的缺点</h4><ol><li>每次寻找数据都要遍历所有的节点，不适用与检索数据，适合存储数据</li></ol><h4 id="链表的优点"><a class="markdownIt-Anchor" href="#链表的优点"></a> 链表的优点</h4><ol><li>链表存储数据只要修改引用地址，其成本减少很多。</li><li>链表不需要指定内存大小，相对灵活，适合存储数据</li></ol><p>这其中的链表又分为单向链表和双向链表。其各自的缺点如下:</p><h4 id="单向链表的缺点"><a class="markdownIt-Anchor" href="#单向链表的缺点"></a> 单向链表的缺点</h4><p>可以到达下一个节点，但是回到上一个节点很难，需要重新遍历</p><h4 id="双向链表的缺点"><a class="markdownIt-Anchor" href="#双向链表的缺点"></a> 双向链表的缺点</h4><ol><li>每次插入或者删除，需要处理四个节点的引用</li><li>占用的内存空间更大</li></ol><h4 id="综上比较"><a class="markdownIt-Anchor" href="#综上比较"></a> 综上比较</h4><ol><li>数组适合用于检索数据的场景</li><li>链表适用于存储数据的场景</li><li>单向链表占用的内存空间比较小，但是回到上一个节点，比较难</li><li>双向链表占用的空间比较大，每次插入删除，需要考虑四种场景，较复杂，但是回到上一个节点比较简单。</li></ol><h1 id="单向链表的实现"><a class="markdownIt-Anchor" href="#单向链表的实现"></a> 单向链表的实现</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SingleLinked</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    SingleLinked.prototype.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(element);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.head = newNode;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(current.next)&#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.next = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    SingleLinked.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">position,element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; <span class="keyword">this</span>.length )<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(element);</span><br><span class="line">        <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">var</span> prev = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(position === <span class="number">0</span>)&#123;</span><br><span class="line">            newNode.next = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">this</span>.head = newNode;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; position )&#123;</span><br><span class="line">                prev = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            prev.next = newNode;</span><br><span class="line">            newNode.next = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// toString方法</span></span><br><span class="line">    SingleLinked.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            str += <span class="string">','</span>+current.element;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.slice(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//位置移除</span></span><br><span class="line">    SigleLinked.prototype.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt; <span class="keyword">this</span>.length || <span class="keyword">this</span>.head === <span class="literal">null</span> )<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">var</span> prev = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(position === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.length === <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.head = <span class="keyword">this</span>.head.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; position)&#123;</span><br><span class="line">                prev = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">                index ++;</span><br><span class="line">            &#125;</span><br><span class="line">            prev.next = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length -- ;</span><br><span class="line">        <span class="keyword">return</span> current.element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检索</span></span><br><span class="line">    SingleLinked.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            <span class="keyword">if</span>(current.element === element)&#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">            index ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据元素移除</span></span><br><span class="line">    SingleLinked.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="keyword">this</span>.indexOf(element);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.removeAt(index)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断链表是否为空</span></span><br><span class="line">    SingleLinked.prototype.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.length === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取第一个节点</span></span><br><span class="line">    SingleLinked.prototype.firstNode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.head.element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">var</span> lk = <span class="keyword">new</span> Linked()</span><br><span class="line">lk.append(<span class="number">1</span>)</span><br><span class="line">lk.append(<span class="number">2</span>)</span><br><span class="line">lk.append(<span class="number">3</span>)</span><br><span class="line">lk.append(<span class="number">4</span>)</span><br><span class="line">lk.append(<span class="number">5</span>)</span><br><span class="line">lk.append(<span class="number">6</span>)</span><br><span class="line">lk.append(<span class="number">7</span>)</span><br><span class="line">lk.append(<span class="number">8</span>)</span><br><span class="line">alert(lk)</span><br></pre></td></tr></table></figure><h1 id="双向链表的实现"><a class="markdownIt-Anchor" href="#双向链表的实现"></a> 双向链表的实现</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoubleLinkNode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.element = element;</span><br><span class="line">          <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">          <span class="keyword">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 在链表的最后面加元素</span></span><br><span class="line">        DoubleLinkNode.prototype.append = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(element);</span><br><span class="line">          <span class="keyword">if</span>(<span class="keyword">this</span>.head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.head = newNode;</span><br><span class="line">            <span class="keyword">this</span>.tail = newNode;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.tail.next = newNode;</span><br><span class="line">            newNode.prev = <span class="keyword">this</span>.tail;</span><br><span class="line">            <span class="keyword">this</span>.tail = newNode;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.length ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//正向遍历</span></span><br><span class="line">        DoubleLinkNode.prototype.forwardSting = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">          <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">          <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            str += <span class="string">','</span>+current.element;                        </span><br><span class="line">            current = current.next;</span><br><span class="line">            </span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//反向遍历</span></span><br><span class="line">        DoubleLinkNode.prototype.backwardString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> current = <span class="keyword">this</span>.tail;</span><br><span class="line">          <span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">          <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            str += <span class="string">','</span>+current.element;            </span><br><span class="line">            current = current.prev;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 任意位置插入</span></span><br><span class="line">        DoubleLinkNode.prototype.insert = <span class="function"><span class="keyword">function</span>(<span class="params">position,element</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(element);</span><br><span class="line">          <span class="keyword">if</span>(position&lt;<span class="number">0</span>||position&gt;<span class="keyword">this</span>.length)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node(element);</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">          <span class="keyword">if</span>(position === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.head === <span class="literal">null</span>)&#123;</span><br><span class="line">              <span class="keyword">this</span>.head = newNode;</span><br><span class="line">              <span class="keyword">this</span>.tail = newNode;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">this</span>.head.prev = newNode;</span><br><span class="line">              newNode.next = <span class="keyword">this</span>.head;</span><br><span class="line">              <span class="keyword">this</span>.head = newNode;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(position === <span class="keyword">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">this</span>.tail.next = newNode;</span><br><span class="line">            newNode.prev = <span class="keyword">this</span>.tail;</span><br><span class="line">            <span class="keyword">this</span>.tail = newNode;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; position)&#123;</span><br><span class="line">              prev = current;</span><br><span class="line">              current = current.next;</span><br><span class="line">              index++;</span><br><span class="line">            &#125;</span><br><span class="line">            current.prev = newNode;</span><br><span class="line">            prev.next = newNode;</span><br><span class="line">            newNode.next = current;</span><br><span class="line">            newNode.prv = prev;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.length ++;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据位置移除节点</span></span><br><span class="line">        DoubleLinkNode.prototype.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(position &lt; <span class="number">0</span> || position &gt;= <span class="keyword">this</span>.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">var</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">          <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">              <span class="keyword">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">              <span class="keyword">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">this</span>.head = current.next;</span><br><span class="line">              <span class="keyword">this</span>.head.prev = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="keyword">this</span>.length - <span class="number">1</span>) &#123;</span><br><span class="line">            current = <span class="keyword">this</span>.tail;</span><br><span class="line">            <span class="keyword">this</span>.tail = current.prev;</span><br><span class="line">            <span class="keyword">this</span>.tail.next = <span class="literal">null</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; position)&#123;</span><br><span class="line">              prev = current;</span><br><span class="line">              current = current.next;</span><br><span class="line">              index++;</span><br><span class="line">            &#125;</span><br><span class="line">            prev.next = current.next;</span><br><span class="line">            current.next.prev = prev;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.length --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据元素，得出位置</span></span><br><span class="line">        DoubleLinkNode.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">          current = <span class="keyword">this</span>.head;</span><br><span class="line">          <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            <span class="keyword">if</span>(element === current.element)&#123;</span><br><span class="line">              <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next</span><br><span class="line">            index ++ ;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据元素位置移除</span></span><br><span class="line">        DoubleLinkNode.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> index = <span class="keyword">this</span>.indexOf(element)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.removeAt(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否是空</span></span><br><span class="line">        DoubleLinkNode.prototype.empty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.length === <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取第一个元素</span></span><br><span class="line">        DoubleLinkNode.prototype.firstNode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.head.element;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取最后一个元素</span></span><br><span class="line">        DoubleLinkNode.prototype.lastNode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.tail.element;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//测试</span></span><br><span class="line">      <span class="keyword">var</span> d = <span class="keyword">new</span> DoubleLinkNode();</span><br><span class="line">      d.append(<span class="number">1</span>);</span><br><span class="line">      d.append(<span class="number">2</span>);</span><br><span class="line">      d.append(<span class="number">3</span>);</span><br><span class="line">      d.append(<span class="number">4</span>);</span><br><span class="line">      d.append(<span class="number">5</span>);</span><br><span class="line">      d.append(<span class="string">'a'</span>)</span><br><span class="line">      <span class="comment">//alert(d.forwardSting());</span></span><br><span class="line">      <span class="comment">//alert(d.backwardString());</span></span><br><span class="line">      d.removeAt(<span class="number">0</span>);</span><br><span class="line">      <span class="comment">//alert(d.forwardSting());</span></span><br><span class="line">      alert(d.length)</span><br><span class="line">      d.removeAt(<span class="number">3</span>);</span><br><span class="line">      alert(d.length)</span><br><span class="line">      alert(d.backwardString());</span><br><span class="line">      alert(d.forwardSting())</span><br><span class="line">      alert(<span class="string">'a的前置位置在'</span>+d.indexOf(<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;链表优缺点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#链表优缺点&quot;&gt;&lt;/a&gt; 链表优缺点&lt;/h1&gt;
&lt;p&gt;对于数组来说，链表的优缺点：&lt;/p&gt;
&lt;h4 id=&quot;数组的缺点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构3-优先级队列</title>
    <link href="http://yoursite.com/2018/08/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%843-%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2018/08/14/数据结构/数据结构3-优先级队列/</id>
    <published>2018-08-14T13:27:22.000Z</published>
    <updated>2018-08-14T13:53:34.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优先级队列"><a class="markdownIt-Anchor" href="#优先级队列"></a> 优先级队列</h1><h4 id="优先级队列的优点"><a class="markdownIt-Anchor" href="#优先级队列的优点"></a> 优先级队列的优点</h4><blockquote><p>队列的有点是先进先出，这导致我们有的数据比较重要，却不能提前出来。优先级队列主要解决了这一痛点。</p></blockquote><h4 id="优先级实现"><a class="markdownIt-Anchor" href="#优先级实现"></a> 优先级实现</h4><ol><li>封装的元素要和优先级放在一起</li><li>添加元素的时候，要遍历优先级比较，进行存储</li></ol><h4 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQeueu</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个对象，存储元素和优先级</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element,priority</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.element = element;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数组存储对象</span></span><br><span class="line">    <span class="keyword">var</span> item = [];</span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 数组是否为空</span></span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.length === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element,priority</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> node = <span class="keyword">new</span> Node(element,priority);</span><br><span class="line">        <span class="comment">// 如果数组是空的，那么就是第一个元素，直接加进来即可。</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty())&#123;</span><br><span class="line">            items.push(node);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//判断是否已经加入数组</span></span><br><span class="line">            <span class="keyword">var</span> added = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 遍历查询是否优先级比较高</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(node.priority &gt; item[i].priority)&#123;</span><br><span class="line">                    <span class="comment">//数字越高，优先级越高，进行插入</span></span><br><span class="line">                    items.splice(i,<span class="number">0</span>,node);</span><br><span class="line">                    added = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果都没有，说明数字是最小的，优先级是最低的，加在最后面。</span></span><br><span class="line">            <span class="keyword">if</span>(!added)&#123;</span><br><span class="line">                items.push(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">pe = <span class="keyword">new</span> PriorityqQueue()</span><br><span class="line">pe.enqueue(<span class="string">'a'</span>,<span class="number">1</span>);</span><br><span class="line">pe.enqueue(<span class="string">'b'</span>,<span class="number">2</span>);</span><br><span class="line">pe.enqueue(<span class="string">'c'</span>,<span class="number">3</span>);</span><br><span class="line">pe.enqueue(<span class="string">'d'</span>,<span class="number">4</span>);</span><br><span class="line">alert(pe.dequeue().ele);</span><br><span class="line">alert(pe.dequeue().ele);</span><br><span class="line">alert(pe.dequeue().ele);</span><br><span class="line">alert(pe.dequeue().ele);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;优先级队列&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#优先级队列&quot;&gt;&lt;/a&gt; 优先级队列&lt;/h1&gt;
&lt;h4 id=&quot;优先级队列的优点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#优先级队列的优点&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>burp+sqlmap进行sql注入检测</title>
    <link href="http://yoursite.com/2018/08/14/web_security/burp-sqlmap%E8%BF%9B%E8%A1%8Csql%E6%B3%A8%E5%85%A5%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2018/08/14/web_security/burp-sqlmap进行sql注入检测/</id>
    <published>2018-08-14T13:26:06.000Z</published>
    <updated>2018-08-14T13:26:43.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>在渗透测试中，我们经常会遇到测试sql注入的点，需要登录，这个时候，我们通常使用sqlmap这款工具进行测试，在参数上选择添加cookies。这样总是略显的麻烦，更好的办法可以将在burp上的请求保存为文件，直接在sqlmap引入，进行扫描</p><h1 id="操作步骤"><a class="markdownIt-Anchor" href="#操作步骤"></a> 操作步骤</h1><h4 id="将请求存为本地文件"><a class="markdownIt-Anchor" href="#将请求存为本地文件"></a> 将请求存为本地文件</h4><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/burpandsqlmap1.png" alt="image"></p><h4 id="sqlmap引入进行扫描"><a class="markdownIt-Anchor" href="#sqlmap引入进行扫描"></a> sqlmap引入进行扫描</h4><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/burpandsqlmap2.png" alt="image"></p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>算是安全测试的一点小tip吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;在渗透测试中，我们经常会遇到测试sql注入的点，需要登录，这个时候，我们通常使用sqlmap这款工具进行测试，在参数上选择添加cookies。这
      
    
    </summary>
    
      <category term="web_security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构2-队列</title>
    <link href="http://yoursite.com/2018/08/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842-%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2018/08/14/数据结构/数据结构2-队列/</id>
    <published>2018-08-13T16:27:51.000Z</published>
    <updated>2018-08-13T16:31:21.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><ol><li>什么是队列</li><li>队列的应用场景</li><li>队列的实现</li><li>优先级队列</li><li>优先级队列的使用</li></ol><h1 id="什么是队列"><a class="markdownIt-Anchor" href="#什么是队列"></a> 什么是队列</h1><p>队列是一种受限的线性结构，执行了先进先出的原则，受限在于，它只能在前面弹出元素，在后面添加元素</p><h1 id="队列的应用场景"><a class="markdownIt-Anchor" href="#队列的应用场景"></a> 队列的应用场景</h1><ol><li>排队执行任务</li><li>多线程队列执行任务。按照次序启动线程</li></ol><h1 id="队列的实现"><a class="markdownIt-Anchor" href="#队列的实现"></a> 队列的实现</h1><ol><li>enqueue: 先进</li><li>dequeue：先出</li><li>first：返回队列的第一个元素</li><li>isEmpty：是否空</li><li>size：队列长度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> items = [];</span><br><span class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">        items.push(elem);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.shift();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> items.length;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.first = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优先级队列"><a class="markdownIt-Anchor" href="#优先级队列"></a> 优先级队列</h1><p>优先级队列，顾名思义就是优先级高的排在前面，先执行。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">PriorityqQueue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> items=[]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span>(<span class="params">ele,priority</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ele = ele;</span><br><span class="line">        <span class="keyword">this</span>.priority = priority;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">ele,priority</span>)</span>&#123;</span><br><span class="line">        qe =<span class="keyword">new</span> QueueElement(ele,priority);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isEmpty())&#123;</span><br><span class="line">            items.push(qe);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> added = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;items.length;i++)&#123;</span><br><span class="line">                <span class="comment">// 数字越大，优先级越高</span></span><br><span class="line">                <span class="keyword">if</span>(qe.priority &gt; items[i].priority)&#123;</span><br><span class="line">                    items.splice(i,<span class="number">0</span>,qe);</span><br><span class="line">                    added = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!added)&#123;</span><br><span class="line">                items.push(qe)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.shift();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pe = <span class="keyword">new</span> PriorityqQueue()</span><br><span class="line">pe.enqueue(<span class="string">'a'</span>,<span class="number">1</span>);</span><br><span class="line">pe.enqueue(<span class="string">'b'</span>,<span class="number">2</span>);</span><br><span class="line">pe.enqueue(<span class="string">'c'</span>,<span class="number">3</span>);</span><br><span class="line">pe.enqueue(<span class="string">'d'</span>,<span class="number">4</span>);</span><br><span class="line">alert(pe.dequeue().ele);</span><br><span class="line">alert(pe.dequeue().ele);</span><br><span class="line">alert(pe.dequeue().ele);</span><br><span class="line">alert(pe.dequeue().ele);</span><br></pre></td></tr></table></figure><h1 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h1><p><a href="https://github.com/TheFifthMan/data_structure/blob/master/code/queue.html" target="_blank" rel="noopener">https://github.com/TheFifthMan/data_structure/blob/master/code/queue.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;什么是队列&lt;/li&gt;
&lt;li&gt;队列的应用场景&lt;/li&gt;
&lt;li&gt;队列的实现&lt;/li&gt;
&lt;li&gt;优先级队列&lt;/li&gt;
&lt;li&gt;优先级队
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构1-栈</title>
    <link href="http://yoursite.com/2018/08/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841-%E6%A0%88/"/>
    <id>http://yoursite.com/2018/08/14/数据结构/数据结构1-栈/</id>
    <published>2018-08-13T16:27:44.000Z</published>
    <updated>2018-08-13T16:30:33.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><ol><li>栈的特点</li><li>栈的应用</li><li>栈的实现</li><li>栈的应用</li></ol><h1 id="栈的特点"><a class="markdownIt-Anchor" href="#栈的特点"></a> 栈的特点</h1><blockquote><p>先进后出</p></blockquote><h1 id="栈的应用"><a class="markdownIt-Anchor" href="#栈的应用"></a> 栈的应用</h1><p>函数调用栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A函数 调用 B函数 ，B函数 调用 C函数。</span><br><span class="line">A函数先入栈</span><br><span class="line">B函数再压入</span><br><span class="line">C函数在压入</span><br><span class="line"></span><br><span class="line">最后 C函数 弹出</span><br><span class="line">B函数 弹出</span><br><span class="line">A函数 弹出</span><br></pre></td></tr></table></figure><h1 id="栈的实现"><a class="markdownIt-Anchor" href="#栈的实现"></a> 栈的实现</h1><h2 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">push： 压入一个元素</span><br><span class="line">pop：推出一个元素</span><br><span class="line">peek：返回栈顶元素</span><br><span class="line">isEmpty: 是否为空</span><br><span class="line">clear：清空栈元素</span><br><span class="line">size：返回栈里面元素</span><br></pre></td></tr></table></figure><h2 id="实现代码"><a class="markdownIt-Anchor" href="#实现代码"></a> 实现代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> items=[];</span><br><span class="line">    <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">ele</span>)</span>&#123;</span><br><span class="line">        items.push(ele);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.pop();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itmes[items.length<span class="number">-1</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        items = [];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈的应用-2"><a class="markdownIt-Anchor" href="#栈的应用-2"></a> 栈的应用</h1><p>实现十进制转换为二进制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">dec2bin</span>(<span class="params">decNumber</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">var</span> remainder;</span><br><span class="line">    <span class="comment">// 任何数除以2，要么是0，要么是1</span></span><br><span class="line">    <span class="keyword">while</span>(decNumber &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        remainder = decNumber % <span class="number">2</span>;</span><br><span class="line">        decNumber = <span class="built_in">Math</span>.floor(decNumber / <span class="number">2</span>);</span><br><span class="line">        stack.push(remainder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后再进行拼接</span></span><br><span class="line">    <span class="keyword">var</span> binary = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        binary += stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> binary;</span><br><span class="line">&#125;</span><br><span class="line">result = dec2bin(<span class="number">3</span>);</span><br><span class="line">alert(result); <span class="comment">//11</span></span><br></pre></td></tr></table></figure><h1 id="代码地址"><a class="markdownIt-Anchor" href="#代码地址"></a> 代码地址</h1><p><a href="https://github.com/TheFifthMan/data_structure/blob/master/code/stack.html" target="_blank" rel="noopener">https://github.com/TheFifthMan/data_structure/blob/master/code/stack.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;栈的特点&lt;/li&gt;
&lt;li&gt;栈的应用&lt;/li&gt;
&lt;li&gt;栈的实现&lt;/li&gt;
&lt;li&gt;栈的应用&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>越权检测</title>
    <link href="http://yoursite.com/2018/08/13/web_security/%E8%B6%8A%E6%9D%83%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2018/08/13/web_security/越权检测/</id>
    <published>2018-08-13T15:49:49.000Z</published>
    <updated>2018-08-13T15:50:18.447Z</updated>
    
    <content type="html"><![CDATA[<h4 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h4><p>未授权访问漏洞，是在攻击者没有获取到登录权限或未授权的情况下，或者不需要输入密码，即可通过直接输入网站控制台主页面地址，或者不允许查看的链接便可进行访问，同时进行操作。</p><h4 id="检测"><a class="markdownIt-Anchor" href="#检测"></a> 检测</h4><ol><li>已知Web网站具有登录页面。或者具有不允许访问的目录或功能。</li><li>不用登录，可通过链接直接访问用户页面功能</li></ol><p>这里我们可以使用burp的sitemap 对比的功能，以下是操作过程</p><ol><li>首先，使用一个身份跟角色进行业务请求<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/sitemap/1.jpg" alt="image"></li><li>将之保存为state<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/sitemap/2.jpg" alt="image"></li><li>清除所有的请求，退出登录<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/sitemap/3.jpg" alt="image"></li><li>重新使用另外一个身份和角色登录<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/sitemap/4.jpg" alt="image"></li><li>对比两次请求的不同。<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/sitemap/5.jpg" alt="image"></li></ol><p>如果在关键的请求上，两者没有任何不同，那就说明，其实是存在越权或者未授权攻击的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#描述&quot;&gt;&lt;/a&gt; 描述&lt;/h4&gt;
&lt;p&gt;未授权访问漏洞，是在攻击者没有获取到登录权限或未授权的情况下，或者不需要输入密码，即可通过直接输入网站控制台主页面地址，或者不允许查看的链接便可
      
    
    </summary>
    
      <category term="web_security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
  </entry>
  
  <entry>
    <title>暴力破解</title>
    <link href="http://yoursite.com/2018/08/13/web_security/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/08/13/web_security/暴力破解/</id>
    <published>2018-08-13T15:48:21.000Z</published>
    <updated>2018-08-13T15:49:31.104Z</updated>
    
    <content type="html"><![CDATA[<h4 id="漏洞描述"><a class="markdownIt-Anchor" href="#漏洞描述"></a> 漏洞描述</h4><p>暴力破解的基本思想是根据题目的部分条件确定答案的大致范围，并在此范围内对所有可能的情况逐一验证，直到全部情况验证完毕。若某个情况验证符合题目的全部条件，则为本问题的一个解；若全部情况验证后都不符合题目的全部条件，则本题无解。常常存在于网站的登录系统中，通过对已知的管理员用户名，进行对其登录口令的大量尝试。</p><h4 id="检测描述"><a class="markdownIt-Anchor" href="#检测描述"></a> 检测描述</h4><ol><li>已知Web网站具有登录页面。</li><li>登录页面无验证码，无锁定机制。。</li></ol><p>具体攻击可以使用burp的Intruder模块，此模块提供四种攻击方式：</p><ol><li>sniper</li></ol><blockquote><p>狙击手模式,一组poc依次替换，发动攻击对服务器进行暴力破解.<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/bruteforce/sniper1.png" alt="image"></p></blockquote><ol start="2"><li>Battering ram</li></ol><blockquote><p>攻城锤模式，也是指定单一的POC，与sniper不同的是，它可以指定多个位置，使用单一的POC进行攻击。如下所示：<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/bruteforce/battering.jpg" alt="image"></p></blockquote><ol start="3"><li>pitchfork</li></ol><blockquote><p>鱼叉攻击模式，假如有两个位置： 第一组使用的是A和B，第二组使用的就是C和D。如下所示：<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/bruteforce/pitchfork.jpg" alt="image"></p></blockquote><ol start="4"><li>cluster</li></ol><blockquote><p>最后我们看一下炸弹攻击</p></blockquote><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/burpsuite/bruteforce/boom.jpg" alt="image"></p><h4 id="修复方案"><a class="markdownIt-Anchor" href="#修复方案"></a> 修复方案</h4><ol><li>账户锁定</li><li>返回信息</li><li>页面跳转</li><li>延时登录</li><li>封锁IP</li><li>验证码</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;漏洞描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#漏洞描述&quot;&gt;&lt;/a&gt; 漏洞描述&lt;/h4&gt;
&lt;p&gt;暴力破解的基本思想是根据题目的部分条件确定答案的大致范围，并在此范围内对所有可能的情况逐一验证，直到全部情况验证完毕。若某个情况验证
      
    
    </summary>
    
      <category term="web_security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
  </entry>
  
  <entry>
    <title>0x002-exploitdb</title>
    <link href="http://yoursite.com/2018/08/12/metasploit/0x002-exploitdb/"/>
    <id>http://yoursite.com/2018/08/12/metasploit/0x002-exploitdb/</id>
    <published>2018-08-12T09:51:53.000Z</published>
    <updated>2018-08-12T09:54:47.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="exploitdb"><a class="markdownIt-Anchor" href="#exploitdb"></a> exploitdb</h1><p>有着很多公开漏洞的POC，我们可以直接使用metasploit进行利用</p><h1 id="searchsploit"><a class="markdownIt-Anchor" href="#searchsploit"></a> searchsploit</h1><h2 id="用法示例"><a class="markdownIt-Anchor" href="#用法示例"></a> 用法示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">searchsploit 漏洞编号</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">searchsploit ms15-100</span><br></pre></td></tr></table></figure><h2 id="结果示例"><a class="markdownIt-Anchor" href="#结果示例"></a> 结果示例</h2><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/metasploit/searchsploit.jpg" alt="image"></p><h1 id="更新metasploit"><a class="markdownIt-Anchor" href="#更新metasploit"></a> 更新metasploit</h1><h2 id="新建文件夹"><a class="markdownIt-Anchor" href="#新建文件夹"></a> 新建文件夹</h2><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/metasploit/msfmodelsfolder.jpg" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这个文件夹是按照上图所示的文件夹建立的</span><br><span class="line">mkdir -p /root/.msf4/modules/exploits/windows/remote</span><br></pre></td></tr></table></figure><h2 id="复制到msf模块中"><a class="markdownIt-Anchor" href="#复制到msf模块中"></a> 复制到msf模块中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/windows/remote/38195.rb .</span><br></pre></td></tr></table></figure><h2 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">updatedb</span><br></pre></td></tr></table></figure><h2 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h2><p>打开msfconsole就会看到如下效果<br><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/metasploit/models.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;exploitdb&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#exploitdb&quot;&gt;&lt;/a&gt; exploitdb&lt;/h1&gt;
&lt;p&gt;有着很多公开漏洞的POC，我们可以直接使用metasploit进行利用&lt;/p&gt;
&lt;h1 id=&quot;sea
      
    
    </summary>
    
      <category term="metasploit" scheme="http://yoursite.com/categories/metasploit/"/>
    
    
      <category term="metasploit" scheme="http://yoursite.com/tags/metasploit/"/>
    
  </entry>
  
  <entry>
    <title>移动端测试4-安装apk</title>
    <link href="http://yoursite.com/2018/08/11/appium/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%954-%E5%AE%89%E8%A3%85apk/"/>
    <id>http://yoursite.com/2018/08/11/appium/移动端测试4-安装apk/</id>
    <published>2018-08-11T15:29:51.000Z</published>
    <updated>2018-08-14T16:15:02.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>决定放弃安卓自带的虚拟机，一是因为x86支持现在大部分的apk，二是实在太难用。选择<a href="https://www.genymotion.com/download/" target="_blank" rel="noopener">genymotion</a>做为虚拟机运行工具</p><h1 id="adb"><a class="markdownIt-Anchor" href="#adb"></a> adb</h1><p>使用adb 安装软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install xxxx.apk</span><br></pre></td></tr></table></figure><p>然后就遇到了 Failure [INSTALL_FAILED_NO_MATCHING_ABIS] 这样的问题，虽然可以下载相关的插件进行拖进虚拟机里面安装，但是还没找到这个软件的官方地址。。。解决方案也是大家抄来抄去，一个答案2016年抄到了2018都有… 这里就不赘述了。</p><h1 id="概述-2"><a class="markdownIt-Anchor" href="#概述-2"></a> 概述</h1><p>决定放弃安卓自带的虚拟机，一是因为x86支持现在大部分的apk，二是实在太难用。选择<a href="https://www.genymotion.com/download/" target="_blank" rel="noopener">genymotion</a>做为虚拟机运行工具</p><h1 id="adb-2"><a class="markdownIt-Anchor" href="#adb-2"></a> adb</h1><p>使用adb 安装软件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install xxxx.apk</span><br></pre></td></tr></table></figure><p>然后就遇到了 Failure [INSTALL_FAILED_NO_MATCHING_ABIS] 这样的问题，虽然可以下载相关的插件进行拖进虚拟机里面安装，但是还没找到这个软件的官方地址。。。解决方案也是大家抄来抄去，一个答案2016年抄到了2018都有… 这里就不赘述了。</p><p>这里提供一个下载地址：<br>链接：<a href="http://pan.baidu.com/s/1eRRW7GQ" target="_blank" rel="noopener">http://pan.baidu.com/s/1eRRW7GQ</a> 密码：nxdc</p><p><mark>亲测6.0 能用</mark></p><h1 id="最后"><a class="markdownIt-Anchor" href="#最后"></a> 最后</h1><p>成功安装了一个软件</p><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/Android/apk.jpg" alt="image"></p><h1 id="最后-2"><a class="markdownIt-Anchor" href="#最后-2"></a> 最后</h1><p>成功安装了一个软件</p><p><img src="https://raw.githubusercontent.com/TheFifthMan/postimages/master/Android/apk.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;决定放弃安卓自带的虚拟机，一是因为x86支持现在大部分的apk，二是实在太难用。选择&lt;a href=&quot;https://www.genymotio
      
    
    </summary>
    
      <category term="appium" scheme="http://yoursite.com/categories/appium/"/>
    
    
      <category term="appium" scheme="http://yoursite.com/tags/appium/"/>
    
  </entry>
  
  <entry>
    <title>0x007-部署centos</title>
    <link href="http://yoursite.com/2018/08/11/flask/0x007-%E9%83%A8%E7%BD%B2centos/"/>
    <id>http://yoursite.com/2018/08/11/flask/0x007-部署centos/</id>
    <published>2018-08-11T07:20:39.000Z</published>
    <updated>2018-08-11T07:22:19.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统配置"><a class="markdownIt-Anchor" href="#系统配置"></a> 系统配置</h1><h2 id="创建新用户"><a class="markdownIt-Anchor" href="#创建新用户"></a> 创建新用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">adduser -U wluser -s /bin/bash</span><br><span class="line">passwd wluser</span><br><span class="line">passwd:xxxx</span><br><span class="line"></span><br><span class="line">visudo</span><br><span class="line">====</span><br><span class="line">wluser  ALL=(ALL) ALL</span><br><span class="line">=====</span><br><span class="line">su wluser</span><br></pre></td></tr></table></figure><h2 id="导入环境变量"><a class="markdownIt-Anchor" href="#导入环境变量"></a> 导入环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export MAIL_SERVER=smtp.163.com</span><br><span class="line">export MAIL_PORT=25</span><br><span class="line">export MAIL_USERNAME=</span><br><span class="line">export MAIL_PASSWORD=</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="安装python3"><a class="markdownIt-Anchor" href="#安装python3"></a> 安装python3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ sudo mkdir /usr/local/python3 # 创建安装目录</span><br><span class="line"></span><br><span class="line"># 下载 Python 源文件</span><br><span class="line">$ wget --no-check-certificate https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz</span><br><span class="line"># 注意：wget获取https的时候要加上：--no-check-certificate</span><br><span class="line"></span><br><span class="line">$ tar -xzvf Python-3.6.0.tgz # 解压缩包</span><br><span class="line"></span><br><span class="line">$ cd Python-3.6.0 # 进入解压目录</span><br><span class="line"></span><br><span class="line">$ sudo ./configure --prefix=/usr/local/python3 # 指定创建的目录</span><br><span class="line"></span><br><span class="line">$ sudo make</span><br><span class="line"></span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line">$ sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br><span class="line"></span><br><span class="line">$ cd /usr/bin</span><br><span class="line"></span><br><span class="line">$ sudo mv python python.bak</span><br><span class="line"></span><br><span class="line">$ sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python</span><br><span class="line"></span><br><span class="line">$ sudo vim /usr/bin/yum</span><br><span class="line">改为：</span><br><span class="line">#!/usr/bin/python2</span><br><span class="line"></span><br><span class="line">$ sudo vim /usr/libexec/urlgrabber-ext-down</span><br><span class="line">改为：</span><br><span class="line">#!/usr/bin/python2</span><br><span class="line"></span><br><span class="line"># 首先安装 epel 扩展源</span><br><span class="line">$ sudo yum -y install epel-release</span><br><span class="line"></span><br><span class="line"># 安装 python-pip</span><br><span class="line">$ sudo yum -y install python-pip</span><br><span class="line"></span><br><span class="line"># 清除 cache</span><br><span class="line">$ sudo yum clean all</span><br></pre></td></tr></table></figure><h1 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> mysql</h1><h2 id="下载安装mysql"><a class="markdownIt-Anchor" href="#下载安装mysql"></a> 下载安装mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 5.6 版本</span><br><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-7.noarch.rpm</span><br><span class="line"></span><br><span class="line"># rpm安装源</span><br><span class="line">rpm -ivh mysql-community-release-el7-7.noarch.rpm</span><br><span class="line"># yum安装</span><br><span class="line">yum install -y mysql-server</span><br><span class="line"># 设置默认目录权限</span><br><span class="line">chown -R wluser:wluser /var/lib/mysql</span><br><span class="line"># 重启mysql</span><br><span class="line">service mysqld restart</span><br><span class="line"></span><br><span class="line"># 创建数据库</span><br><span class="line">create database `databasename` default character set utf8 collate utf8_general_ci;</span><br><span class="line"></span><br><span class="line"># 更改root密码</span><br><span class="line">update user set password=password(&apos;qwer1234&apos;) where user=&apos;root&apos;;</span><br><span class="line"></span><br><span class="line"># 远程登录用户</span><br><span class="line">grant all privileges on *(db name).* to &apos;username&apos;@&apos;%&apos; identified by &apos;qwe123&apos; with grant option</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 创建本地登录用户</span><br><span class="line">use awesome;</span><br><span class="line">grant all privileges on megablog.* to &apos;john&apos;@&apos;localhost&apos; identified by &apos;qwe123&apos;;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"># 重启mysql</span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><h1 id="openresty"><a class="markdownIt-Anchor" href="#openresty"></a> openresty</h1><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. 安装完以后，如果不是root安装，很容易访问首页会出现403 forbin的现象。 </span><br><span class="line"></span><br><span class="line">2. 安装依赖</span><br><span class="line">sudo yum install pcre-devel openssl-devel gcc curl</span><br><span class="line"></span><br><span class="line">3. 下载openresty</span><br><span class="line"></span><br><span class="line">4. 解压</span><br><span class="line">tar -zxvf openresty.tar.gz</span><br><span class="line"></span><br><span class="line">5. 安装</span><br><span class="line">./configure --with-luajit \</span><br><span class="line">            --without-http_redis2_module \</span><br><span class="line">            --with-http_iconv_module \</span><br><span class="line">            --with-http_postgres_module</span><br><span class="line">gmake</span><br><span class="line">gmake install</span><br></pre></td></tr></table></figure><h2 id="nginxconf"><a class="markdownIt-Anchor" href="#nginxconf"></a> nginx.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #lua_shared_dict limit 50m;</span><br><span class="line">    #lua_package_path &quot;/opt/openresty/nginx/conf/waf/?.lua&quot;;</span><br><span class="line">    #init_by_lua_file &quot;/opt/openresty/nginx/conf/waf/init.lua&quot;;</span><br><span class="line">    #access_by_lua_file &quot;/opt/openresty/nginx/conf/waf/access.lua&quot;;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">    ...</span><br><span class="line">    # 省略的配置全部注释掉</span><br><span class="line">    include &quot;/home/wluser/opt/nginx/conf/www.microblog.com.conf&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网站配置"><a class="markdownIt-Anchor" href="#网站配置"></a> 网站配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">upstream microblog &#123;</span><br><span class="line">   server 127.0.0.1:8000;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name www.microblog.com;</span><br><span class="line">   location / &#123;</span><br><span class="line">    proxy_pass http://microblog;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gunicorn"><a class="markdownIt-Anchor" href="#gunicorn"></a> gunicorn</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 启动四个线程</span><br><span class="line">gunicorn -b 127.0.0.1:8000 -w 4 run:app -D</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>本来还想再上个waf的，但是出现问题，对于lua+nginx还不是太熟，就先放下了。后面继续完善</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#系统配置&quot;&gt;&lt;/a&gt; 系统配置&lt;/h1&gt;
&lt;h2 id=&quot;创建新用户&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#创建新用户&quot;&gt;&lt;/a&gt; 创建新用户&lt;
      
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>python模块-configparse</title>
    <link href="http://yoursite.com/2018/08/10/python/python%E6%A8%A1%E5%9D%97-configparse/"/>
    <id>http://yoursite.com/2018/08/10/python/python模块-configparse/</id>
    <published>2018-08-10T13:37:49.000Z</published>
    <updated>2018-08-10T13:38:39.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>学习一下configparse的用法。其实很简单，就是记录一下代码。方便查找</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><h2 id="configini"><a class="markdownIt-Anchor" href="#configini"></a> config.ini</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[head]</span><br><span class="line">title=&apos;Hello World&apos;</span><br><span class="line"></span><br><span class="line">[body]</span><br><span class="line">div=&quot;this is world&quot;</span><br><span class="line">h1 = &quot;this is h1&quot;</span><br></pre></td></tr></table></figure><h2 id="configpy"><a class="markdownIt-Anchor" href="#configpy"></a> <a href="http://config.py" target="_blank" rel="noopener">config.py</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python </span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config = configparser.ConfigParser()</span><br><span class="line">config.read(&apos;config.ini&apos;)</span><br><span class="line"></span><br><span class="line">sections = config.sections()</span><br><span class="line">print(sections)  # [head, body]</span><br><span class="line"></span><br><span class="line">head = config[&apos;head&apos;]</span><br><span class="line">print(head) #  &lt;Section: head&gt;</span><br><span class="line"> </span><br><span class="line">title = head[&apos;title&apos;]</span><br><span class="line">print(title) # &apos;Hello World&apos;</span><br><span class="line"></span><br><span class="line">body = config[&apos;body&apos;]</span><br><span class="line">print(body)  # &lt;Section: body&gt;  </span><br><span class="line"></span><br><span class="line">for k,v in body.items():</span><br><span class="line">    print(k,v)</span><br><span class="line">    </span><br><span class="line"># div &quot;this is world&quot;</span><br><span class="line"># h1 &quot;this is h1&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;学习一下configparse的用法。其实很简单，就是记录一下代码。方便查找&lt;/p&gt;
&lt;h1 id=&quot;代码&quot;&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
      <category term="python模块" scheme="http://yoursite.com/categories/python%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>移动端测试3-第一个脚本</title>
    <link href="http://yoursite.com/2018/08/10/appium/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%953-%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/08/10/appium/移动端测试3-第一个脚本/</id>
    <published>2018-08-10T13:30:36.000Z</published>
    <updated>2018-08-12T10:09:13.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动安卓虚拟机"><a class="markdownIt-Anchor" href="#启动安卓虚拟机"></a> 启动安卓虚拟机</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator -avd avd_name</span><br></pre></td></tr></table></figure><h1 id="ui-automate-viewer"><a class="markdownIt-Anchor" href="#ui-automate-viewer"></a> UI automate viewer</h1><h2 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 在SDK的目录下面，直接运行脚本即可打开，</span><br><span class="line">2. 然后点击 device screenshot 按钮</span><br><span class="line">3. 需要注意的是appium要关掉不能打开，否则会出现错误</span><br><span class="line">4. 点击选取元素</span><br></pre></td></tr></table></figure><h1 id="appium"><a class="markdownIt-Anchor" href="#appium"></a> appium</h1><h2 id="命令行开启"><a class="markdownIt-Anchor" href="#命令行开启"></a> 命令行开启</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 直接输入，也就启动了</span><br><span class="line"># 看来一下，appium貌似会启动adb，去寻找连接的安卓设备。还是挺好用的。</span><br><span class="line"></span><br><span class="line">appium</span><br></pre></td></tr></table></figure><h2 id="桌面版启动"><a class="markdownIt-Anchor" href="#桌面版启动"></a> 桌面版启动</h2><p>直接双击启动</p><h1 id="第一个脚本"><a class="markdownIt-Anchor" href="#第一个脚本"></a> 第一个脚本</h1><p>我们基于python写第一个自动化测试脚本</p><h2 id="安装依赖"><a class="markdownIt-Anchor" href="#安装依赖"></a> 安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install appium-python-client</span><br></pre></td></tr></table></figure><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#!/usr/bin/env python</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"></span><br><span class="line"># author: johnw</span><br><span class="line"></span><br><span class="line">from appium import webdriver</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">desired_caps = &#123;&#125;</span><br><span class="line">desired_caps[&apos;platformName&apos;] = &apos;Android&apos;  </span><br><span class="line">desired_caps[&apos;platformVersion&apos;] = &apos;6.0&apos;  </span><br><span class="line">desired_caps[&apos;deviceName&apos;] = &apos;Android Emulator&apos;  </span><br><span class="line">desired_caps[&apos;appPackage&apos;] = &apos;com.android.calculator2&apos;  </span><br><span class="line">desired_caps[&apos;appActivity&apos;] = &apos;.Calculator&apos;</span><br><span class="line">driver = webdriver.Remote(&apos;http://localhost:4723/wd/hub&apos;, desired_caps)</span><br><span class="line">driver.find_element_by_id(&quot;com.android.calculator2:id/digit_8&quot;).click()</span><br><span class="line">driver.find_element_by_id(&quot;com.android.calculator2:id/op_mul&quot;).click()</span><br><span class="line">driver.find_element_by_id(&quot;com.android.calculator2:id/digit_9&quot;).click()</span><br><span class="line">driver.find_element_by_id(&quot;com.android.calculator2:id/eq&quot;).click()</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>appium不需要做任何的设置，直接打开，在代码里面写好相关参数，直接运行，appium就能够连接到安卓虚拟机，进行执行。</p><h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1><p>还有以下问题需要在以后实践：</p><ol><li>如何连接真机</li><li>如果启动多台虚拟机多线程做自动化</li><li>如何启动多台真机做自动化</li><li>如何混合做自动化</li><li>如何持续集成</li><li>如何安装测试软件，安装过程如何测试</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;启动安卓虚拟机&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#启动安卓虚拟机&quot;&gt;&lt;/a&gt; 启动安卓虚拟机&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="appium" scheme="http://yoursite.com/categories/appium/"/>
    
    
      <category term="appium" scheme="http://yoursite.com/tags/appium/"/>
    
  </entry>
  
  <entry>
    <title>移动端测试2-测试环境搭建</title>
    <link href="http://yoursite.com/2018/08/09/appium/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%952-%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/08/09/appium/移动端测试2-测试环境搭建/</id>
    <published>2018-08-09T12:46:53.000Z</published>
    <updated>2018-08-12T10:09:10.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>最近接触移动端测试，csdn大神写的真的是糊里糊涂，还号称从零入门，估计自己都没搞清楚。。。<br>也因为这样走了不少弯路，在这里记录一下。<br>实际上，要启动安卓虚拟机根本不需要狗屁的studio。直接下载命令行的sdk tool即可，下载studio下了一天。。。。<br>挂上梯子下载很多东西就很快。</p><h2 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装nodejs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 上官网下载安装</span><br><span class="line">2. 升级已有的nodejs</span><br><span class="line">sudo npm install n -g</span><br><span class="line">// 升级到最新版本</span><br><span class="line">sudo n latest</span><br><span class="line">//升级到稳定版本</span><br><span class="line">sudo n stable</span><br><span class="line">3. 升级npm</span><br><span class="line">sudo npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="命令安装appium"><a class="markdownIt-Anchor" href="#命令安装appium"></a> 命令安装appium</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g cnpm</span><br><span class="line">cnpm install -g appium</span><br><span class="line">cnmp install -g appium-doctor</span><br></pre></td></tr></table></figure><h2 id="软件安装appium"><a class="markdownIt-Anchor" href="#软件安装appium"></a> 软件安装appium</h2><p>直接上官网下载安装</p><h2 id="检查appium"><a class="markdownIt-Anchor" href="#检查appium"></a> 检查appium</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appium-doctor</span><br></pre></td></tr></table></figure><h2 id="检查配置"><a class="markdownIt-Anchor" href="#检查配置"></a> 检查配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 有时候你的shell设置为zsh的话，那么设置在.bash_profile 就会失效。这个时候就要设置在.zshrc里面，</span><br><span class="line"></span><br><span class="line"># JAVA</span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar</span><br><span class="line"></span><br><span class="line"># android</span><br><span class="line">export ANDROID_HOME=/Users/wenzhongwei/Library/Android/sdk</span><br><span class="line">export ANDRIOD_SDK_HOME=/Users/wenzhongwei/Library/Android/sdk</span><br><span class="line">export ANDROID_AVD_HOME=/Users/wenzhongwei/.android/avd</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$ANDRIOD_SDK_HOME/tools:$ANDRIOD_SDK_HOME/platform-tools$ANDRIOD_HOME/emulator:$PATH</span><br><span class="line"></span><br><span class="line">alias emulator=$&#123;ANDROID_HOME&#125;/emulator/emulator</span><br><span class="line"></span><br><span class="line"># 另外安装，用于测试ios</span><br><span class="line">brew install carthage</span><br></pre></td></tr></table></figure><h2 id="启动安卓虚拟机"><a class="markdownIt-Anchor" href="#启动安卓虚拟机"></a> 启动安卓虚拟机</h2><h4 id="下载sdk-tools"><a class="markdownIt-Anchor" href="#下载sdk-tools"></a> 下载sdk tools</h4><p>不需要下载android studio。只需要命令行的sdk tools即可<br>点击<a href="https://developer.android.com/studio/#downloads" target="_blank" rel="noopener">下载</a></p><h4 id="命令行启动"><a class="markdownIt-Anchor" href="#命令行启动"></a> 命令行启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cd /Users/wenzhongwei/Library/Android/sdk</span><br><span class="line">cd tools/bin</span><br><span class="line"></span><br><span class="line"># 查看平台</span><br><span class="line">./sdkmanager --list</span><br><span class="line"></span><br><span class="line"># 安装平台</span><br><span class="line">./sdkmanager &quot;platform;andriod-27&quot;</span><br><span class="line"></span><br><span class="line"># 创建虚拟机</span><br><span class="line">./avdmanager create avd --name myavd1 -k &quot;platform;andriod-27&quot;</span><br><span class="line"></span><br><span class="line">注意： 这里要指定ANDROID_AVD_HOME否则会出错。</span><br><span class="line"></span><br><span class="line"># 查看有哪一些虚拟机</span><br><span class="line">./avdmanager list avd</span><br><span class="line"></span><br><span class="line"># 注： 这里在windows上面要安装haxm，最新版安装失败，选择7.0 版本即可，在github上搜索Intel的版本进行下载</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line">emulator -avd myavd</span><br></pre></td></tr></table></figure><h2 id="启动ios虚拟机"><a class="markdownIt-Anchor" href="#启动ios虚拟机"></a> 启动ios虚拟机</h2><p>使用simulator开启虚拟机</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h2&gt;
&lt;p&gt;最近接触移动端测试，csdn大神写的真的是糊里糊涂，还号称从零入门，估计自己都没搞清楚。。。&lt;br&gt;
也因为这样走了不少弯路，在这里记录一下。&lt;
      
    
    </summary>
    
      <category term="appium" scheme="http://yoursite.com/categories/appium/"/>
    
    
      <category term="appium" scheme="http://yoursite.com/tags/appium/"/>
    
  </entry>
  
  <entry>
    <title>0x006-使用email</title>
    <link href="http://yoursite.com/2018/08/08/flask/0x006-%E4%BD%BF%E7%94%A8email/"/>
    <id>http://yoursite.com/2018/08/08/flask/0x006-使用email/</id>
    <published>2018-08-08T14:15:14.000Z</published>
    <updated>2018-08-08T14:16:00.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发送邮件重置密码"><a class="markdownIt-Anchor" href="#发送邮件重置密码"></a> 发送邮件重置密码</h1><h2 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h2><ol><li>重置密码需要用户输入邮箱，因此需要开发一个输入邮箱的页面</li><li>开发重置密码功能</li></ol><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-mail</span><br><span class="line">pip install pyjwt</span><br></pre></td></tr></table></figure><h2 id="开发输入邮箱用于重置密码的页面"><a class="markdownIt-Anchor" href="#开发输入邮箱用于重置密码的页面"></a> 开发输入邮箱用于重置密码的页面</h2><h3 id="表单对象"><a class="markdownIt-Anchor" href="#表单对象"></a> 表单对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class ResetPasswdByEmailForm(FlaskForm):</span><br><span class="line">    email = StringField(&quot;请输入你的邮箱：&quot;,validators=[DataRequired()])</span><br><span class="line">    submit = Submit(&quot;提交&quot;)</span><br></pre></td></tr></table></figure><h3 id="模板页面"><a class="markdownIt-Anchor" href="#模板页面"></a> 模板页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;_layout.html&quot; %&#125;</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;form method=&quot;POST&quot;&gt;</span><br><span class="line">        &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123; form.email.label &#125;&#125;</span><br><span class="line">            &#123;&#123; form.email() &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &#123;&#123; form.submit() &#125;&#125;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="业务逻辑"><a class="markdownIt-Anchor" href="#业务逻辑"></a> 业务逻辑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 重置密码所需要填入email的页面</span><br><span class="line">@app.route(&apos;/reset/password&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class="line">def reset_passwd_by_email():</span><br><span class="line">    if current_user.is_authenticated:</span><br><span class="line">        flash(&quot;已经登录啦&quot;)</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line">    form = RestPasswdByEmailForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        user = User.query.filter_by(email=form.email.data).first()</span><br><span class="line">        if user:</span><br><span class="line">            send_password_reset_email(user)</span><br><span class="line">        flash(&quot;已经发送邮件，如果没有收到邮件，请检查邮箱地址是否正确。&quot;)</span><br><span class="line">        return redirect(url_for(&apos;login&apos;))</span><br><span class="line">    return render_template(&apos;reset_passwd_by_email.html&apos;,form=form)</span><br></pre></td></tr></table></figure><h2 id="开发重置密码功能"><a class="markdownIt-Anchor" href="#开发重置密码功能"></a> 开发重置密码功能</h2><h3 id="准备发送给用户邮件"><a class="markdownIt-Anchor" href="#准备发送给用户邮件"></a> 准备发送给用户邮件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># templates/email/reset_passwd.txt | reset_passwd.html</span><br><span class="line">&lt;p&gt;Dear &#123;&#123; user.username &#125;&#125;,&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    To reset your password</span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(&apos;reset_password&apos;, token=token, _external=True) &#125;&#125;&quot;&gt;</span><br><span class="line">        click here</span><br><span class="line">    &lt;/a&gt;.</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Alternatively, you can paste the following link in your browser&apos;s address bar:&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; url_for(&apos;reset_password&apos;, token=token, _external=True) &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;If you have not requested a password reset simply ignore this message.&lt;/p&gt;</span><br><span class="line">&lt;a href=&quot;javascript:alert(0)&quot;&gt;Click me to show xss&lt;/a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    alert(1);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;p&gt;Sincerely,&lt;/p&gt;</span><br><span class="line">&lt;p&gt;The Microblog Team&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="发送邮件的功能"><a class="markdownIt-Anchor" href="#发送邮件的功能"></a> 发送邮件的功能</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 首先配置服务器地址，在config.py里面配置</span><br><span class="line">MAIL_SERVER = os.environ.get(<span class="string">"MAIL_SERVER"</span>)</span><br><span class="line">MAIL_PORT = os.environ.get(<span class="string">"MAIL_PORT"</span>) <span class="keyword">or</span> <span class="number">25</span></span><br><span class="line">MAIL_USE_TLS = os.environ.get(<span class="string">"MAIL_USE_TLS"</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br><span class="line">MAIL_USERNAME = os.environ.get(<span class="string">"MAIL_USERNAME"</span>)</span><br><span class="line">MAIL_PASSWORD = os.environ.get(<span class="string">"MAIL_PASSWORD"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 开发发送邮件的函数, email.py</span><br><span class="line"><span class="comment"># 在flask中，有两个状态，一个是请求上下文，一个应用程序上下文</span></span><br><span class="line"><span class="comment"># 很多时候，这两种状态，flask会自动去调配</span></span><br><span class="line"><span class="comment"># 但是如果是自己起的线程，就需要自己去适配。</span></span><br><span class="line"><span class="comment"># 具体还需要学习。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_async_email</span><span class="params">(app,msg)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        mail.send(msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span><span class="params">(subject,sender,recipients,text_body,html_body)</span>:</span></span><br><span class="line">    msg = Message(subject,sender=sender,recipients=recipients)</span><br><span class="line">    msg.body = text_body</span><br><span class="line">    msg.html = html_body</span><br><span class="line">    Thread(target=send_async_email, args=(app,msg)).start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_password_reset_email</span><span class="params">(user)</span>:</span></span><br><span class="line">    token = user.generate_token()</span><br><span class="line">    send_email(<span class="string">"【重置你的密码】"</span>,sender=app.config[<span class="string">'MAIL_USERNAME'</span>],recipients=[user.email],</span><br><span class="line">            text_body=render_template(<span class="string">'email/reset_password.txt'</span>,user=user,token=token),</span><br><span class="line">            html_body = render_template(<span class="string">'email/reset_password.html'</span>,user=user,token=token))</span><br></pre></td></tr></table></figure><h3 id="token的功能"><a class="markdownIt-Anchor" href="#token的功能"></a> token的功能</h3><blockquote><p>token用于我们判断这个用户是否是本人，也就是从这个邮箱里面链接，这个我们在这个用户的类里面直接生成。</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(UserMixix,db.Model)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_token</span><span class="params">(self,expires_in=<span class="number">600</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> jwt.encode(</span><br><span class="line">            &#123;<span class="string">"reset_passwd"</span>:self.id,<span class="string">"exp"</span>:time()+ expires_in&#125;,</span><br><span class="line">            app.config[<span class="string">'SECRET_KEY'</span>],algorithm=<span class="string">'HS256'</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_token</span><span class="params">(token)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            id = jwt.decode(</span><br><span class="line">                token,app.config[<span class="string">'SECRET_KEY'</span>],algorithms=[<span class="string">'HS256'</span>])[<span class="string">'reset_passwd'</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            app.logger.error(<span class="string">"查无此人，此token为&#123;&#125;"</span>.format(token))</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">return</span> User.query.get(id)</span><br></pre></td></tr></table></figure><h3 id="修改密码的实际页面"><a class="markdownIt-Anchor" href="#修改密码的实际页面"></a> 修改密码的实际页面</h3><ol><li>首先判断这个user是不是登录了</li><li>验证一下传过来的token，查询用户，如果是失效的，或者不符合的，直接返回</li><li>开始接受表单数据，写入数据库</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置密码的真实页面</span></span><br><span class="line"><span class="meta">@app.route('/reset/password/&lt;token&gt;',methods=['GET','POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset_password</span><span class="params">(token)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        flash(<span class="string">"已经登录啦。"</span>)</span><br><span class="line">        <span class="keyword">return</span> rediretc(url_for(<span class="string">'index'</span>))</span><br><span class="line"></span><br><span class="line">    user = User.validate_token(token)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">        flash(<span class="string">"验证失败，返回首页"</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line">    </span><br><span class="line">    form = ResetPasswdForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        passwd = form.password.data</span><br><span class="line">        user.set_password(passwd)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            db.session.commit()</span><br><span class="line">            flash(<span class="string">"成功修改密码！！"</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            app.logger.error(e)</span><br><span class="line">            db.session.rollback()</span><br><span class="line">            flash(<span class="string">"修改密码失败！"</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'reset_passwd'</span>))</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'reset_passwd.html'</span>,form=form)</span><br></pre></td></tr></table></figure><h3 id="模板页面-2"><a class="markdownIt-Anchor" href="#模板页面-2"></a> 模板页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;_layout.html&quot; %&#125;</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;form method=&quot;POST&quot;&gt;</span><br><span class="line">        &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123; form.password.label &#125;&#125;</span><br><span class="line">            &#123;&#123; form.password() &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123; form.password2.label &#125;&#125;</span><br><span class="line">            &#123;&#123; form.password2() &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &#123;&#123; form.submit() &#125;&#125;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;发送邮件重置密码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#发送邮件重置密码&quot;&gt;&lt;/a&gt; 发送邮件重置密码&lt;/h1&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#需求&quot;&gt;&lt;/a&gt; 
      
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>0x005-错误处理</title>
    <link href="http://yoursite.com/2018/08/08/flask/0x005-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/08/08/flask/0x005-错误处理/</id>
    <published>2018-08-08T14:14:37.000Z</published>
    <updated>2018-08-08T14:14:55.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h1><ol><li>页面错误的处理，比如404页面，500页面</li><li>发送email，通知当前发生的错误</li><li>将发生的错误记录到本地log</li></ol><h1 id="页面错误的处理"><a class="markdownIt-Anchor" href="#页面错误的处理"></a> 页面错误的处理</h1><p>页面错误的处理其实有两种，一种是基于全局的，一种是基于蓝图。我们这个项目没有用到蓝图</p><ol><li>全局的就使用errorhandler(404)</li><li>蓝图就要使用app_errorhandler(404)</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'404.html'</span>),<span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(500)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Internal_error</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'500.html'</span>),<span class="number">500</span></span><br></pre></td></tr></table></figure><h1 id="记录log"><a class="markdownIt-Anchor" href="#记录log"></a> 记录log</h1><p>flask 内部维护了一个logger记录器，可以直接使用app.logger来使用，我们在定义RotatingFileHandler这个类来进行日志格式的定义。这样就完成了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># microapp/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> app.debug:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'logs'</span>):</span><br><span class="line">        os.mkdir(<span class="string">'logs'</span>)</span><br><span class="line">    </span><br><span class="line">    file_handler = RotatingFileHandler(<span class="string">'logs/microblog.log'</span>,maxBytes=<span class="number">10240</span>,backupCount=<span class="number">10</span>)</span><br><span class="line">    file_handler.setFormatter(logging.Formatter(</span><br><span class="line">        <span class="string">'%(asctime)s %(levelname)s:%(message)s [in %(pathname)s:%(lineno)d]'</span></span><br><span class="line">    ))</span><br><span class="line">    app.logger.addHandler(file_handler)</span><br><span class="line">    app.logger.setLevel(logging.INFO)</span><br><span class="line">    app.logger.info(<span class="string">"app startup"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#需求&quot;&gt;&lt;/a&gt; 需求&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;页面错误的处理，比如404页面，500页面&lt;/li&gt;
&lt;li&gt;发送email，通知当前发生的错误&lt;/li&gt;
&lt;li&gt;将发生的错误记录
      
    
    </summary>
    
      <category term="flask" scheme="http://yoursite.com/categories/flask/"/>
    
    
      <category term="flask" scheme="http://yoursite.com/tags/flask/"/>
    
  </entry>
  
</feed>
