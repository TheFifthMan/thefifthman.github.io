<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-30T15:54:16.013Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见的逻辑漏洞</title>
    <link href="http://yoursite.com/2018/06/30/%E5%B8%B8%E8%A7%81%E7%9A%84%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2018/06/30/常见的逻辑漏洞/</id>
    <published>2018-06-30T15:52:44.000Z</published>
    <updated>2018-06-30T15:54:16.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逻辑安全存在的前提"><a class="markdownIt-Anchor" href="#逻辑安全存在的前提"></a> 逻辑安全存在的前提</h1><blockquote><p>有效的区分每个用户，并且针对每个用户提供独立的服务内容，允许用户与服务器进行大量的交互<br>。web应用的攻击就是<mark>攻击者从零交互零权限到最后取得最高权限</mark>。以下分别总结几点逻辑安全的漏洞</p></blockquote><h1 id="用户管理功能漏洞"><a class="markdownIt-Anchor" href="#用户管理功能漏洞"></a> 用户管理功能漏洞</h1><h2 id="cookie-and-session"><a class="markdownIt-Anchor" href="#cookie-and-session"></a> Cookie and Session</h2><p>最大的漏洞就是避免cookie伪造，例如在cookies中存在一个字段为 admin: false，这个时候，如果黑客将其改为 true，那么就可以实现cookies的一个伪造，从而进行攻击。</p><h1 id="用户授权管理和安全分析"><a class="markdownIt-Anchor" href="#用户授权管理和安全分析"></a> 用户授权管理和安全分析</h1><p>授权管理分为以下几个部分</p><ol><li>注册</li><li>密码找回</li><li>登录</li><li>密码修改、绑定信息修改</li><li>管理权限</li></ol><p>下面总结一下，大概有哪些危险</p><h2 id="注册"><a class="markdownIt-Anchor" href="#注册"></a> 注册</h2><h4 id="面临的危险和解决方案"><a class="markdownIt-Anchor" href="#面临的危险和解决方案"></a> 面临的危险和解决方案</h4><ol><li>恶意重复注册</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#解决方案</span><br><span class="line">限制IP注册频率</span><br><span class="line">表单加上验证码</span><br><span class="line">姓名和身份证验证</span><br><span class="line">二次验证，例如绑定手机号码或者邮箱</span><br></pre></td></tr></table></figure><ol start="2"><li>注册用户与已经存在的用户重名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#解决方案</span><br><span class="line">首先数据库字段，要加上验证，不允许重复</span><br><span class="line">对用户输入要做校验。</span><br></pre></td></tr></table></figure><ol start="3"><li>没有对用户输入进行校验，造成xss，sql注入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#解决方案</span><br><span class="line">对用户输入要做校验.</span><br><span class="line">过滤特殊字符</span><br><span class="line">不使用sql拼接</span><br></pre></td></tr></table></figure><ol start="4"><li>mysql中，可能存在空格覆盖。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#解决方案</span><br><span class="line">对用户输入要做校验,去除空格。</span><br></pre></td></tr></table></figure><h2 id="密码找回"><a class="markdownIt-Anchor" href="#密码找回"></a> 密码找回</h2><p>面临的危险和解决方案</p><ol><li>服务器没有校验修改密码的token，或者token是可猜测破解的，这回造成任意密码修改【!】。这个是存在最多的漏洞，很常见。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加强token的安全性</span><br></pre></td></tr></table></figure><ol start="2"><li>session覆盖攻击,少见，即一个用户的session，会覆盖掉另一个用户的session，导致打开的时候，修改的其实是另一个用户的密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">很少见，估计实现都有困难。</span><br></pre></td></tr></table></figure><h2 id="登录"><a class="markdownIt-Anchor" href="#登录"></a> 登录</h2><p>面临的危险和解决方案</p><ol><li>暴力破解用户密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用验证码形式，用户三次输入错误，需要输入验证码，多次输入错误需要绑定的手机或者邮箱进行解锁</span><br></pre></td></tr></table></figure><ol start="2"><li>明文传输导致中间人攻击</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTPS</span><br><span class="line">HSTS</span><br></pre></td></tr></table></figure><ol start="3"><li>万能密码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">做好防止sql注入的漏洞</span><br></pre></td></tr></table></figure><ol start="4"><li>用户密码存储</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户密码应该使用hash+随机盐的形式进行存储。</span><br></pre></td></tr></table></figure><ol start="5"><li>登录提示</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不应该使用过于明显的登录提示</span><br></pre></td></tr></table></figure><h2 id="密码修改个人信息修改"><a class="markdownIt-Anchor" href="#密码修改个人信息修改"></a> 密码修改/个人信息修改</h2><ol><li>CSRF攻击</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加CSRF token和 refer 进行防御</span><br></pre></td></tr></table></figure><ol start="2"><li>确认用户本人操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要进行二次验证，确认是本人操作</span><br></pre></td></tr></table></figure><h2 id="管理权限漏洞"><a class="markdownIt-Anchor" href="#管理权限漏洞"></a> 管理权限漏洞</h2><ol><li>开发过程中没有对当前用户的一致性做校验工作。例如在flask中，个人中心需要登录才能看，但是如果你忘记了对当前用户的身份做一个校验，那么就会变成，只要随便登录一个用户，那么他就可以随便的修改或者查看他人的个人中心。</li></ol><p>代码实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/profile/&lt;username&gt;&apos;)</span><br><span class="line">@login_required</span><br><span class="line">def profile(username):</span><br><span class="line">    user = User.query.filter_by(username=username).first()</span><br><span class="line">    # 应该这么校验</span><br><span class="line">    if current_user == user:</span><br><span class="line">        ...</span><br><span class="line">    else:</span><br><span class="line">        flash(&quot;You have no permission to access this page.&quot;)</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br></pre></td></tr></table></figure><ol start="2"><li>权限管理没做好，导致低权限用户可以访问高权限用户的页面。同上，做好权限校验</li></ol><h1 id="用户身份识别和安全防护"><a class="markdownIt-Anchor" href="#用户身份识别和安全防护"></a> 用户身份识别和安全防护</h1><p>这章主要讲的是验证码和二次验证码的安全，基本上可以概括为：</p><ol><li>无论哪种验证码，都应该要有一个过期时间。</li><li>为了保证安全，都不该可以被猜测</li></ol><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>下一步打算认认真真研究一下kali这个系统了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;逻辑安全存在的前提&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#逻辑安全存在的前提&quot;&gt;&lt;/a&gt; 逻辑安全存在的前提&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;有效的区分每个用户，并且针对每个用户提供独立的服务内容，允许用户与服务器进行
      
    
    </summary>
    
      <category term="web_security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="xss" scheme="http://yoursite.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Flask10-分页</title>
    <link href="http://yoursite.com/2018/06/29/Flask10-%E5%88%86%E9%A1%B5/"/>
    <id>http://yoursite.com/2018/06/29/Flask10-分页/</id>
    <published>2018-06-29T14:59:07.000Z</published>
    <updated>2018-06-29T14:59:30.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>首先分页使用的数据库里面的Pagination对象，下面我们将对用法做一些剖析</p></blockquote><h1 id="分页对象"><a class="markdownIt-Anchor" href="#分页对象"></a> 分页对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">page = request.args.get(&apos;page&apos;,1,type=int)</span><br><span class="line"></span><br><span class="line">posts = current_user.followed_posts().paginate(page, app.config[&apos;POSTS_PER_PAGE&apos;],False)</span><br><span class="line"></span><br><span class="line"># 参数解释：</span><br><span class="line">page: 通过url所带的参数得来的，用来说明当前请求的是哪一页</span><br><span class="line"></span><br><span class="line">app.config[&apos;POSTS_PER_PAGE&apos;]: 顾名思义，每页显示多少内容</span><br><span class="line"></span><br><span class="line">False：error flag， 如果为True，那么请求的页面没有了，就会返回404. 如果为False，那么就会返回一个空的list</span><br><span class="line"></span><br><span class="line"># 返回值</span><br><span class="line">返回的是一个paginate对象.有一个item属性，用来返回一个包含每次请求内容的list</span><br><span class="line">比如请求的是第一页，那么就返回第一个list</span><br><span class="line"></span><br><span class="line"># 考虑三个情况</span><br><span class="line">https://localhost:5000/index </span><br><span class="line">https://localhost:5000/index?page=1</span><br><span class="line">https://localhost:5000/index?page=3</span><br><span class="line"></span><br><span class="line">### 如果取不到page这个参数的值，那么就默认为 1</span><br><span class="line">page = request.args.get(&apos;page&apos;,1,type=int)</span><br></pre></td></tr></table></figure><h1 id="下一页-上一页"><a class="markdownIt-Anchor" href="#下一页-上一页"></a> 下一页、上一页</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># paginate对象有以下几个属性</span><br><span class="line">has_next： 是否有下一个列表</span><br><span class="line">has_pre： 是否有上一个列表</span><br><span class="line">next_num： 下一个的编号</span><br><span class="line">prev_num： 上一个的编号</span><br><span class="line"></span><br><span class="line"># 利用上面几个有用的属性，就可以构造出下一页，上一页的链接</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">如果，url_for(index,page=xxx)后面跟一个参数，但是在原来的index函数里面，没有参数，那么url就会被构造成：http://localhost/index?page=xxx</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">url_for(&apos;index&apos;,page=posts.prev_num)</span><br></pre></td></tr></table></figure><h1 id="项目代码"><a class="markdownIt-Anchor" href="#项目代码"></a> 项目代码</h1><p><a href="http://route.py" target="_blank" rel="noopener">route.py</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def index():</span><br><span class="line">    ...</span><br><span class="line">    page = request.args.get(&apos;page&apos;,1,type=int)</span><br><span class="line">    posts = current_user.followed_posts().paginate(page,app.config[&apos;POSTS_PER_PAGE&apos;],False)</span><br><span class="line">    prev_url = url_for(&apos;index&apos;, page=posts.prev_num) \</span><br><span class="line">                if posts.has_prev else None</span><br><span class="line">    next_url = url_for(&apos;index&apos;, page=posts.next_num) \</span><br><span class="line">                if posts.has_next else None</span><br><span class="line">    return render_template(&apos;index.html&apos;,posts=posts.items,form=form,pre_url=prev_url,next_url=next_url)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>至此，完成了分页的功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;首先分页使用的数据库里面的Pagination对象，下面我们将对用法做一些剖析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="Flask" scheme="http://yoursite.com/categories/Flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>python模块-threading</title>
    <link href="http://yoursite.com/2018/06/29/python%E6%A8%A1%E5%9D%97-threading/"/>
    <id>http://yoursite.com/2018/06/29/python模块-threading/</id>
    <published>2018-06-29T11:38:34.000Z</published>
    <updated>2018-06-29T11:39:44.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>众所周知，运行一个程序最重要的是它的执行效率，比如爬虫，要如何节省爬虫的时间，提高爬虫效率是一件很重要的事情。<br>虽然python的多线程是鸡肋，在任意时间内，只有一个python的解释器在解释python的bytecode。但也不是多线程就是没有用的，我们的代码分为两种，一种是计算密集型，一种是IO密集型，其中计算密集型主要是需要CPU进行大量的计算的，这个时候，python的多线程没什么用，反而可能会比单线程的效率差。而相对于IO密集型的代码，主要瓶颈在于网络的传输，硬盘IO之类的上面，这个时候，使用python多线程就可以提高其效率。<br>上面的理解可能稍显有些片面，但不管如何，偏底层的东西先做一个了解，先学会一下如何用python写多线程</p><h1 id="threadingthread"><a class="markdownIt-Anchor" href="#threadingthread"></a> threading.Thread</h1><p>以一段代码为例，做一下学习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        print(<span class="string">"The thread name is &#123;&#125; and start in &#123;&#125;"</span>.format(threading.current_thread().name,ctime()))</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"The thread name is &#123;&#125; and end in &#123;&#125;"</span>.format(threading.current_thread().name,ctime()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        print(<span class="string">"The thread name is &#123;&#125; and start in &#123;&#125;"</span>.format(threading.current_thread().name,ctime()))</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"The thread name is &#123;&#125; and end in &#123;&#125;"</span>.format(threading.current_thread().name,ctime()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"__main__"</span> == __name__:</span><br><span class="line">    t1 = threading.Thread(target=thread1)</span><br><span class="line">    t2 = threading.Thread(target=thread2)</span><br><span class="line"></span><br><span class="line">    threads = []</span><br><span class="line">    threads.append(t1)</span><br><span class="line">    threads.append(t2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        print(t.daemon)</span><br><span class="line">        t.start()</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"The thread name is &#123;&#125; and end in &#123;&#125;"</span>.format(threading.current_thread().name,ctime()))</span><br><span class="line"><span class="comment"># result： 最后一个线程退出，用时两秒。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">The thread name is Thread-1 and start in Fri Jun 29 16:34:43 2018</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">The thread name is Thread-2 and start in Fri Jun 29 16:34:43 2018</span></span><br><span class="line"><span class="string">The thread name is MainThread and end in Fri Jun 29 16:34:43 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-2 and end in Fri Jun 29 16:34:44 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-1 and end in Fri Jun 29 16:34:44 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-2 and start in Fri Jun 29 16:34:44 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-1 and start in Fri Jun 29 16:34:44 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-2 and end in Fri Jun 29 16:34:45 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-1 and end in Fri Jun 29 16:34:45 2018</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="daemon属性"><a class="markdownIt-Anchor" href="#daemon属性"></a> daemon属性</h2><p>如果你设置一个线程的daemon属性为True的话，说明这个线程是不重要的，整个python的程序无需等待这个线程即可结束。<br>（注意，很多地方说是主线程结束，但是我实验了一下，主线程已经执行完了，但是其子线程还是会继续执行下去的。）<br>从代码可见，其daemon属性，从一开始就是False的。<br>但是如果你将daemon设置为True，那么程序将不会等待，主线程结束，程序就会退出，我们可以试着将代码改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">t1 = threading.Thread(target=thread1,daemon=<span class="keyword">True</span>)</span><br><span class="line">t2 = threading.Thread(target=thread2,daemon=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">threads = []</span><br><span class="line">threads.append(t1)</span><br><span class="line">threads.append(t2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    print(t.daemon)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"The thread name is &#123;&#125; and end in &#123;&#125;"</span>.format(threading.current_thread().name,ctime()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># result</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">The thread name is Thread-1 and start in Fri Jun 29 16:39:36 2018</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">The thread name is Thread-2 and start in Fri Jun 29 16:39:36 2018</span></span><br><span class="line"><span class="string">The thread name is MainThread and end in Fri Jun 29 16:39:36 2018</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="join方法"><a class="markdownIt-Anchor" href="#join方法"></a> join方法</h2><p>官方解释，join方法是用于阻塞线程的，一般要等待当前线程完成，才会进行下一个线程。根据实验，如果你对于每个线程都加一个join方法的话，那么就等于将程序变成了单线程，所以一般只给最后执行的子线程加一个join，这样，主线程就不会提前退出。</p><ol><li>每个子线程都加join</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    print(t.daemon)</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br></pre></td></tr></table></figure><ol start="2"><li>先启动,再遍历子线程加join</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for t in threads:</span><br><span class="line">    print(t.daemon)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">for t in threads:</span><br><span class="line">    t.join()</span><br></pre></td></tr></table></figure><h2 id="start方法"><a class="markdownIt-Anchor" href="#start方法"></a> start方法</h2><p>这个方法很直白，就是启动一个线程。</p><h1 id="线程类"><a class="markdownIt-Anchor" href="#线程类"></a> 线程类</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime,sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入多线程类</span></span><br><span class="line"><span class="comment"># 只能重写两个方法，一个__init__ 一个是run</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">            print(<span class="string">"The thread name is &#123;&#125; and start in &#123;&#125;"</span>.format(threading.current_thread().name,ctime()))</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">"The thread name is &#123;&#125; and end in &#123;&#125;"</span>.format(threading.current_thread().name,ctime()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        mt = MyThread()</span><br><span class="line">        threads.append(mt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">The thread name is Thread-1 and start in Fri Jun 29 17:04:41 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-2 and start in Fri Jun 29 17:04:41 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-1 and end in Fri Jun 29 17:04:42 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-1 and start in Fri Jun 29 17:04:42 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-2 and end in Fri Jun 29 17:04:42 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-2 and start in Fri Jun 29 17:04:42 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-1 and end in Fri Jun 29 17:04:43 2018</span></span><br><span class="line"><span class="string">The thread name is Thread-2 and end in Fri Jun 29 17:04:43 2018</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>以上学习了python多线程的简单用法，实际中用法肯定比较复杂，比如说锁，比如说队列的多线程，还有待探索。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;众所周知，运行一个程序最重要的是它的执行效率，比如爬虫，要如何节省爬虫的时间，提高爬虫效率是一件很重要的事情。&lt;br&gt;
虽然python的多线程
      
    
    </summary>
    
      <category term="python_modules" scheme="http://yoursite.com/categories/python-modules/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python模块-logging</title>
    <link href="http://yoursite.com/2018/06/29/python%E6%A8%A1%E5%9D%97-logging/"/>
    <id>http://yoursite.com/2018/06/29/python模块-logging/</id>
    <published>2018-06-29T11:36:55.000Z</published>
    <updated>2018-06-29T11:38:54.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工作流"><a class="markdownIt-Anchor" href="#工作流"></a> 工作流</h1><p>理解log模块，首先应该理解其工作流，下面通过例子来说明其工作流<br><a href="http://xn--main-ko8f602i0g9e.py" target="_blank" rel="noopener">首先是main.py</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import sub</span><br><span class="line">import sub2</span><br><span class="line">import logging</span><br><span class="line">import logging.config</span><br><span class="line">from config import LOGGING</span><br><span class="line">logging.config.dictConfig(LOGGING)</span><br><span class="line">logger = logging.getLogger(&quot;main&quot;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    sub.sub1()</span><br><span class="line">    logger.error(&quot;main debug&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if &quot;__main__&quot; == __name__:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在这里我们引入了sub 和sub2，先不理会其配置文件，假设已经写好配置文件了。<br><a href="http://xn--sub-yx1ej16g9sg.py" target="_blank" rel="noopener">其次是sub.py</a> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">sub_logger = logging.getLogger(&quot;main.sub&quot;)</span><br><span class="line">def sub1():</span><br><span class="line">    print(&quot;Hello This is sub1&quot;)</span><br><span class="line">    sub_logger.debug(&quot;This is sub1&quot;)</span><br></pre></td></tr></table></figure><p>我们可以看到，如果是多模块引入log机制，可以直接写成 如上面的形式。这种继承机制，让我们可以很方便的复用log.</p><h1 id="理解配置文件"><a class="markdownIt-Anchor" href="#理解配置文件"></a> 理解配置文件</h1><p>配置文件一般有两种：<br>字典形式<br>配置文件形式<br>至于哪种形式更好，就众说纷坛，有说字典形式比较好，因为都是python文件，我们写代码自定义程度更高，一种说配置文件形式其可读性更好。这里没有一个决断，我们首先使用字典形式，用代码来定义配置文件。<br>在配置文件里面，log有四个类，分别是</p><ol><li>formatters</li><li>handlers</li><li>filters</li><li>loggers</li></ol><h2 id="formatters"><a class="markdownIt-Anchor" href="#formatters"></a> formatters</h2><p>首先我们来看一下formatters</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;formatters&quot;:&#123;</span><br><span class="line">  # 标准模式</span><br><span class="line">  &quot;standard&quot;:&#123;</span><br><span class="line">     &apos;format&apos;:&apos;[%(asctime)s][%(threadName)s:%(thread)d][%(name)s:%(levelname)s(%(lineno)d)]\n[%(module)s:%(funcName)s]:%(message)s&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  # 简单模式</span><br><span class="line">  &quot;brief&quot;:&#123;</span><br><span class="line">    &quot;format&quot;:&apos;[%(message)s]&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 standard 和 brief 都是我们可以自定义的名字<br>接下来我们看一下formatters的格式化字符串有哪些，并且分别是什么含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%(name)s Logger的名字</span><br><span class="line">%(levelno)s 数字形式的日志级别</span><br><span class="line">%(levelname)s 文本形式的日志级别</span><br><span class="line">%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</span><br><span class="line">%(filename)s 调用日志输出函数的模块的文件名</span><br><span class="line">%(module)s 调用日志输出函数的模块名</span><br><span class="line">%(funcName)s 调用日志输出函数的函数名</span><br><span class="line">%(lineno)d 调用日志输出函数的语句所在的代码行</span><br><span class="line">%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示</span><br><span class="line">%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数</span><br><span class="line">%(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</span><br><span class="line">%(thread)d 线程ID。可能没有</span><br><span class="line">%(threadName)s 线程名。可能没有</span><br><span class="line">%(process)d 进程ID。可能没有</span><br><span class="line">%(message)s 用户输出的消息</span><br></pre></td></tr></table></figure><h2 id="handlers"><a class="markdownIt-Anchor" href="#handlers"></a> handlers</h2><p>handlers模块，顾名思义，就是处理log的模块，在这里我们要定义，log的输出是文件形式还是命令行输出形式，文件形式的话，其文件的存储路径，文件大小改如何分割等问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&quot;handlers&quot;:&#123;</span><br><span class="line">  &quot;console&quot;:&#123;</span><br><span class="line">     &apos;level&apos;:&apos;DEBUG&apos;,    #输出信息的最低级别</span><br><span class="line">     &apos;class&apos;:&apos;logging.StreamHandler&apos;,</span><br><span class="line">     &apos;formatter&apos;:&apos;standard&apos;, #使用standard格式</span><br><span class="line">      &apos;filters&apos;: [&apos;require_debug_true&apos;,], #仅当 DEBUG = True 该处理器才生效,一般没用。</span><br><span class="line">  &#125;,</span><br><span class="line">  &apos;log&apos;:&#123;</span><br><span class="line">      &apos;level&apos;:&apos;DEBUG&apos;,</span><br><span class="line">      &apos;class&apos;:&apos;logging.handlers.RotatingFileHandler&apos;,</span><br><span class="line">      &apos;formatter&apos;:&apos;standard&apos;,</span><br><span class="line">      &apos;filename&apos;:os.path.join(BASE_DIR, &apos;debug.log&apos;), #输出位置</span><br><span class="line">      &apos;maxBytes&apos;:1024*1024*5, #文件大小 5M</span><br><span class="line">      &apos;backupCount&apos;: 5, #备份份数</span><br><span class="line">       &apos;encoding&apos;: &apos;utf8&apos;, #文件编码</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，这里的console和log也是我们自定义的名字，我们还可以定义其他的，然后选择日志的输出位置，或者设置变量为日志的输出位置</p><h2 id="loggers"><a class="markdownIt-Anchor" href="#loggers"></a> loggers</h2><p>loggers是日志的全局管理器，我们会在这里定义一个管理器，在后面调用的时候，我们要获得这个管理器的名字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 日志管理器集合</span><br><span class="line">    &apos;loggers&apos;:&#123;</span><br><span class="line">        #管理器</span><br><span class="line">        &quot;main&quot;:&#123;</span><br><span class="line">            &apos;handlers&apos;:[&apos;console&apos;, &apos;main_log&apos;],</span><br><span class="line">            &apos;level&apos;:&apos;DEBUG&apos;,</span><br><span class="line">            &apos;propagate&apos;:True, #是否传递给父记录器</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中 main 是我们自己定义的名字，需要注意的是，如果使用的logger没有在这里定义名字，那么这些配置将无用。</p><h1 id="调用logger"><a class="markdownIt-Anchor" href="#调用logger"></a> 调用logger</h1><p>这里其实也是前面有提到的东西，我们要引入logging和logging.config。（注意，不能只单纯引入logging，会报错）<br>在main.py中我们 这么引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">import logging.config</span><br><span class="line">from config import LOGGING</span><br><span class="line">logging.config.dictConfig(LOGGING)</span><br><span class="line">logger = logging.getLogger(&quot;main&quot;</span><br></pre></td></tr></table></figure><p>其中这个main 就是我们定义在配置文件中管理器的main<br>根据其工作流原理，其自模块也需要进行log记录，这个时候我们就不需要写配置文件了，直接使用这个配置文件即可<br>在sub.py中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">sub_logger = logging.getLogger(&quot;main.sub&quot;)</span><br><span class="line">def sub1():</span><br><span class="line">    print(&quot;Hello This is sub1&quot;)</span><br><span class="line">    sub_logger.debug(&quot;This is sub1&quot;)</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>就这样，我们模拟了如何在python中使用日志记录，这对于开发来说是一件提高效率和产品质量很重要的事情</p><h1 id="代码地址"><a class="markdownIt-Anchor" href="#代码地址"></a> 代码地址</h1><p><a href="https://github.com/TheFifthMan/python_modules" target="_blank" rel="noopener">https://github.com/TheFifthMan/python_modules</a></p><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> reference</h1><p><a href="http://yshblog.com/blog/125" target="_blank" rel="noopener">http://yshblog.com/blog/125</a></p><p><a href="https://segmentfault.com/a/1190000015143449" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015143449</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;工作流&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#工作流&quot;&gt;&lt;/a&gt; 工作流&lt;/h1&gt;
&lt;p&gt;理解log模块，首先应该理解其工作流，下面通过例子来说明其工作流&lt;br&gt;
&lt;a href=&quot;http://xn--main-ko8f602
      
    
    </summary>
    
      <category term="python_modules" scheme="http://yoursite.com/categories/python-modules/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>kali下使用Tor网络</title>
    <link href="http://yoursite.com/2018/06/27/kali%E4%B8%8B%E4%BD%BF%E7%94%A8Tor%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2018/06/27/kali下使用Tor网络/</id>
    <published>2018-06-27T15:22:42.000Z</published>
    <updated>2018-06-27T15:26:17.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>记录一下如何在命令行下面使用tor网络</p></blockquote><h1 id="kali下安装tor"><a class="markdownIt-Anchor" href="#kali下安装tor"></a> Kali下安装tor</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install tor</span><br></pre></td></tr></table></figure><h1 id="架梯子"><a class="markdownIt-Anchor" href="#架梯子"></a> 架梯子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup sslocal -c ss.json</span><br></pre></td></tr></table></figure><h1 id="编辑tor配置添加"><a class="markdownIt-Anchor" href="#编辑tor配置添加"></a> 编辑tor配置,添加</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/tor/torrc /etc/tor/torrc.backup</span><br><span class="line">vim /etc/tor/torrc</span><br><span class="line"></span><br><span class="line">在里面添加</span><br><span class="line">...</span><br><span class="line">RunAsDaemon 1</span><br><span class="line">Socks5Proxy 127.0.0.1:1080</span><br><span class="line"># 重点，每隔n时间进行ip更换，时间单位为秒</span><br><span class="line">MaxCircuitDirtiness 900</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service tor@default start</span><br></pre></td></tr></table></figure><h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、创建一个用户，运行tor；</span><br><span class="line"></span><br><span class="line">2、编辑“start-tor-browser”文件，找到下面语句，删除或注释掉即可运行：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#if [ “`id -u`” -eq 0 ]; then</span><br><span class="line"></span><br><span class="line"># complain “The Tor Browser Bundle should not be run as root. Exiting.”</span><br><span class="line"></span><br><span class="line"># exit 1</span><br><span class="line"></span><br><span class="line">#fi</span><br></pre></td></tr></table></figure><h1 id="关闭"><a class="markdownIt-Anchor" href="#关闭"></a> 关闭</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service tor@default stop</span><br></pre></td></tr></table></figure><h1 id="配置全局代理"><a class="markdownIt-Anchor" href="#配置全局代理"></a> 配置全局代理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:9050</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><blockquote><p>完成这一切的前提，是你有一个梯子…</p></blockquote><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h1><p><a href="https://evi1cg.me/archives/Tor_Fronting.html" target="_blank" rel="noopener">https://evi1cg.me/archives/Tor_Fronting.html</a></p><p><a href="http://www.cnblogs.com/iamstudy/articles/tor_usage_in_pentest.html" target="_blank" rel="noopener">http://www.cnblogs.com/iamstudy/articles/tor_usage_in_pentest.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;记录一下如何在命令行下面使用tor网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;kali下安装tor&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Linux_security" scheme="http://yoursite.com/categories/Linux-security/"/>
    
    
      <category term="kali" scheme="http://yoursite.com/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞-理论</title>
    <link href="http://yoursite.com/2018/06/26/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E-%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2018/06/26/文件上传漏洞-理论/</id>
    <published>2018-06-25T16:09:00.000Z</published>
    <updated>2018-06-25T16:09:33.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><blockquote><p>攻击者利用web应用对上传文件过滤不严的漏洞，将应用程序不该允许的文件类型上传到web服务器上，并成功解析。</p></blockquote><h1 id="文件上传攻击的前提"><a class="markdownIt-Anchor" href="#文件上传攻击的前提"></a> 文件上传攻击的前提</h1><ol><li>网站具有上传功能</li><li>上传的文件能够被web服务器解析并执行</li><li>知道上传后的文件路径和文件名称</li><li>目标文件可以呗用户访问</li></ol><h1 id="文件上传漏洞的攻与防"><a class="markdownIt-Anchor" href="#文件上传漏洞的攻与防"></a> 文件上传漏洞的攻与防</h1><h1 id="攻击"><a class="markdownIt-Anchor" href="#攻击"></a> 攻击</h1><ol><li>判断是否为js防护或者MIME防护</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用burp suite抓取流量，进行伪造后重放攻击</span><br></pre></td></tr></table></figure><ol start="2"><li>针对黑名单过滤</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 多次测试过滤文件名。例如php，php4，php5</span><br><span class="line">2. 判断大小写绕过。Php，PHP</span><br><span class="line">3. 特殊文件名构造：php.shell. , php.shell_</span><br><span class="line">4. %00 截断。 phpshell.php%00.jpg</span><br><span class="line">5. 考虑web中间件版本漏洞。如httpd，tomcat，nginx,struts2等</span><br><span class="line">6. 如果web服务器是检测文件内容的，那么就可以使用修改文件头进行上传webshell</span><br></pre></td></tr></table></figure><h1 id="防御"><a class="markdownIt-Anchor" href="#防御"></a> 防御</h1><ol><li>前端进行js防御 [<mark>可绕过</mark>]</li><li>后端进行MIME防御 [<mark>可绕过</mark>]</li><li>后端进行白名单防御</li></ol><blockquote><p>只允许相应格式的文件进行上传，其余格式的文件丢弃</p></blockquote><ol start="4"><li>后端黑名单过滤 [<mark>可绕过</mark>]</li></ol><blockquote><p>不允许相应格式的文件进行上传</p></blockquote><ol start="5"><li>文件重命名防御</li></ol><blockquote><p>将用户上传的文件进行重命名，防止截断和绕过</p></blockquote><ol start="6"><li>文件名不该含有特殊符号，防止xss之类的攻击</li><li>文件内容检测。[<mark>可绕过</mark>]</li></ol><blockquote><p>有些图像文件，如果以网页脚本形式进行展示的话，那么就可能执行木马。针对文件内容进行检测，必要时候可以使用图像二次渲染之类的技术进行防护。</p></blockquote><ol start="8"><li>文件名长度需要做限制</li><li>需要有三个文件夹，一个存放临时文件，一个存放正式文件，一个存放病毒文件，并且其上传的文件都不应该具有x权限</li><li>用户上传文件后应该经过杀毒软件的扫描，如果是病毒文件，应该放置到隔离的文件中，做为审计资料，如果不是，应该由临时文件夹移动到正式文件夹</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; 概念&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;攻击者利用web应用对上传文件过滤不严的漏洞，将应用程序不该允许的文件类型上传到web服务器上，并成功解析。&lt;/p&gt;

      
    
    </summary>
    
      <category term="web_security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="文件上传漏洞" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Kali下配置ss服务</title>
    <link href="http://yoursite.com/2018/06/25/Kali%E4%B8%8B%E9%85%8D%E7%BD%AEss%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/06/25/Kali下配置ss服务/</id>
    <published>2018-06-25T14:17:29.000Z</published>
    <updated>2018-06-30T11:48:40.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h1><ol><li>首先你必须要有一个ss服务器</li><li>安装shadowsocks</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><ol start="3"><li>修改python包错误</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py</span><br><span class="line"></span><br><span class="line">将第52行libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)</span><br><span class="line">改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)</span><br><span class="line"></span><br><span class="line">再次搜索cleanup（全文件共2处，此处位于111行），将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)</span><br><span class="line">改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)</span><br><span class="line"></span><br><span class="line">save and restart shadowsocks service</span><br></pre></td></tr></table></figure><ol start="4"><li>增加ss服务器配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    &quot;server&quot;:&quot;服务器地址&quot;,</span><br><span class="line">    &quot;server_port&quot;:服务器端口号, &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080, </span><br><span class="line">    password&quot;:&quot;密码&quot;, </span><br><span class="line">    &quot;timeout&quot;:300, </span><br><span class="line">    &quot;method&quot;:&quot;加密方式&quot;, </span><br><span class="line">    &quot;fast_open&quot;: true,</span><br><span class="line">    &quot;workers&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>启动服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslocal -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><ol start="6"><li>配置 /etc/proxychains.conf</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">socks5 127.0.0.1 1080</span><br></pre></td></tr></table></figure><ol start="7"><li>使用proxychains启动应用程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxychains firefox www.google.com</span><br><span class="line">proxychains msfconsole</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;步骤&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#步骤&quot;&gt;&lt;/a&gt; 步骤&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;首先你必须要有一个ss服务器&lt;/li&gt;
&lt;li&gt;安装shadowsocks&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="Linux_security" scheme="http://yoursite.com/categories/Linux-security/"/>
    
    
      <category term="kali" scheme="http://yoursite.com/tags/kali/"/>
    
  </entry>
  
  <entry>
    <title>4-Linux的远程认证</title>
    <link href="http://yoursite.com/2018/06/24/4-Linux%E7%9A%84%E8%BF%9C%E7%A8%8B%E8%AE%A4%E8%AF%81/"/>
    <id>http://yoursite.com/2018/06/24/4-Linux的远程认证/</id>
    <published>2018-06-24T07:35:37.000Z</published>
    <updated>2018-06-24T07:39:16.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="增强ssh安全性"><a class="markdownIt-Anchor" href="#增强ssh安全性"></a> 增强ssh安全性</h1><h3 id="改变ssh的端口"><a class="markdownIt-Anchor" href="#改变ssh的端口"></a> 改变ssh的端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp /ect/ssh/sshd_onfig /etc/ssh/sshd_config.backup</span><br><span class="line"></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">...</span><br><span class="line">Port 3333</span><br><span class="line"></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><h3 id="禁止root直接登录"><a class="markdownIt-Anchor" href="#禁止root直接登录"></a> 禁止root直接登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">...</span><br><span class="line">PermissionRootLogin no</span><br><span class="line">...</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><h3 id="只允许一部分用户登录"><a class="markdownIt-Anchor" href="#只允许一部分用户登录"></a> 只允许一部分用户登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">...</span><br><span class="line">AllowUsers user1 user2</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><h3 id="使用密钥登录服务器"><a class="markdownIt-Anchor" href="#使用密钥登录服务器"></a> 使用密钥登录服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 首先在本地生成一个私钥和公钥。客户端</span><br><span class="line">ssh-keygen-t rsa</span><br><span class="line"></span><br><span class="line">2. 将客户端的公钥上传到服务器端</span><br><span class="line">ssh-copy-id -p 33 linux@172.16.190.901</span><br><span class="line"></span><br><span class="line">3. 登录</span><br><span class="line">ssh -p 33 linux@172.111.111.111</span><br></pre></td></tr></table></figure><h3 id="禁止密码登录"><a class="markdownIt-Anchor" href="#禁止密码登录"></a> 禁止密码登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">...</span><br><span class="line">PasswordAuthentication      no</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;增强ssh安全性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#增强ssh安全性&quot;&gt;&lt;/a&gt; 增强ssh安全性&lt;/h1&gt;
&lt;h3 id=&quot;改变ssh的端口&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#改变s
      
    
    </summary>
    
      <category term="Linux_security" scheme="http://yoursite.com/categories/Linux-security/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>3-Linux的本地认证</title>
    <link href="http://yoursite.com/2018/06/24/3-Linux%E7%9A%84%E6%9C%AC%E5%9C%B0%E8%AE%A4%E8%AF%81/"/>
    <id>http://yoursite.com/2018/06/24/3-Linux的本地认证/</id>
    <published>2018-06-24T07:35:11.000Z</published>
    <updated>2018-06-24T07:36:23.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><ul><li>[x] 用户认证和日志记录</li><li>[x] 限制用户登录的能力</li><li>[x] 使用acct监视用户行为</li><li>[x] 定义用户授权控制</li><li>[ ] 使用USB设备和PAM进行登录</li></ul><h1 id="日志记录"><a class="markdownIt-Anchor" href="#日志记录"></a> 日志记录</h1><h3 id="varlog"><a class="markdownIt-Anchor" href="#varlog"></a> /var/log</h3><blockquote><p>存放着各种log</p></blockquote><h3 id="查看特定账号的错误登录尝试"><a class="markdownIt-Anchor" href="#查看特定账号的错误登录尝试"></a> 查看特定账号的错误登录尝试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lastb root</span><br></pre></td></tr></table></figure><h3 id="查看内存中缓存的内核信息"><a class="markdownIt-Anchor" href="#查看内存中缓存的内核信息"></a> 查看内存中缓存的内核信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dmesg</span><br></pre></td></tr></table></figure><h3 id="查看最近某用户登录信息"><a class="markdownIt-Anchor" href="#查看最近某用户登录信息"></a> 查看最近某用户登录信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last</span><br></pre></td></tr></table></figure><h3 id="查看最后一次登录"><a class="markdownIt-Anchor" href="#查看最后一次登录"></a> 查看最后一次登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lastlog</span><br></pre></td></tr></table></figure><h1 id="限制用户登录"><a class="markdownIt-Anchor" href="#限制用户登录"></a> 限制用户登录</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">usermod -s /usr/bim/nologin user1</span><br><span class="line">passwd -l user1</span><br><span class="line">usermod -l user1</span><br><span class="line"># 解锁</span><br><span class="line">passwd -u user1</span><br><span class="line">usermod -u user1</span><br></pre></td></tr></table></figure><h1 id="使用acct监视用户"><a class="markdownIt-Anchor" href="#使用acct监视用户"></a> 使用acct监视用户</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install acct</span><br><span class="line"></span><br><span class="line">查询特定用户执行过的命令</span><br><span class="line">lastcomm root</span><br></pre></td></tr></table></figure><h1 id="定义用户用户授权限制"><a class="markdownIt-Anchor" href="#定义用户用户授权限制"></a> 定义用户用户授权限制</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim sudoers</span><br><span class="line"># 每次切换root权限都需要输入密码</span><br><span class="line">Defaults user1 timestamp_timeout=0</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>这章，比较没写什么有价值的东西。单纯了解了一些linux的操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[x] 用户认证和日志记录&lt;/li&gt;
&lt;li&gt;[x] 限制用户登录的能力&lt;/li&gt;
&lt;li&gt;[x] 使用acct监视用户行为&lt;/li
      
    
    </summary>
    
      <category term="Linux_security" scheme="http://yoursite.com/categories/Linux-security/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>2-本地文件系统安全</title>
    <link href="http://yoursite.com/2018/06/24/2-%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2018/06/24/2-本地文件系统安全/</id>
    <published>2018-06-24T04:33:17.000Z</published>
    <updated>2018-06-24T04:39:13.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><ul><li>[x] 使用chmod命令改变文件权限</li><li>[x] 使用访问控制列表</li><li>[ ] 在Ubuntu上安装一个LDAP</li></ul><h1 id="chmod命令"><a class="markdownIt-Anchor" href="#chmod命令"></a> chmod命令</h1><blockquote><p>除了以下的方式外，还可以使用八进制的方式来做权限控制，暂且不表。</p></blockquote><h3 id="命令参数"><a class="markdownIt-Anchor" href="#命令参数"></a> 命令参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">u 代表文件或者目录的所有者 users</span><br><span class="line">g 代表文件或者目录所属的组 groups</span><br><span class="line">o 代表文件或者目录外的其他 others</span><br><span class="line">a 代表以上所有             all</span><br><span class="line"></span><br><span class="line">r 代表 读</span><br><span class="line">x 代表 执行</span><br><span class="line">w 代表 写</span><br></pre></td></tr></table></figure><h3 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 新建文件</span><br><span class="line">&gt;&gt; touch test.txt</span><br><span class="line"># 赋予执行的权限</span><br><span class="line">&gt;&gt; chmod u+x test.txt</span><br><span class="line"># 赋予组成员执行权限</span><br><span class="line">&gt;&gt; chmod g+x u+x test.txt</span><br><span class="line"># 收回权限</span><br><span class="line">&gt;&gt; chmod u-x test.txt</span><br><span class="line"># 将某个文件的权限复制给另一个文件</span><br><span class="line">&gt;&gt; chmod --reference=file1 file2</span><br><span class="line"># 递归添加权限</span><br><span class="line">&gt;&gt; chmod o+x -R /example</span><br></pre></td></tr></table></figure><h1 id="使用访问控制列表"><a class="markdownIt-Anchor" href="#使用访问控制列表"></a> 使用访问控制列表</h1><h3 id="获取权限控制信息"><a class="markdownIt-Anchor" href="#获取权限控制信息"></a> 获取权限控制信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">linux@linux:~$ getfacl /usr</span><br><span class="line">getfacl: Removing leading &apos;/&apos; from absolute path names</span><br><span class="line"># file: usr</span><br><span class="line"># owner: root</span><br><span class="line"># group: root</span><br><span class="line">user::rwx</span><br><span class="line">group::r-x</span><br><span class="line">other::r-x</span><br></pre></td></tr></table></figure><h3 id="操作指南"><a class="markdownIt-Anchor" href="#操作指南"></a> 操作指南</h3><h5 id="添加用户组"><a class="markdownIt-Anchor" href="#添加用户组"></a> 添加用户+组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">useradd user1</span><br><span class="line">useradd user2</span><br><span class="line">useradd user3</span><br><span class="line">passwd -d user1</span><br><span class="line">passwd -d user2</span><br><span class="line">passwd -d user3</span><br><span class="line"></span><br><span class="line">addgroup group1</span><br><span class="line"></span><br><span class="line">usermod -G group1 user1</span><br><span class="line">usermod -G group1 user2</span><br><span class="line">usermod -G group1 user3</span><br></pre></td></tr></table></figure><h5 id="user1-想把文件夹user1-分享给user2但是不给user3"><a class="markdownIt-Anchor" href="#user1-想把文件夹user1-分享给user2但是不给user3"></a> user1 想把文件夹user1 分享给user2，但是不给user3</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir accounts</span><br><span class="line">chown user1 accounts</span><br><span class="line"></span><br><span class="line">su user1</span><br><span class="line">setfacl -m u:user1:rxw accounts</span><br><span class="line">setfacl -m u:user2:rwx accounts</span><br><span class="line">setfacl -m other:--- accounts</span><br></pre></td></tr></table></figure><h5 id="实验验证"><a class="markdownIt-Anchor" href="#实验验证"></a> 实验验证</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@linux:~# su user3</span><br><span class="line">$ cd /example</span><br><span class="line">$ ls</span><br><span class="line">accounts</span><br><span class="line">$ cd accounts</span><br><span class="line">sh: 3: cd: can&apos;t cd to accounts</span><br></pre></td></tr></table></figure><h5 id="对权限控制做备份"><a class="markdownIt-Anchor" href="#对权限控制做备份"></a> 对权限控制做备份</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ getfacl -R accounts &gt; accounts/permissions.acl                   </span><br><span class="line">$ cd accounts</span><br><span class="line">$ ls</span><br><span class="line">permissions.acl</span><br></pre></td></tr></table></figure><h5 id="恢复备份"><a class="markdownIt-Anchor" href="#恢复备份"></a> 恢复备份</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl -- restore=permission.acl</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><blockquote><p>LADP暂时用不到，先不弄了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;[x] 使用chmod命令改变文件权限&lt;/li&gt;
&lt;li&gt;[x] 使用访问控制列表&lt;/li&gt;
&lt;li&gt;[ ] 在Ubuntu上安装一
      
    
    </summary>
    
      <category term="Linux_security" scheme="http://yoursite.com/categories/Linux-security/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>1-Linux中的安全问题</title>
    <link href="http://yoursite.com/2018/06/24/1-Linux%E4%B8%AD%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/06/24/1-Linux中的安全问题/</id>
    <published>2018-06-24T02:04:07.000Z</published>
    <updated>2018-06-24T04:39:00.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>读书笔记</p></blockquote><h1 id="linux的安全策略"><a class="markdownIt-Anchor" href="#linux的安全策略"></a> Linux的安全策略</h1><ol><li>对系统的访问能力</li><li>系统上安装软件的权限</li><li>数据的访问能力</li><li>故障恢复</li></ol><h1 id="检验安装介质的安全性"><a class="markdownIt-Anchor" href="#检验安装介质的安全性"></a> 检验安装介质的安全性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Linux</span><br><span class="line">md5sum ubuntu18.iso</span><br><span class="line"></span><br><span class="line"># windows </span><br><span class="line">CertUtil -hashfile xxxx.iso MD5</span><br><span class="line"></span><br><span class="line"># mac</span><br><span class="line">~/Downloads» md5 ubuntu18.iso </span><br><span class="line">MD5 (ubuntu18.iso) = 129292a182136a35e1f89c586dbac2e2</span><br><span class="line"></span><br><span class="line">---------------------------------</span><br><span class="line">官网md5：</span><br><span class="line"></span><br><span class="line">129292a182136a35e1f89c586dbac2e2 *ubuntu-18.04-desktop-amd64.iso</span><br></pre></td></tr></table></figure><h1 id="配置sudo访问"><a class="markdownIt-Anchor" href="#配置sudo访问"></a> 配置sudo访问</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">useradd test</span><br><span class="line">groupadd testgroups</span><br><span class="line">passwd test</span><br><span class="line">visudo </span><br><span class="line"></span><br><span class="line">## Allow people in group test run all commands</span><br><span class="line">test ALL=(ALL) ALL</span><br><span class="line"></span><br><span class="line">usermod -aG testgroups test</span><br><span class="line"></span><br><span class="line">sudo test -</span><br></pre></td></tr></table></figure><h1 id="使用namp扫描metasploitable2"><a class="markdownIt-Anchor" href="#使用namp扫描metasploitable2"></a> 使用namp扫描metasploitable2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 首先下载metasploitable2</span><br><span class="line">https://sourceforge.net/projects/metasploitable/ </span><br><span class="line"># 安装kali系统</span><br><span class="line"># 设置kali系统的metasploitable</span><br><span class="line"># 使用进行扫描</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;读书笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;linux的安全策略&quot;&gt;&lt;a class=&quot;markdo
      
    
    </summary>
    
      <category term="Linux_security" scheme="http://yoursite.com/categories/Linux-security/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Flask09-补缺补漏</title>
    <link href="http://yoursite.com/2018/06/24/Flask09-%E8%A1%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F/"/>
    <id>http://yoursite.com/2018/06/24/Flask09-补缺补漏/</id>
    <published>2018-06-24T01:56:42.000Z</published>
    <updated>2018-06-24T01:57:21.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>补缺补漏</p></blockquote><h1 id="写文章的表单"><a class="markdownIt-Anchor" href="#写文章的表单"></a> 写文章的表单</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class PostForm(FlaskForm):</span><br><span class="line">    body = TextAreaField(&apos;Say something:&apos;,validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(&apos;Submit&apos;)</span><br></pre></td></tr></table></figure><h1 id="体现到首页"><a class="markdownIt-Anchor" href="#体现到首页"></a> 体现到首页</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># index.html</span><br><span class="line">&#123;% extends &quot;basic.html&quot; %&#125;</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    &lt;div class=&apos;main&apos;&gt;</span><br><span class="line">        &#123;% if current_user.is_active %&#125;</span><br><span class="line">        &lt;h1&gt;Hello, &#123;&#123; current_user.username &#125;&#125;&lt;/h1&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;!--这里如果没有form，那么就不展示这个表单--&gt;</span><br><span class="line">        &#123;% if form %&#125;</span><br><span class="line">        &lt;form action=&apos;&apos; method=&apos;POST&apos;&gt;</span><br><span class="line">            &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;&#123; form.body.label &#125;&#125;</span><br><span class="line">                &#123;&#123; form.body(class_=&apos;body&apos;)&#125;&#125;</span><br><span class="line">                &#123;% for error in form.body.errors %&#125;</span><br><span class="line">                &lt;span style=&apos;color:red;&apos;&gt;&#123;&#123; error &#125;&#125;&lt;/span&gt;</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &#123;&#123; form.submit()&#125;&#125;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        &lt;h1&gt;Hello, Stranger&lt;/h1&gt;</span><br><span class="line">        &#123;% endif%&#125;</span><br><span class="line">        &#123;% include &quot;_posts.html&quot; %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><h1 id="路由逻辑编写"><a class="markdownIt-Anchor" href="#路由逻辑编写"></a> 路由逻辑编写</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;,methods=[&apos;GET&apos;,&quot;POST&quot;])</span><br><span class="line">@app.route(&apos;/index&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class="line">def index():</span><br><span class="line">    # 如果已经登录，那么首页就展示关注的人的文章</span><br><span class="line">    if current_user.is_authenticated:</span><br><span class="line">        posts = current_user.followed_posts().all()</span><br><span class="line">        form = PostForm()</span><br><span class="line">        if form.validate_on_submit():</span><br><span class="line">            post = Post(body=form.body.data,author=current_user)</span><br><span class="line">            db.session.add(post)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            # 使用redirect可以避免导致最后一次提交的时候，重复刷新的话，为GET请求，而不是post请求</span><br><span class="line">            return redirect(url_for(&apos;index&apos;))</span><br><span class="line">        return render_template(&apos;index.html&apos;,posts=posts,form=form)</span><br><span class="line">    else:</span><br><span class="line">    # 如果没有登录，就按时间展示所有文章</span><br><span class="line">        posts = Post.query.order_by(Post.timestamp.desc()).all()</span><br><span class="line">        return render_template(&apos;index.html&apos;,posts=posts)</span><br></pre></td></tr></table></figure><h1 id="如果登录还怎么看全部的文章"><a class="markdownIt-Anchor" href="#如果登录还怎么看全部的文章"></a> 如果登录还怎么看全部的文章？</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/explore&apos;)</span><br><span class="line">@login_required</span><br><span class="line">def explore():</span><br><span class="line">    posts = Post.query.order_by(Post.timestamp.desc()).all()</span><br><span class="line">    return render_template(&apos;index.html&apos;,posts=posts)</span><br></pre></td></tr></table></figure><h1 id="如何快速的看到别人的文章就关注别人"><a class="markdownIt-Anchor" href="#如何快速的看到别人的文章就关注别人"></a> 如何快速的看到别人的文章就关注别人？</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># _post.html</span><br><span class="line">&#123;% for post in posts %&#125;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(&apos;user&apos;,username=post.author.username)&#125;&#125;&quot;&gt;&#123;&#123; post.author.username&#125;&#125;&lt;/a&gt;says: &#123;&#123; post.body &#125;&#125;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;补缺补漏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;写文章的表单&quot;&gt;&lt;a class=&quot;markdownIt
      
    
    </summary>
    
      <category term="Flask" scheme="http://yoursite.com/categories/Flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>在kali中配置metasploit</title>
    <link href="http://yoursite.com/2018/06/24/kali%E4%B8%8B%E9%85%8D%E7%BD%AEmetasploit/"/>
    <id>http://yoursite.com/2018/06/24/kali下配置metasploit/</id>
    <published>2018-06-24T01:54:59.000Z</published>
    <updated>2018-06-27T15:25:46.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装kali系统"><a class="markdownIt-Anchor" href="#安装kali系统"></a> 安装Kali系统</h1><p>推荐使用虚拟机，太简单不赘述。</p><h1 id="配置数据库"><a class="markdownIt-Anchor" href="#配置数据库"></a> 配置数据库</h1><h3 id="开启开机启动"><a class="markdownIt-Anchor" href="#开启开机启动"></a> 开启开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.local 添加</span><br><span class="line">/etc/init.d/postgresql start</span><br></pre></td></tr></table></figure><h3 id="启动数据库"><a class="markdownIt-Anchor" href="#启动数据库"></a> 启动数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service postgresql start </span><br><span class="line">systemctl restart postgresql</span><br></pre></td></tr></table></figure><h3 id="创建新用户"><a class="markdownIt-Anchor" href="#创建新用户"></a> 创建新用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; su postgres</span><br><span class="line">&gt;&gt; pssql</span><br><span class="line">&gt;&gt; create user &quot;msfuser&quot; with password &apos;msfpassword&apos; nocreatedb;</span><br><span class="line">&gt;&gt; create database &quot;msfdb&quot; with owner=&quot;msfuser&quot;;</span><br></pre></td></tr></table></figure><h3 id="编辑databaseyml文件"><a class="markdownIt-Anchor" href="#编辑databaseyml文件"></a> 编辑database.yml文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;cd /usr/share/metasploit-framework/config</span><br><span class="line">&gt;&gt; cp database.yml.example database.yml</span><br><span class="line">&gt;&gt; vim database.yml</span><br><span class="line">...</span><br><span class="line">database: msfdb</span><br><span class="line">username: msfuser</span><br><span class="line">password:msfpassword</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="编辑postgresql本地启动"><a class="markdownIt-Anchor" href="#编辑postgresql本地启动"></a> 编辑postgresql，本地启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; cd /etc/postgresql/10/main</span><br><span class="line">&gt;&gt; cp pg_hba.conf pg_hba.conf.backup</span><br><span class="line">&gt;&gt; vim pg_hba.conf</span><br><span class="line">...</span><br><span class="line"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span><br><span class="line"></span><br><span class="line"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class="line">local   all             all                                     trust</span><br><span class="line"># IPv4 local connections:</span><br><span class="line">host    all             all             127.0.0.1/32            trust</span><br><span class="line"># IPv6 local connections:</span><br><span class="line">host    all             all             ::1/128                 trust</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="启动msf查看状态"><a class="markdownIt-Anchor" href="#启动msf查看状态"></a> 启动msf,查看状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; msfconsole</span><br><span class="line">&gt;&gt; db_status</span><br></pre></td></tr></table></figure><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h1><p><a href="https://www.secpulse.com/archives/33281.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/33281.html</a></p><p><a href="https://www.jianshu.com/p/9c82ccb2aaf7" target="_blank" rel="noopener">https://www.jianshu.com/p/9c82ccb2aaf7</a></p><p><a href="https://blog.csdn.net/sanbingyutuoniao123/article/details/52209653" target="_blank" rel="noopener">https://blog.csdn.net/sanbingyutuoniao123/article/details/52209653</a></p><p><a href="https://docs.kali.org/general-use/starting-metasploit-framework-in-kali" target="_blank" rel="noopener">https://docs.kali.org/general-use/starting-metasploit-framework-in-kali</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装kali系统&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装kali系统&quot;&gt;&lt;/a&gt; 安装Kali系统&lt;/h1&gt;
&lt;p&gt;推荐使用虚拟机，太简单不赘述。&lt;/p&gt;
&lt;h1 id=&quot;配置数据库&quot;&gt;&lt;a class=&quot;markdownI
      
    
    </summary>
    
      <category term="Linux_security" scheme="http://yoursite.com/categories/Linux-security/"/>
    
    
      <category term="metasploit" scheme="http://yoursite.com/tags/metasploit/"/>
    
  </entry>
  
  <entry>
    <title>执行XSS代码</title>
    <link href="http://yoursite.com/2018/06/23/%E6%89%A7%E8%A1%8CXSS%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2018/06/23/执行XSS代码/</id>
    <published>2018-06-23T07:50:19.000Z</published>
    <updated>2018-06-25T11:20:01.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>前面简单的总结了一下xss的常见的攻击，搭建了xss平台。也算一个了解了，但对于xss执行，并没有总结一下有哪些方式，恰逢假日，又看到一篇文章，遂，总结如下。</p><h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><ol><li>反射型xss</li><li>存储型xss</li><li>DOM型xss</li><li>UXSS</li><li>MXSS</li></ol><h3 id="uxss"><a class="markdownIt-Anchor" href="#uxss"></a> UXSS：</h3><blockquote><p>一种针对浏览器的xss，比起普通的xss，其危害在于，它危害的是浏览器本身，譬如根据浏览器本身功能的缺陷，或者根据浏览器拓展的功能缺陷，生成并执行代码</p></blockquote><blockquote><p>Unlike the common XSS attacks, UXSS is a type of attack that exploits client-side vulnerabilities in the browser or browser extensions in order to generate an XSS condition, and execute malicious code.</p></blockquote><h3 id="mxss"><a class="markdownIt-Anchor" href="#mxss"></a> MXSS</h3><blockquote><p>指的是一些本来看起来没有危害的html/js代码，经过浏览器渲染，形成了有危害的xss代码，其英文全称为：<strong>Mutation-based Cross-Site-Scripting</strong> 突变性xss<br><img src="/images/MXSS.jpg" alt="mxss"></p></blockquote><h1 id="html-xss"><a class="markdownIt-Anchor" href="#html-xss"></a> html xss</h1><blockquote><p>顾名思义，就是在html里面构造的xss。 一般就是闭合尖括号，然后植入脚本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- &#123;&#123; user input &#125;&#125; --&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;&lt;svg onload=alert(1)&gt;&lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;&lt;iframe onload=alert(1)&gt;&lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;&lt;script src=&apos;xx.js&apos;&gt;&lt;/script&gt;&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="属性-xss"><a class="markdownIt-Anchor" href="#属性-xss"></a> 属性 xss</h1><blockquote><p>在html标签里面的属性，存在用户输入，从而造成的xss，可分为三种，双引号，单引号，无引号</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- &#123;&#123; user input &#125;&#125; --&gt;</span><br><span class="line">    &lt;input value=&quot;&quot; autofocus onfocus=&quot;alert(1)&quot;&gt;</span><br><span class="line">    &lt;input value=&apos;&apos; onmouseover=&quot;alert(1)&quot;</span><br><span class="line">    &lt;input value=&apos;&apos; autofocus onblur=&quot;alert(1)&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">onfocus 将焦点放在input里面</span><br><span class="line">onmouseover 鼠标移入事件</span><br><span class="line">onblur 鼠标移出事件</span><br></pre></td></tr></table></figure><h1 id="url-xss"><a class="markdownIt-Anchor" href="#url-xss"></a> URL xss</h1><blockquote><p>这种xss 一般存在与a 标签里面</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;&#123;&#123;userinput&#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;a href=&quot;&#123;&#123;userinput&#125;&#125;&quot;&gt;Click&lt;/a&gt;</span><br><span class="line">&lt;iframe src=&quot;&#123;&#123;userinput&#125;&#125;&quot; /&gt;</span><br><span class="line">&lt;base href=&quot;&#123;&#123;userinput&#125;&#125;&quot;&gt;</span><br><span class="line">&lt;form action=&#123;&#123;userinput&#125;&#125;&gt;</span><br><span class="line">&lt;frameset&gt;&lt;frame src=&quot;&#123;&#123;userinput&#125;&#125;&quot;&gt;&lt;/frameset&gt;</span><br><span class="line"></span><br><span class="line">javascript:alert(/xss/)</span><br></pre></td></tr></table></figure><h1 id="javascript-xss"><a class="markdownIt-Anchor" href="#javascript-xss"></a> Javascript xss</h1><blockquote><p>根据不同的js代码，进行构造，一般闭合大括号，引号等等。</p></blockquote><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>XSS也算很老的漏洞的了，但总是有人可以把它玩出花来。</p><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> reference</h1><p><a href="https://www.acunetix.com/blog/articles/universal-cross-site-scripting-uxss/" target="_blank" rel="noopener">https://www.acunetix.com/blog/articles/universal-cross-site-scripting-uxss/</a></p><p><a href="http://imweb.io/topic/55e3c132771670e207a16bcf" target="_blank" rel="noopener">http://imweb.io/topic/55e3c132771670e207a16bcf</a></p><p><a href="https://www.anquanke.com/post/id/148357" target="_blank" rel="noopener">https://www.anquanke.com/post/id/148357</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;p&gt;前面简单的总结了一下xss的常见的攻击，搭建了xss平台。也算一个了解了，但对于xss执行，并没有总结一下有哪些方式，恰逢假日，又看到一篇文章，
      
    
    </summary>
    
      <category term="web_security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="xss" scheme="http://yoursite.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>python模块-shutil</title>
    <link href="http://yoursite.com/2018/06/21/python%E6%A8%A1%E5%9D%97-shutil/"/>
    <id>http://yoursite.com/2018/06/21/python模块-shutil/</id>
    <published>2018-06-21T13:52:26.000Z</published>
    <updated>2018-06-21T13:52:51.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>shutil模块提供了基于文件和文件夹的更高维度的操作，例如复制和移除等等</p></blockquote><h1 id="文件操作"><a class="markdownIt-Anchor" href="#文件操作"></a> 文件操作</h1><h2 id="shutilcopyfilesrcdstfollow_symlinkstrue"><a class="markdownIt-Anchor" href="#shutilcopyfilesrcdstfollow_symlinkstrue"></a> shutil.copyfile(src,dst,follow_symlinks=True)</h2><blockquote><p>复制一个文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># dst也必须是一个文件名.</span><br><span class="line">shutil.copyfile(&apos;D://new_folder2/test2/testsample.txt&apos;,&quot;D://new_folder2//testsample.txt&quot;)</span><br></pre></td></tr></table></figure><h2 id="shutilcopysrcdstfollow_symlinkstrue"><a class="markdownIt-Anchor" href="#shutilcopysrcdstfollow_symlinkstrue"></a> shutil.copy(src,dst,follow_symlinks=True)</h2><blockquote><p>针对文件，复制操作</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.copy(&apos;D://new_folder2//test2//testsample.txt&apos;,&quot;D://new_folder2//testsample2.txt&quot;)</span><br></pre></td></tr></table></figure><h2 id="shutilcopy2srcdstfollow_symlinkstrue"><a class="markdownIt-Anchor" href="#shutilcopy2srcdstfollow_symlinkstrue"></a> shutil.copy2(src,dst,follow_symlinks=True)</h2><blockquote><p>类似copy，不同的是，这个copy会同样复制文件的元数据。元数据指的是一个文件的权限，大小，创建时间等等。</p></blockquote><h2 id="shutilcopytreesrcdst"><a class="markdownIt-Anchor" href="#shutilcopytreesrcdst"></a> shutil.copytree(src,dst)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.copytree(src, dst, symlinks=False, ignore=None,copy_function=copy2, ignore_dangling_symlinks=False)</span><br></pre></td></tr></table></figure><blockquote><p>复制文件夹,底下的文件，文件夹都会被复制。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.copytree(&apos;D://new_folder2//test2&apos;,&quot;D://new_folder2//test222&quot;,copy_function=shutil.copy2)</span><br></pre></td></tr></table></figure><h2 id="shutilrmtreepath"><a class="markdownIt-Anchor" href="#shutilrmtreepath"></a> shutil.rmtree(path)</h2><blockquote><p>移除文件夹及底下的文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.rmtree(&quot;D://new_folder2//test222&quot;)</span><br></pre></td></tr></table></figure><h2 id="shutilmovesrcdstcopy_functioncopy2"><a class="markdownIt-Anchor" href="#shutilmovesrcdstcopy_functioncopy2"></a> shutil.move(src,dst,copy_function=copy2)</h2><blockquote><p>递归移动一个文件或者文件夹到dst，然后返回路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shutil.move(&apos;D://new_folder2/test3&apos;,&apos;D://new_folder2/test4&apos;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;返回D://new_folder2/test4\test2</span><br></pre></td></tr></table></figure><h2 id="shutildisk_usagepath"><a class="markdownIt-Anchor" href="#shutildisk_usagepath"></a> shutil.disk_usage(path)</h2><blockquote><p>返回以bytes为单位的磁盘使用情况</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(shutil.disk_usage(&apos;D://&apos;))</span><br><span class="line">&gt;&gt;&gt;&gt; usage(total=84001771520, used=76966387712, free=7035383808)</span><br></pre></td></tr></table></figure><h2 id="shutilchownpathusernonegroupnone"><a class="markdownIt-Anchor" href="#shutilchownpathusernonegroupnone"></a> shutil.chown(path,user=None,group=None)</h2><blockquote><p>改变一个文件/文件夹的所有者</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.chown(path,user,group)</span><br></pre></td></tr></table></figure><h2 id="shutilwhichcmd"><a class="markdownIt-Anchor" href="#shutilwhichcmd"></a> shutil.which(cmd)</h2><blockquote><p>显示可执行程序所在的路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.which(&apos;python&apos;)</span><br></pre></td></tr></table></figure><h1 id="归档压缩操作"><a class="markdownIt-Anchor" href="#归档压缩操作"></a> 归档压缩操作</h1><h2 id="shutilmake_archivebasenameformatroot_dirbase_dir"><a class="markdownIt-Anchor" href="#shutilmake_archivebasenameformatroot_dirbase_dir"></a> shutil.make_archive(basename,format,root_dir,base_dir)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">basename: 要创建的压缩文件名，需要包含路径</span><br><span class="line">format： zip,tar,gztar,bztar,zxtar</span><br><span class="line">root_dir: 先进去这个root_dir的目录，然后在压缩base_dir的所有东西</span><br><span class="line">base_dir: 路径的前缀</span><br><span class="line"></span><br><span class="line">shutil.make_archive(&quot;D://new_folder2/test3&quot;,&apos;zip&apos;,&apos;D://new_folder2/&apos;,&apos;D://new_folder2/test3&apos;)</span><br></pre></td></tr></table></figure><h2 id="shutilunpack_archivefilenameextract_dirformat"><a class="markdownIt-Anchor" href="#shutilunpack_archivefilenameextract_dirformat"></a> shutil.unpack_archive(filename,extract_dir,format)</h2><blockquote><p>解压缩</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># test1 不存在，但是会自动创建</span><br><span class="line">shutil.unpack_archive(&apos;D://new_folder2/test3.zip&apos;,&quot;D://new_folder2//test1&quot;,&quot;zip&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;shutil模块提供了基于文件和文件夹的更高维度的操作，例如复制和移除等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1
      
    
    </summary>
    
      <category term="python_modules" scheme="http://yoursite.com/categories/python-modules/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>配置phpstorm</title>
    <link href="http://yoursite.com/2018/06/20/%E9%85%8D%E7%BD%AEphpstorm/"/>
    <id>http://yoursite.com/2018/06/20/配置phpstorm/</id>
    <published>2018-06-20T15:08:31.000Z</published>
    <updated>2018-06-20T15:51:10.621Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>打开工具栏上面的Tools --&gt; Deployment --&gt; configuration<br><img src="/images/phpstorm1.jpeg" alt="phpstorm1"><br><img src="/images/phpstorm2.jpeg" alt="phpstorm2"></p></li><li><p>点击 Edit Configurations<br><img src="/images/phpstorm3.jpeg" alt="phpstorm3"></p></li><li><p>new 一个新的配置<br><img src="/images/phpstorm4.jpeg" alt="phpstorm4"><br><img src="/images/phpstorm5.jpeg" alt="phpstorm5"></p></li><li><p>写完代码，upload到localhost中。需要注意，当前用户需要对/var/www/html 这个文件夹有写入权限.然后点击运行。<br><img src="/images/phpstorm6.jpeg" alt="phpstorm6"></p></li><li><p>参考<br><a href="https://segmentfault.com/a/1190000003695273" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003695273</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开工具栏上面的Tools --&amp;gt; Deployment --&amp;gt; configuration&lt;br&gt;
&lt;img src=&quot;/images/phpstorm1.jpeg&quot; alt=&quot;phpstorm1&quot;&gt;&lt;br&gt;
&lt;img src=&quot;/imag
      
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>python模块-os</title>
    <link href="http://yoursite.com/2018/06/20/python%E6%A8%A1%E5%9D%97-os/"/>
    <id>http://yoursite.com/2018/06/20/python模块-os/</id>
    <published>2018-06-20T14:50:03.000Z</published>
    <updated>2018-06-20T15:53:51.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>这个模块提供了很多简单方便的方式去调用操作系统开放的功能，至于更高维度的文件，文件夹操作的方法需要参考 shutil 这个模块<br>在python中，文件名字，命令行参数，环境变量都是字符串。因此一些系统的字符转换就是必须的。可以使用 sys.getfilesystemencoding() 查看系统编码</p></blockquote><h1 id="系统"><a class="markdownIt-Anchor" href="#系统"></a> 系统</h1><h2 id="osenviron"><a class="markdownIt-Anchor" href="#osenviron"></a> os.environ</h2><blockquote><p>返回环境变量</p></blockquote><h2 id="osgetenvkey"><a class="markdownIt-Anchor" href="#osgetenvkey"></a> os.getenv(key)</h2><blockquote><p>得到key值的环境变量</p></blockquote><h2 id="osuname"><a class="markdownIt-Anchor" href="#osuname"></a> os.uname()</h2><blockquote><p>相当于Linux的uname，得到系统的信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.uname()</span><br><span class="line">(&apos;Linux&apos;, &apos;VM_16_8_centos&apos;, &apos;3.10.0-514.26.2.el7.x86_64&apos;, &apos;#1 SMP Tue Jul 4 15:04:05 UTC 2017&apos;, &apos;x86_64&apos;)</span><br></pre></td></tr></table></figure><h2 id="osgetuid"><a class="markdownIt-Anchor" href="#osgetuid"></a> os.getuid</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uid, </span><br><span class="line">os.getgid</span><br><span class="line">gid,</span><br></pre></td></tr></table></figure><h2 id="osgetgroups"><a class="markdownIt-Anchor" href="#osgetgroups"></a> os.getgroups()</h2><blockquote><p>返回当前进程相关的group</p></blockquote><h2 id="osgetlogin"><a class="markdownIt-Anchor" href="#osgetlogin"></a> os.getlogin()</h2><blockquote><p>得到当前登录的用户</p></blockquote><h2 id="ospopencmdmoderbuffering-1"><a class="markdownIt-Anchor" href="#ospopencmdmoderbuffering-1"></a> os.popen(cmd,mode=‘r’,buffering=-1)</h2><blockquote><p>执行系统级别的命令，但是没有输出。 mode有 read和write两种模式。 但是常见的还是subprocess这个命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">with os.popen(&apos;git clone https://github.com/zhuzhuyule/img_to_txt.git&apos;)as f:</span><br><span class="line">  a = f.read()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h1 id="文件夹操作"><a class="markdownIt-Anchor" href="#文件夹操作"></a> 文件夹操作</h1><h2 id="osmkdirpath"><a class="markdownIt-Anchor" href="#osmkdirpath"></a> os.mkdir(path)</h2><blockquote><p>创建一个文件夹</p></blockquote><h2 id="osrmdirpath"><a class="markdownIt-Anchor" href="#osrmdirpath"></a> os.rmdir(path)</h2><blockquote><p>移除文件夹</p></blockquote><h2 id="osmakedirspath"><a class="markdownIt-Anchor" href="#osmakedirspath"></a> os.makedirs(path)</h2><blockquote><p>创建一系列文件夹</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.makedirs(&apos;test/test/test&apos;)</span><br></pre></td></tr></table></figure><h2 id="osremovedirspath"><a class="markdownIt-Anchor" href="#osremovedirspath"></a> os.removedirs(path)</h2><blockquote><p>移除文件夹，包括子文件夹. 递归移除.如下，先移除最里面的test，然后是外层的test，最后在移除最外面的test</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.removedirs(&apos;test/test/test&apos;)</span><br></pre></td></tr></table></figure><h2 id="oschdirpath"><a class="markdownIt-Anchor" href="#oschdirpath"></a> os.chdir(path)</h2><blockquote><p>变换路径</p></blockquote><h1 id="文件"><a class="markdownIt-Anchor" href="#文件"></a> 文件</h1><h2 id="oslistdirpath"><a class="markdownIt-Anchor" href="#oslistdirpath"></a> os.listdir(path)</h2><blockquote><p>列出当前文件夹下面的所有文件和文件夹</p></blockquote><h2 id="osscandirpath"><a class="markdownIt-Anchor" href="#osscandirpath"></a> os.scandir(path)</h2><blockquote><p>扫描当前路径下面的所有文件和文件夹，返回一个DirEntry对象。有以下属性</p></blockquote><ol><li>name</li><li>path</li><li>is_file</li><li>is_dir</li><li>inode</li><li>is_symlink</li></ol><h2 id="osremovepath"><a class="markdownIt-Anchor" href="#osremovepath"></a> os.remove(path)</h2><blockquote><p>path是文件的路径，注意，一定得是文件才能够删除。文件夹不能这样删</p></blockquote><h2 id="osrenamesrcdst"><a class="markdownIt-Anchor" href="#osrenamesrcdst"></a> os.rename(src,dst)</h2><blockquote><p>在Unix 中，如果dst是个已经存在的文件，如果用户有权限，那么该文件会被没有提示的替换<br>在windows中，如果dst已经存在，那么就会出错，即使dst是个文件，而不是文件夹<br>rename具有移动文件夹（无论文件夹里面是否有文件），并且重命名的功能</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.rename(&quot;d://New&quot;,&quot;d://new_folder&quot;)  # 重命名</span><br><span class="line">&gt;&gt;&gt; os.rename(&quot;d://new_folder&quot;,&quot;new_folder2&quot;) # 将文件夹移动到当前目录并且改名</span><br><span class="line">&gt;&gt;&gt; os.renmae(&quot;new_folder2&quot;,&quot;d://new_folder&quot;) # 文件夹里面还有文件，也可以移动+改名</span><br></pre></td></tr></table></figure><h2 id="osrenamesoldnew"><a class="markdownIt-Anchor" href="#osrenamesoldnew"></a> os.renames(old,new)</h2><blockquote><p>将old层级文件夹全部改名为new的层级文件夹</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.renames(&quot;d://new_folder2//test2//test2.txt&quot;,&quot;d://new_folder2//test1//test1.txt&quot;)</span><br><span class="line">此时 test2 文件夹会变成test1文件夹， test2.txt 会变成test1.txt</span><br><span class="line">而与rename不同的是：</span><br><span class="line"> rename如果test2文件夹不存在，就会出错。（但是如果文件夹存在就不会出错）</span><br><span class="line"> rename是不会出错的。不管文件夹存不存在。但是如果文件夹之前存在，他就会被改名消失。除非这个文件夹里面还有其他东西，这样这个文件夹就不会被改名消失。</span><br></pre></td></tr></table></figure><h2 id="oswalkpath"><a class="markdownIt-Anchor" href="#oswalkpath"></a> os.walk(path)</h2><blockquote><p>返回一个generator对象，分别有三个值： root, dirs, files,</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root ： 返回当前路径下所有文件夹的路径，字符串</span><br><span class="line">dirs： 返回一个list，返回当前路径下的文件夹名称，如果子文件夹还有文件夹，返回另外一个list</span><br><span class="line">files： 返回list，类似dirs，只不过返回的是文件名。</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; for root,dirs,files in os.walk(&quot;d://new_folder2//&quot;):</span><br><span class="line">print(&quot;files: &quot;,files)</span><br><span class="line">print(&quot;root: &quot;,root)</span><br><span class="line">print(&quot;dirs: &quot;,dirs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">files:  [&apos;test.txt&apos;]</span><br><span class="line">root: d://new_folder2//</span><br><span class="line">dirs: [&apos;test1&apos;, &apos;test2&apos;]</span><br><span class="line">files:  [&apos;test1.txt&apos;]</span><br><span class="line">root: d://new_folder2//test1</span><br><span class="line">dirs: []</span><br><span class="line">files:  [&apos;test2.txt&apos;, &apos;testsample.txt&apos;]</span><br><span class="line">root: d://new_folder2//test2</span><br><span class="line">dirs: [&apos;teste233&apos;]</span><br><span class="line">files:  []</span><br><span class="line">root: d://new_folder2//test2\teste233</span><br><span class="line">dirs: []</span><br></pre></td></tr></table></figure><h2 id="osreplace"><a class="markdownIt-Anchor" href="#osreplace"></a> os.replace()</h2><blockquote><p>这个是跨平台的os.rename</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># test1 是存在的文件夹</span><br><span class="line">#os.replace(&apos;D://new_folder2//test2/test2.txt&apos;,&quot;D://new_folder2//test1//test21.txt&quot;)</span><br><span class="line"></span><br><span class="line"># test5 是不存在的文件夹， 失败</span><br><span class="line">#os.replace(&apos;D://new_folder2//test4/test1.txt&apos;,&quot;D://new_folder2//test5//test51.txt&quot;)</span><br><span class="line"></span><br><span class="line">#成功</span><br><span class="line">#os.replace(&apos;D://new_folder2//test1&apos;,&quot;D://new_folder2//test4&quot;)</span><br><span class="line"></span><br><span class="line"># 成功</span><br><span class="line"># os.renames(&apos;D://new_folder2//test1/test21.txt&apos;,&quot;D://new_folder2//test3//test21.txt&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这个模块提供了很多简单方便的方式去调用操作系统开放的功能，至于更高维度的文件，文件夹操作的方法需要参考 shutil 
      
    
    </summary>
    
      <category term="python_modules" scheme="http://yoursite.com/categories/python-modules/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>在ubuntu18下配置php开发环境</title>
    <link href="http://yoursite.com/2018/06/20/%E5%9C%A8ubuntu18%E4%B8%8B%E9%85%8D%E7%BD%AEphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/06/20/在ubuntu18下配置php开发环境/</id>
    <published>2018-06-20T11:30:22.000Z</published>
    <updated>2018-06-24T04:32:52.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更新源"><a class="markdownIt-Anchor" href="#更新源"></a> 更新源</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/source.list</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">sudo apt-get update -y</span><br></pre></td></tr></table></figure><h1 id="安装apache"><a class="markdownIt-Anchor" href="#安装apache"></a> 安装apache</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apache2</span><br><span class="line">service apache2 status</span><br><span class="line">service apache2 restrat</span><br></pre></td></tr></table></figure><h1 id="安装php7"><a class="markdownIt-Anchor" href="#安装php7"></a> 安装php7</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php7.0</span><br><span class="line">php -v</span><br></pre></td></tr></table></figure><h1 id="安装mysql57"><a class="markdownIt-Anchor" href="#安装mysql57"></a> 安装mysql5.7</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server </span><br><span class="line"># 更改密码</span><br><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">---加上</span><br><span class="line">...</span><br><span class="line">skip-grant-tables </span><br><span class="line">...</span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">sudo service mysql restart </span><br><span class="line"></span><br><span class="line">mysql -u root</span><br><span class="line">use msyql;</span><br><span class="line">UPDATE user set plugin=&apos;mysql_native_password&apos; where user=&apos;root&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">update user set authentication_string = password(&apos;qwe123&apos;), password_expired = &apos;N&apos;, password_last_changed = now() where user = &apos;root&apos;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">select user, host, plugin from user where user=&apos;root&apos;;</span><br><span class="line"></span><br><span class="line"># 改回来配置+重启</span><br><span class="line"></span><br><span class="line">mysql -u root -p qwe123</span><br></pre></td></tr></table></figure><h1 id="安装php-admin"><a class="markdownIt-Anchor" href="#安装php-admin"></a> 安装php-admin</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install phpmyadmin php-mbstring php-gettext，安装的过程中选择apache2。</span><br><span class="line"></span><br><span class="line">sudo phpenmod mcrypt</span><br><span class="line">sudo phpenmod mbstring</span><br><span class="line">修改完成之后sudo systemctl restart apache2重启apache2服务器。</span><br></pre></td></tr></table></figure><h1 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打开浏览器</span><br><span class="line"></span><br><span class="line">http://localhost/phpmyadmin</span><br></pre></td></tr></table></figure><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h1><p><a href="https://segmentfault.com/a/1190000005786808" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005786808</a></p><p><a href="https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost" target="_blank" rel="noopener">https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;更新源&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#更新源&quot;&gt;&lt;/a&gt; 更新源&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Flask08 - unittest</title>
    <link href="http://yoursite.com/2018/06/19/Flask08-unittest/"/>
    <id>http://yoursite.com/2018/06/19/Flask08-unittest/</id>
    <published>2018-06-18T16:08:54.000Z</published>
    <updated>2018-06-20T15:51:53.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>不可缺少的单元测试！ 使用unittest框架测试web应用的功能</p></blockquote><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line">from datetime import datetime,timedelta</span><br><span class="line">import unittest</span><br><span class="line">from microblogapp import app,db</span><br><span class="line">from microblogapp.models import User,Post</span><br><span class="line"></span><br><span class="line">class UserModelClass(unittest.TestCase):</span><br><span class="line">    def setUp(self):</span><br><span class="line">        db.create_all()</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        db.session.remove()</span><br><span class="line">        db.drop_all()</span><br><span class="line"></span><br><span class="line">    def test_password(self):</span><br><span class="line">        u = User(username=&apos;johnw&apos;)</span><br><span class="line">        hash1 = u.set_password_hash(&apos;cat&apos;)</span><br><span class="line">        self.assertTrue(u.check_password_hash(&apos;cat&apos;))</span><br><span class="line">        self.assertFalse(u.check_password_hash(&apos;dog&apos;))</span><br><span class="line"></span><br><span class="line">    def test_follow(self):</span><br><span class="line">        u1 = User(username=&apos;susan&apos;)</span><br><span class="line">        u2 = User(username=&apos;chris&apos;)</span><br><span class="line"></span><br><span class="line">        db.session.add(u1)</span><br><span class="line">        db.session.add(u2)</span><br><span class="line"></span><br><span class="line">        u1.follow(u2)</span><br><span class="line">        db.session.commit()</span><br><span class="line"></span><br><span class="line">        self.assertTrue(u1.is_following(u2))</span><br><span class="line">        self.assertEqual(u1.followed.count(),1)</span><br><span class="line">        self.assertEqual(u2.followers.count(),1)</span><br><span class="line">        self.assertEqual(u1.followed.first().username,&apos;chris&apos;)</span><br><span class="line">        self.assertEqual(u2.followers.first().username,&apos;susan&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def test_follow_post(self):</span><br><span class="line">        u1 = User(username=&apos;john&apos;)</span><br><span class="line">        u2 = User(username=&apos;susan&apos;)</span><br><span class="line">        u3 = User(username=&apos;jack&apos;)</span><br><span class="line">        u4 = User(username=&apos;chris&apos;)</span><br><span class="line"></span><br><span class="line">        now = datetime.now()</span><br><span class="line">        p1 = Post(body=&apos;Post from john&apos;,author=u1,timestamp=now+timedelta(seconds=1))</span><br><span class="line">        p2 = Post(body=&apos;Post from susan&apos;,author=u2,timestamp=now+timedelta(seconds=4))</span><br><span class="line">        p3 = Post(body=&apos;Post from jack&apos;,author=u3,timestamp=now+timedelta(seconds=2))</span><br><span class="line">        p4 = Post(body=&quot;Post from chris&quot;,author=u4,timestamp=now+timedelta(seconds=3))</span><br><span class="line"></span><br><span class="line">        db.session.add_all([u1,u2,u3,u4])</span><br><span class="line">        db.session.add_all([p1,p2,p3,p4])</span><br><span class="line"></span><br><span class="line">        u1.follow(u2) # john follow susan </span><br><span class="line">        u1.follow(u4) # john follow chris</span><br><span class="line">        u2.follow(u3) # susan follow jack</span><br><span class="line">        u3.follow(u4) # jack follow chris</span><br><span class="line">        </span><br><span class="line">        db.session.commit()</span><br><span class="line"></span><br><span class="line">        f1 = u1.followed_posts().all()</span><br><span class="line">        f2 = u2.followed_posts().all()</span><br><span class="line">        f3 = u3.followed_posts().all()</span><br><span class="line">        f4 = u4.followed_posts().all()</span><br><span class="line"></span><br><span class="line">        self.assertEqual(f1,[p2,p4,p1])</span><br><span class="line">        self.assertEqual(f2,[p2,p3])</span><br><span class="line">        self.assertEqual(f3,[p4,p3])</span><br><span class="line">        self.assertEqual(f4,[p4])</span><br><span class="line"></span><br><span class="line">if &quot;__main__&quot; == __name__:</span><br><span class="line">    unittest.main(verbosity=2)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;不可缺少的单元测试！ 使用unittest框架测试web应用的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=
      
    
    </summary>
    
      <category term="Flask" scheme="http://yoursite.com/categories/Flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask07 - 数据库多对多关系</title>
    <link href="http://yoursite.com/2018/06/19/Flask07-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2018/06/19/Flask07-数据库多对多关系/</id>
    <published>2018-06-18T16:08:05.000Z</published>
    <updated>2018-06-20T15:52:04.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>简述如何实现关注与被关注的业务逻辑。涉及到数据库多对多的关系</p></blockquote><h1 id="数据库关系"><a class="markdownIt-Anchor" href="#数据库关系"></a> 数据库关系</h1><ol><li>一对多的关系</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">post</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">一个<span class="title">user</span>可以写多篇的<span class="title">post</span>，但是一个<span class="title">post</span>只能由一个<span class="title">user</span>写出来</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">所以，</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">post</span> 存储 <span class="title">user_id</span></span></span><br><span class="line">user_id = db.Column(db.Integer,db.ForeignKey('user.id'))</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> 存储 <span class="title">relationship</span></span></span><br><span class="line">posts = db.relationship('Post',backref='author',lazy='dynamic')</span><br></pre></td></tr></table></figure><ol start="2"><li>多对多的关系</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">假设有两个表： 老师 - 学生</span><br><span class="line"></span><br><span class="line">一个学生有多个老师</span><br><span class="line">一个老师有多个学生</span><br><span class="line"></span><br><span class="line">需要第三个辅助表：</span><br><span class="line"></span><br><span class="line">student_teacher:</span><br><span class="line">student_id</span><br><span class="line">teacher_id</span><br><span class="line"></span><br><span class="line">对于follower 和 followed 针对的都是 User 这个类</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 首先建立一个辅助表</span><br><span class="line">followers = db.table(</span><br><span class="line">    <span class="comment"># 关注了哪些user</span></span><br><span class="line">    db.Column(<span class="string">'follower_id'</span>,db.Integer,db.ForeignKey(<span class="string">'user.id'</span>)),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 被哪些user关注</span></span><br><span class="line">    db.Column(<span class="string">'followed_id'</span>,db.Integer,db.ForeignKey(<span class="string">'user.id'</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 开始在模型中建立关系</span><br><span class="line"> <span class="comment"># 关注了哪些偶像</span></span><br><span class="line">followed = db.relationship(<span class="string">'User'</span>,secondary=followers,</span><br><span class="line">    <span class="comment"># 这个人的id，也就是追随者的id</span></span><br><span class="line">    primaryjoin=(followers.c.follower_id == id),</span><br><span class="line">    <span class="comment"># 这个是偶像的id，也是被追随者的id</span></span><br><span class="line">    secondaryjoin=(followers.c.followed_id == id),</span><br><span class="line">    backref=db.backref(<span class="string">'followers'</span>,lazy=<span class="string">'dynamic'</span>),lazy=<span class="string">'dynamic'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 这个时候如何创造模型：</span></span><br><span class="line"><span class="number">1.</span> 把这个<span class="class"><span class="keyword">class</span> <span class="title">user</span>当成一个主动的人。就是这个关系呢，你要去关注别人，那最好的方式就是有几个动词：</span></span><br><span class="line"><span class="class"><span class="title">follow</span> 关注别人</span></span><br><span class="line"><span class="class"><span class="title">unfollow</span> 不关注别人</span></span><br><span class="line"><span class="class"><span class="title">following</span> 是否正在关注别人</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">所以这个followed==》返回的是已经关注的人的列表。偶像的列表</span><br><span class="line"></span><br><span class="line">这个relationship是个动词，这个类是主语。</span><br></pre></td></tr></table></figure><ol start="3"><li>文章用于解释的例子</li></ol><ul><li>user表</li></ul><table><thead><tr><th>user id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>john</td></tr><tr><td>2</td><td>susan</td></tr><tr><td>3</td><td>marry</td></tr><tr><td>4</td><td>davin</td></tr></tbody></table><ul><li>关注</li></ul><table><thead><tr><th>关注的人</th><th>被关注的人</th></tr></thead><tbody><tr><td>1 (john)</td><td>2 (susan)</td></tr><tr><td>1 (john)</td><td>4 (davin)</td></tr><tr><td>2 (susan)</td><td>3 (marry)</td></tr><tr><td>3 (marry)</td><td>4 (davin)</td></tr></tbody></table><ul><li>文章</li></ul><table><thead><tr><th>id(post)</th><th>text</th><th>user_id</th><th>follower_id</th><th>follwed_id</th></tr></thead><tbody><tr><td>1</td><td>text from susan</td><td>2</td><td>1 (john)</td><td>2</td></tr><tr><td>2</td><td>text from marry</td><td>3</td><td>2 (susan)</td><td>3</td></tr><tr><td>3</td><td>text from davin</td><td>4</td><td>1 (john)</td><td>4</td></tr><tr><td>4</td><td>text from davin</td><td>4</td><td>3 (marry)</td><td>4</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我们可以看到对于这篇文章来说：</span><br><span class="line">follower_id 是追随者的id</span><br><span class="line">follwed_id 是这篇文章被用于追随的id，也就是user id</span><br><span class="line"></span><br><span class="line">所以我们可以使用</span><br><span class="line"></span><br><span class="line">Post.query.filter(followers.c.followed==Post.user_id)来找出那些有被关注的文章，</span><br><span class="line">然后使用 follower_id 来筛选哪些文章要被展示</span><br></pre></td></tr></table></figure><ol start="4"><li>union的使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在时间线中展示自己的文章</span><br><span class="line"></span><br><span class="line"># 检索文章</span><br><span class="line">def followed_posts(self):</span><br><span class="line">    # 联合查询。首先查出这个文章的作者id是已经关注的，接着查询关注者id是否为本人，最后按时间降序排序</span><br><span class="line">    followed = Post.query.join(followers,(followers.c.followed_id == Post.user_id)).filter(followers.c.follower_id == self.id)</span><br><span class="line">    own = Post.query.filter_by(user_id=self.id)</span><br><span class="line">    return followed.union(own).order_by(Post.timestamp.desc())</span><br></pre></td></tr></table></figure><ol start="5"><li>将功能集成到application中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 路由</span><br><span class="line">@app.route(&apos;/follow/&lt;username&gt;&apos;)</span><br><span class="line">@login_required</span><br><span class="line">def follow(username):</span><br><span class="line">    user = User.query.filter_by(username=username).first()</span><br><span class="line">    if user is None:</span><br><span class="line">        flash(&apos;User &quot;&#123;&#125;&quot; is not found&apos;.format(username))</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line">    if user == current_user:</span><br><span class="line">        flash(&apos;You can follow yourself.&apos;)</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line">    current_user.follow(user)</span><br><span class="line">    flash(&apos;You are following &#123;&#125;&apos;.format(username))</span><br><span class="line">    db.session.commit()</span><br><span class="line">    return redirect(url_for(&apos;user&apos;,username=username))</span><br><span class="line"></span><br><span class="line"># templates == user.html</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; user.follows.count() &#125;&#125; followers, &#123;&#123; user.followed.count() &#125;&#125; following&lt;/p&gt;</span><br><span class="line">&lt;a href=&quot;&#123;&#123;url_for(&apos;follow&apos;,username=user.username)&#125;&#125;&quot;&gt;follow&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;&#123;&#123;url_for(&apos;unfollow&apos;,username=user.username)&#125;&#125;&quot;&gt;unfollow&lt;/a&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;简述如何实现关注与被关注的业务逻辑。涉及到数据库多对多的关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;数据
      
    
    </summary>
    
      <category term="Flask" scheme="http://yoursite.com/categories/Flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
</feed>
