{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-06-09T12:41:47.797Z","updated":"2018-06-09T12:41:47.797Z","comments":false,"path":"/404.html","permalink":"http://yoursite.com//404.html","excerpt":"","text":""},{"title":"关于","date":"2018-06-09T13:03:03.699Z","updated":"2018-06-09T13:03:03.699Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"个人详细介绍 打工是不可能去打工的。"},{"title":"书单","date":"2018-06-09T12:41:47.798Z","updated":"2018-06-09T12:41:47.798Z","comments":false,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-06-09T13:02:37.610Z","updated":"2018-06-09T13:02:37.610Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":"google"},{"title":"分类","date":"2018-06-09T12:41:47.799Z","updated":"2018-06-09T12:41:47.799Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-06-09T12:41:47.799Z","updated":"2018-06-09T12:41:47.799Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-06-09T13:05:43.876Z","updated":"2018-06-09T13:05:43.876Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"熟练各种编程语言的读法 擅长多门语言从入门到放弃 晚睡晚起打游戏 不喜欢回答问题"}],"posts":[{"title":"XSS平台的搭建","slug":"XSS平台的搭建","date":"2018-06-14T12:20:09.000Z","updated":"2018-06-14T12:20:42.583Z","comments":true,"path":"2018/06/14/XSS平台的搭建/","link":"","permalink":"http://yoursite.com/2018/06/14/XSS平台的搭建/","excerpt":"","text":"lnmp环境搭建 下载 123456https://lnmp.org/download.htmltar -zxvf lnmp1.5-full.tar.gz./install.sh lnmp或者./install.sh lamp XSS平台 1234567891011121314151. 下载xss平台https://git.oschina.net/nMask/Resource/raw/master/xss.me.new.zip2. 数据库配置打开phpmyadmin，新建数据库 poppy将解压出来的xss.sql移动到 phpmyadmin/upload 目录下面在phpmyadmin选择导入，执行。成功导入数据库3.config.php$config[&apos;register&apos;] = &apos;normal&apos; //invite需要邀请码$config[&apos;dBPwd&apos;]=&apos;xxx&apos;$config[&apos;urlroot&apos;] = 192.168.31.xx xss_url 为404 nginx 的解决方式 通过转换.htaccess: http://www.anilcetin.com/convert-apache-htaccess-to-nginx/ 将转换后的内容写入/usr/local/nginx/config/my.conf 123456location / &#123; rewrite &quot;^/([0-9a-zA-Z]&#123;6&#125;)$&quot; /index.php?do=code&amp;urlKey=$1 last; rewrite ^/do/auth/(w+?)(/domain/([w.]+?))?$ /; rewrite ^/register/(.*?)$ /index.php?do=register&amp;key=$1 last; rewrite ^/register-validate/(.*?)$ /index.php?do=register&amp;act=validate&amp;key=$1 last;&#125; apache的解决方式,新增 .htaccess 12345678&lt;IfModule mod_rewrite.c&gt;RewriteEngine OnRewriteBase /RewriteRule ^([0-9a-zA-Z]&#123;6&#125;)$ /index.php?do=code&amp;urlKey=$1 [L] RewriteRule ^do/auth/(w+?)(/domain/([w.]+?))?$ /index.php?do=do&amp;auth=$1&amp;domain=$3 [L] RewriteRule ^register/(.*?)$ /index.php?do=register&amp;key=$1 [L] RewriteRule ^register-validate/(.*?)$ /index.php?do=register&amp;act=validate&amp;key=$1 [L]&lt;/IfModule&gt; 然后修改apache的配置 1AllowOverride None ==&gt; AllowOverride All Reference https://thief.one/2017/03/15/Xss平台搭建小记/ https://zhuanlan.zhihu.com/p/27020543","categories":[{"name":"security","slug":"security","permalink":"http://yoursite.com/categories/security/"},{"name":"Linux","slug":"security/Linux","permalink":"http://yoursite.com/categories/security/Linux/"},{"name":"xss","slug":"security/Linux/xss","permalink":"http://yoursite.com/categories/security/Linux/xss/"}],"tags":[]},{"title":"python模块-subprocess","slug":"python模块-subprocess","date":"2018-06-13T00:31:54.000Z","updated":"2018-06-13T00:32:54.984Z","comments":true,"path":"2018/06/13/python模块-subprocess/","link":"","permalink":"http://yoursite.com/2018/06/13/python模块-subprocess/","excerpt":"","text":"概述 subprocess 允许你启动一个新的进程，连接到这个进程的输入，输出，错误的管道中，取得返回的值。用于执行一些系统的命令 代码结构及其实例 run 官方推荐其使用 run 方法。这是一个封装好的subprocess方法, 返回一个CompleteProcess 实例 1subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None) 代码1： 12345import subprocess# 运行后不会有输出a = subprocess.run(&apos;ls -al&apos;,shell=True,stdout=subprocess.PIPE)# 输出a.stdout 代码2： 12345678import subprocessb = subprocess.run([&apos;ls&apos;,&apos;-al&apos;],stdout=subprocess.PIPE)b.stdoutCompleteProcess对象有以下参数：args: 用于执行的命令，比如 ls -al, [&apos;ls&apos;,&apos;-al&apos;]returnCode: 退出进程后，返回值stdout: 命令输出stderr: 命令错误时输出 subprocess构造函数 1class subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, encoding=None, errors=None) 常见代码1： 12345test = subprocess.Popen([&apos;ls&apos;,&apos;-al&apos;],stdout=subprocess.PIPE)# test.stdout 返回一个&lt;_io.BufferedReader name=3&gt;test.stdiyt.read() # 读取输出注： 必须要有 stdout=subprocess.PIPE 否则不会有输出。 与命令交互： 1Popen.communicate(input=None,timeout=None) # (stdout_data,stderr_data)","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"modules","slug":"python/modules","permalink":"http://yoursite.com/categories/python/modules/"}],"tags":[]},{"title":"python模块 - re","slug":"python模块-re","date":"2018-06-13T00:30:57.000Z","updated":"2018-06-13T00:32:35.724Z","comments":true,"path":"2018/06/13/python模块-re/","link":"","permalink":"http://yoursite.com/2018/06/13/python模块-re/","excerpt":"","text":"概述 正则表达式是处理字符串的强大的工具，检索字符串，替换，匹配验证等等。 常用的匹配规则 123456789\\w 匹配字母，数字和下划线\\d 匹配数字\\s 匹配任何空白字符\\z 匹配字符串结尾，如果有换行符，一起匹配\\n 匹配换行\\t 匹配制表符^ 匹配开头$ 匹配结尾. 匹配任何字符，除了换行符，除非指定re.DOTALL python的re模块 注： .*? 遇到换行符就不管用了，除非加上re.S match match 尝试从字符串开头开始匹配正则表达式，如果成功就返回，如果没有就返回一二None 12345678910111213&gt;&gt;&gt; import re&gt;&gt;&gt; a = &quot;Hello World&quot;&gt;&gt;&gt; b = re.match(&apos;\\w+\\s&apos;,a,re.S)&gt;&gt;&gt; b&lt;_sre.SRE_Match object; span=(0, 6), match=&apos;Hello &apos;&gt;&gt;&gt;&gt; b.span()(0, 6)&gt;&gt;&gt; b.group()&apos;Hello &apos;&gt;&gt;&gt; b.group(0)&apos;Hello &apos;None 是false search 扫描整个字符串，如果符合就返回，否则返回none 1234567&gt;&gt;&gt; import re&gt;&gt;&gt; a = &quot;Hello World&quot;&gt;&gt;&gt; c = re.search(&apos;\\s\\w+&apos;,a)&gt;&gt;&gt; c&lt;_sre.SRE_Match object; span=(5, 11), match=&apos; World&apos;&gt;&gt;&gt;&gt; c.group()&apos; World&apos; findall 当需要提取全部匹配的内容，需要使用findall，使用search只能取回第一个。如果在匹配的时候用括号指定了，那么返回中的列表就会包含元祖 123&gt;&gt;&gt; d = re.findall(r&apos;He(l)l(o)&apos;,a)&gt;&gt;&gt; d[(&apos;l&apos;, &apos;o&apos;)] sub 替换文本,返回替换好的字符串 1re.sub(&apos;\\s\\w+&apos;,&apos;johnw&apos;,a)","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"modules","slug":"python/modules","permalink":"http://yoursite.com/categories/python/modules/"},{"name":"爬虫","slug":"python/modules/爬虫","permalink":"http://yoursite.com/categories/python/modules/爬虫/"}],"tags":[]},{"title":"Linux - Nginx","slug":"Linux-Nginx","date":"2018-06-09T13:22:07.000Z","updated":"2018-06-09T13:22:37.485Z","comments":true,"path":"2018/06/09/Linux-Nginx/","link":"","permalink":"http://yoursite.com/2018/06/09/Linux-Nginx/","excerpt":"","text":"nginx做为静态服务器和反向代理服务器 安装nginx 1234567891011121314151617181920212223# 查看nginx版本,内核需要2.6以上uname -a#安装gccyum install gcc gcc-c++ pcre-devel zlib zlib-devel openssl openssl-develgcc 编译cgcc-c++ 编译c++pcre-devel 解析perl正则zlib 用于压缩zlib-devel 用于开发openssl 用于ssl加密#安装nginx./configuremakemake install#configure配置选项--prefix=PATH 安装部署后的根目录--sbin-path 可执行文件的放置路径 基于前面的prefix &lt;prefix&gt;/sbin/nginx--conf-path 放置配置文件 &lt;prefix&gt;/conf/nginx.conf--error-log-path &lt;prefix&gt;/logs/errors.log 启动nginx 12./usr/local/sbin/nginx -s stop / reload -c xxx.conf 将nginx做为静态服务器 case: 123456server &#123; location ^~ /static&#123; alias usr/local/nginx/conf &#125;&#125; 明确root和alias的不同 1234567891011121314151617# rootlocation conf &#123; root usr/local/nginx;&#125;# aliaslocation conf &#123; alias usr/local/nginx/conf;&#125;alias 要指定到具体的一层文件夹root 会根据url来映射文件夹比如：http://www.xxx.com/conf/test.html alias的处理 匹配location为conf的规则，将配置的文件夹直接返回给用户root的处理：匹配到location为conf的规则，提取/conf/test.html 拼接到已配置的文件夹下面 将nginx做为反向代理服务器 12345678910111213# 在nginx.conf里面的http模块里面加入include &apos;/usr/local/nginx/conf/nginx2.conf&apos;vim nginx2.confupstream xxx&#123; server 112.11.11.11:8080;&#125;server&#123; server_name www.xxx.com; location / &#123; proxy_pass http://xxx; &#125;&#125; 如何做好负载均衡？ 12345upstream xxx&#123; server 111.111.111.111 weight=5(权重，优先转发); server 222.222.222.222 max_fails=3 fail_timeout=30s(失败3次，30s); server 333.333.333.333 down(下线);&#125;","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"},{"name":"Nginx","slug":"Linux/Nginx","permalink":"http://yoursite.com/categories/Linux/Nginx/"}],"tags":[]},{"title":"Flask - User Profile","slug":"Flask-User-Profile","date":"2018-06-09T13:21:27.000Z","updated":"2018-06-09T13:21:40.284Z","comments":true,"path":"2018/06/09/Flask-User-Profile/","link":"","permalink":"http://yoursite.com/2018/06/09/Flask-User-Profile/","excerpt":"","text":"概述 如何用flask实现用户个人中心和头像 个人中心 使用名字做为url的一部分来分辨个人中心。注意点（url_for, first_or_404） 12345678910111213141516@app.route(&apos;/user/&lt;username&gt;&apos;)def user(): user = User.query.filter_by(username=username).first_or_404() posts = [ &#123;&apos;author&apos;:user,&apos;body&apos;:&apos;Test Post #1&apos;&#125;, &#123;&apos;author&apos;:user,&apos;body&apos;:&apos;Test Post #2&apos;&#125;, ] return render_template(&apos;user.html&apos;,user=user,posts=posts) #使用&lt;username&gt;做为url的变量来区别用户。还有其他几种方式&lt;string:username&gt;&lt;int:user_id&gt;&lt;any(a,b):page_name&gt; 不是 a 就是 b* 注意： 当使用url_for 引用这个地址的时候，要把参数加进去url_for(&apos;user&apos;,username=username) 如何生成头像，并展示和应用于每个用户 通过请求 https://www.gravatar.com/avatar/ 就可以请求到一张图片，其中这个hash可以是email或者任意值 12345678class User(UserMixin,db.Model): ... def set_avatars(self,size): url = &quot;https://www.gravatar.com/avatar/&#123;&#125;?d=identicon&amp;s=&#123;&#125;&quot;.format(md5(self.username.lower().encode(&apos;utf-8&apos;)).hexdigest(),size) return url # 在HTML模板里面展示&lt;img src=&apos;&#123;&#123; current_user.set_avatars(128)&#125;&#125;&apos;&gt; 对于重复的部分，使用jinja2的子模板 123456# 对于发表文章这一部分，可能其他的地方也会用到，比如首页。因此我们将这部分独立出来_posts.html# 使用include，可以实现把子模板包含进来&#123;% include &quot;_posts.html&quot; %&#125; 增加两个值，一个最后登录的时间，一个是个性签名 12345678910111213141516class User(UserMixin,db.Model): ... # 增加两个字段 last_seen = db.Column(db.DateTime,default=datetime.now) about_me = db.Column(db.String(140))# 如何使用last_seen这个参数？我们每次用户发送请求过来的时候，我们都去更新这个值# 在每个请求之前，需要执行的操作。# 为什么不用db.session.add ， 是因为 current_user 是flask-login从db里面query出来的。本来就已经在db.session里面了。 @app.before_requestdef before_request(): if current_user.is_authenticated: current_user.last_seen = datetime.now() db.session.commit() edit user profile 1234567891011121314@app.route(&apos;/edit_profile&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])@login_requireddef edit_profile(): form = EditProfileForm() if form.validate_on_submit(): current_user.username = form.username.data current_user.about_me = form.about_me.data db.session.commit() flash(&apos;Your change have saved.&apos;) return redirect(url_for(&apos;user&apos;,username=current_user.username)) form.username.data = current_user.username form.about_me.data = current_user.about_me return render_template(&apos;profile.html&apos;,form=form) 总结 主要遇到的问题，就是flask-migrate 的时候，如果你已经downgrade一次了，一定要把version下面的版本文件给删除，否则会出现版本不是最新的状况。","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"flask","slug":"python/flask","permalink":"http://yoursite.com/categories/python/flask/"}],"tags":[]},{"title":"Flask - User login ","slug":"Flask-User-login","date":"2018-06-09T13:20:49.000Z","updated":"2018-06-09T13:21:06.813Z","comments":true,"path":"2018/06/09/Flask-User-login/","link":"","permalink":"http://yoursite.com/2018/06/09/Flask-User-login/","excerpt":"","text":"概述 使用flask 实现登录的功能 用户登录 用户密码安全 123456789101112131415161718192021# 用户密码的安全我们使用werkzeug.sercurity来做,增加两个函数class User(db.Model): ... def set_password_hash(self,password): return self.password_hash = generate_password_hash(password) def check_password_hash(self,password): return check_password_hash(self.password_hash,password) # 用户的密码安全存储a. 用户密码原始值 + 随机字符b. hash256c. hash值 + 随机字符d. 存入数据库# 校验用户密码安全a. 取出hash值,截取随机字符b. 接受用户输入的密码 + 截取的随机字符c. 使用相同的hash函数进行hashd. 将得到的hash值与数据库的hash值进行比较 安装flask-login 1pip install flask-login flask-login 介绍 1234567891011121314151617181920212223242526272829303132# flask-login 是flask的插件，用于登录用户，管理用户session，登出用户等等。# 一共有四种属性is_authenticated： 如果用户已经认证了is_active： 如果用户是已经激活的状态，也可以认为是认证了is_anonymous： 未登录的状态get_id()：将用户id做为一个字符返回# 使用步骤a. 在app/__init__.py 中初始化flask-login 并且指定哪个view 函数来做为登录处理函数##### 引入登录管理函数login_manager = LoginManager(app)login_manager.session_protection = &quot;strong&quot;##### 如果登录函数是在蓝图中的话，可以使用例如 main.login 这样的方式login_manager.login_view = &apos;login&apos;b. 在 models.py 里面指定哪个为用户的数据库表对象，然后通过user_id 来管理和追踪用户的sessionfrom flask_login import UserMixinclass User(UserMixin,db.Model): ...c. 通过user id来管理会话@login_manager.user_loaderdef load_user(id): #### 经过flask-login处理 id 已经是字符了，所以要加int，类型转换 return User.query.get(int(id))d. 通过login_user 来登录用户e. 通过logout_user 来注销用户f. 通过 @login_required 包装函数来保护登录的链接 用户登录逻辑 1234567891011121314151617181920# 结合上面陈述，代码如下@app.route(&apos;/login&apos;,methods=[&apos;GET&apos;,&quot;POST&quot;])def login(): if current_user.is_authenticated: return redirect(url_for(&apos;index&apos;)) form = LoginForm() # 处理表单验证的逻辑 if form.validate_on_submit(): # 存储提示信息，可以使用get_flashed_messages 来获取 # flash(&apos;Login Request from user: &#123;&#125; and remember me: &#123;&#125;&apos;.format(form.username.data,form.remember_me.data)) user = User.query.filter_by(username=form.username.data).first() if user is None and user.check_password(form.password.data): flash(&quot;Your password or username was wrong.&quot;) return redirect(url_for(&apos;login&apos;)) login_user(user,form.remember_me.data) return redirect(url_for(&apos;index&apos;)) return render_template(&apos;login.html&apos;,form=form,title=&apos;login&apos;) 如何显示登录错误的信息 1234567891011可以再script里面显示&lt;script&gt; &#123;% with messages = get_flashed_messages() %&#125; &#123;% if messages %&#125; &#123;% for message in messages %&#125; alert(&quot;&#123;&#123; message &#125;&#125;&quot;) &#123;% endfor %&#125; &#123;% endif %&#125; &#123;% endwith %&#125;&lt;/script&gt; 访问受保护的链接重定向网址 12345678910111213# 在flask中，如果你访问受保护的链接的时候，会重定向到登录的网址，后面加上?next_page=xxxx 从哪里来的例如：http://127.0.0.1:5000/login?next=%2Fprofile 返回默认的flash信息：&quot;please login to access this page&quot;# 不是很好，待改正next_page = request.args.get(&apos;next&apos;)if not next_page or url_parse(next_page).netloc != &apos;&apos;: next = url_for(index)return redirect(next_page) 注册 1234567891011@app.route(&apos;/register&apos;,methods=[&apos;GET&apos;,&apos;POST&apos;])def register(): form = RegisterForm() if form.validate_on_submit(): u = User(username=form.username.data,email=form.email.data) u.set_password_hash(form.password.data) db.session.add(u) db.session.commit() flash(&apos;Congratulations, You have registered the user! &apos;) return redirect(url_for(&apos;login&apos;)) return render_template(&apos;register.html&apos;,form=form) 注意的点 1234567891011121314151617class RegisterForm(FlaskForm): username = StringField(&apos;Username&apos;,validators=[DataRequired()]) password = PasswordField(&apos;Password&apos;,validators=[DataRequired()]) password2 = PasswordField(&apos;Re-enter Password&apos;,validators=[DataRequired(),EqualTo(&apos;password&apos;)]) email = StringField(&apos;Email&apos;,validators=[DataRequired(),Email()]) submit = SubmitField(&apos;Submit&apos;) # 在这里增加validate_&lt;field&gt; 函数，等到校验的时候，也会一并执行 def validate_username(self,username): user = User.query.filter_by(username=username.data).first() if user is not None: raise ValidationError(&apos;The user has exists.&apos;) def validate_email(self,email): user = User.query.filter_by(email=email.data).first() if user is not None: raise ValidationError(&apos;The email has exists&apos;)","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"flask","slug":"python/flask","permalink":"http://yoursite.com/categories/python/flask/"}],"tags":[]},{"title":"Flask - Database","slug":"Flask-Database","date":"2018-06-09T13:19:29.000Z","updated":"2018-06-09T13:21:08.181Z","comments":true,"path":"2018/06/09/Flask-Database/","link":"","permalink":"http://yoursite.com/2018/06/09/Flask-Database/","excerpt":"","text":"概述 简述flask中数据库的应用 flask中的数据库 安装数据库相关依赖 123pip install flask-sqlalchemypip install flask-migratepip install pymysql 数据库配置 1234567# 添加配置文件# configure.py# 数据库地址SQLALCHEMY_DATABASE_URI = os.environ.get(&apos;SQLALCHEMY_DATABASE_URI&apos;) or &quot;mysql+pymysql://root:qwe123@127.0.0.1/microblog&quot;# 是否记录application每次改变的信号。没什么用SQLALCHEMY_TRACK_MODIFICATIONS = False 在初始化app文件中引入 123# __init__.pydb = SQLAlchemy(app)migrate = Migrate(app,db) 设计并定义models 123456789101112131415161718192021222324252627from microblogapp import dbfrom datetime import datetimeclass User(db.Model): __tablename__ = &apos;user&apos; id = db.Column(db.Integer,primary_key=True) username = db.Column(db.String(64),unique=True,index=True) password_hash = db.Column(db.String(128)) email = db.Column(db.String(64),index=True,unique=True) # 存储一个字段，相当于执行了一次查询 posts = db.relationship(&apos;Post&apos;,backref=&apos;author&apos;,lazy=&apos;dynamic&apos;) def __repr__(self): return &quot;&lt;User : &#123;&#125;&gt;&quot;.format(self.username)class Post(db.Model): __tablename__ = &apos;post&apos; id = db.Column(db.Integer,primary_key=True) body = db.Column(db.String(140)) timestamp = db.Column(db.DateTime,index=True,default=datetime.now) # 外键，小写表名.id，通常采用蛇形写法： user_id user_id = db.Column(db.Integer,db.ForeignKey(&apos;user.id&apos;)) def __repr__(self): return &quot;&lt;Post:&#123;&#125;&gt;&quot;.format(self.body) 变更数据库结构，如何更好的迁移？ 12345678910111213141516171819使用flask_migrate来做迁移和记录。注意： 这里我们需要再run.py,也就是指定flask app的python文件里面，指定models，要不然migrate识别不到。# run.pyfrom microblogapp import models# commandflask db initflask db migrate -m &quot;init db&quot;flask db upgrade# 如何回滚？flask db downgrade # 如何回滚到之前的多个版本flask db downgrade f37d(版本号)* 版本号存在于 migrations/versions/ 下面 数据库中的关系 12345678910111213141516171819202122# 这里只暂时讲到了一对多的关系。# 一个人可以写多篇文章#在User里面posts = db.relationship(&apos;Post&apos;,backref=&apos;author&apos;,lazy=&apos;dynamic&apos;)实际上，posts不是数据库里面的一个字段，orm框架使用db.relationship这个函数，执行了查询语句,** 返回了关于这个User的Post对象，是一个列表u.posts =&gt; [Post1,Post2,Post3...]# 还可以进一步查询Post1.bodyPost1.timestamp# backref用于之处 &quot;多&quot; 的一端 指向 &quot;一&quot;的一端。p = Post.query.filter_by(xxx).first()p.author === &gt; 查出了User这个对象# 也就是说backref用于 『多』的一端 检索『一』的一端 数据库在flask中的查询语句 123456789101112131415161718# 查询Useru = User.query.filter_by(username=&apos;johnw&apos;).first()# 查询文章u.posts ==&gt; [Post1,Post2]# 查询文章内容for post in u.posts: print(post.body)# 添加用户u = User(username=&apos;johnw&apos;)# 添加文章p = Post(body=&quot;Hello world!&quot;)# 指定作者p.author = u# 按照username降序排列u = User.query.order_by(User.username.desc()).all() shell语句 1234# 为了更加方便我们在shell里面调试语句@app.shell_context_processordef make_shell_context(): return &#123;&quot;db&quot;:db,&quot;User&quot;:models.User,&quot;Post&quot;:models.Post&#125; 总结 12多的一端 存个id就好了一的一端 需要存个relationship","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"flask","slug":"python/flask","permalink":"http://yoursite.com/categories/python/flask/"}],"tags":[]},{"title":"Flask - Web Form","slug":"Flask-Web-Form","date":"2018-06-09T13:18:48.000Z","updated":"2018-06-09T13:19:08.985Z","comments":true,"path":"2018/06/09/Flask-Web-Form/","link":"","permalink":"http://yoursite.com/2018/06/09/Flask-Web-Form/","excerpt":"","text":"概述 简述了如何在flask中实现表单应用 Flask-WTF 安装 1pip install flask_wtf 配置文件 123456789101112# 配置文件应该单独出来# 表单需要用到secret key 做为CSRF的防护import os class Configure(object): SECRET_KEY = os.environ.get(&apos;SECRET_KEY&apos;) or &quot;You-never-guess&quot;#最后要在application初始化文件里面# 引入这个配置#__init__.pyapp.config.from_object(Configure) csrf 介绍： https://zh.wikipedia.org/zh/跨站请求伪造 配置文件的敏感数据 1将配置文件中的敏感数据做为系统变量，这样可以避免敏感数据的泄露，将开发和运维分离。 创建登录表单 123456789101112# 主要的功能导入from flask_wtf import FlaskForm# 引入字段from wtforms import StringField,PasswordField,SubmitField,BooleanField# 引入验证from wtforms.validators import DataRequiredclass LoginForm(FlaskForm): username = StringField(&apos;Username&apos;,validators=[DataRequired()]) password = PasswordField(&apos;Password&apos;,validators=[DataRequired()]) remember_me = BooleanField(&apos;Remember Me&apos;) submit = SubmitField(&apos;Submit&apos;) html中的表单 1234567891011121314151617181920&#123;&#123; form.hidden_tag() &#125;&#125;: 藏着crsf token&#123;&#123; form.username(class_=&apos;username&apos;) &#125;&#125;: 括号里面可以设置class name# 代码：&lt;form action=&apos;&apos; method=&apos;POST&apos;&gt; &#123;&#123; form.hidden_tag() &#125;&#125; &lt;p&gt; &#123;&#123; form.username.label() &#125;&#125; &#123;&#123; form.username(class_=&apos;username&apos;)&#125;&#125; &lt;/p&gt; &lt;p&gt; &#123;&#123; form.password.label() &#125;&#125; &#123;&#123; form.password(class_=&apos;password&apos;)&#125;&#125; &lt;/p&gt; &lt;p&gt; &#123;&#123; form.remember_me(class_=&apos;remember_me&apos;)&#125;&#125;&#123;&#123; form.remember_me.label() &#125;&#125; &lt;/p&gt; &lt;p&gt;&#123;&#123; form.submit() &#125;&#125;&lt;/p&gt;&lt;/form&gt; 处理表单的路由事件 123456789from microblogapp.forms import LoginForm@app.route(&apos;/login&apos;)def login(): form = LoginForm() if form.validate_on_submit(): flash(&apos;Login Request from user: &#123;&#125; and remember me: &#123;&#125;&apos;.format(form.username.data,form.remember_me.data)) return redirect(&apos;/index&apos;) return render_template(&apos;login.html&apos;,form=form,title=&apos;login&apos;) flash的内容 1234567891011&lt;!-- 使用with 声明一个变量来接受函数的返回值 --&gt;&#123;% with messages = get_flashed_messages() %&#125;&lt;!-- 返回了一个列表 --&gt; &#123;% if messages %&#125; &lt;ul&gt; &#123;% for message in messages %&#125; &lt;li&gt;&#123;&#123; message &#125;&#125;&lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &#123;% endif %&#125; &#123;% endwith %&#125; 错误内容 123&#123;% for error in form.username.errors %&#125;&lt;span style=&apos;color:red;&apos;&gt;&#123;&#123; error&#125;&#125;&lt;/span&gt;&#123;% endfor %&#125;","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"flask","slug":"python/flask","permalink":"http://yoursite.com/categories/python/flask/"}],"tags":[]},{"title":"Flask - Templates","slug":"Flask-Templates","date":"2018-06-09T13:18:00.000Z","updated":"2018-06-09T13:18:24.772Z","comments":true,"path":"2018/06/09/Flask-Templates/","link":"","permalink":"http://yoursite.com/2018/06/09/Flask-Templates/","excerpt":"","text":"概述 这一章主要讲了一下flask中的模板的概念 什么是模板 创建模板文件夹 1mkdir microblogapp/templates render_template 函数 123456789101112131415161718192021222324@app.route(&apos;/&apos;)@app.route(&apos;/index&apos;)def index(): user = &#123; &quot;username&quot;:&quot;jacky&quot; &#125; posts = [ &#123; &quot;author&quot;:&#123; &quot;username&quot;:&quot;johnw&quot; &#125;, &quot;body&quot;:&quot;Hello World!!!&quot;, &#125;, &#123; &quot;author&quot;:&#123; &quot;username&quot;:&quot;Michael&quot;, &#125;, &quot;body&quot;:&quot;Beeeeeautiful Wrold. &quot; &#125; ] #顾名思义，就是渲染模板的函数。第一个参数是要渲染的html。 #在templates文件夹里面，接下来的一系列函数都可以在html里面用&#123;&#123;&#125;&#125;进行引用 return render_template(&apos;index.html&apos;,user=user,posts=posts) 条件语句 12345&#123;% if title %&#125; &lt;title&gt;&#123;&#123; title &#125;&#125; - microblog &lt;/title&gt;&#123;% else %&#125; &lt;title&gt;Hello - microblog &lt;/title&gt;&#123;% endif %&#125; 循环语句 123&#123;% for post in posts %&#125; &lt;div&gt;&lt;p&gt;&#123;&#123; post.author.username &#125;&#125; says: &#123;&#123; post.body &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; 模板继承 1234&#123;% extends &quot;basic.html&quot; %&#125;&#123;% block main %&#125; ...&#123;% endblock %&#125;","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"flask","slug":"python/flask","permalink":"http://yoursite.com/categories/python/flask/"}],"tags":[]},{"title":"Flask - Hello World","slug":"Flask - Hello World","date":"2018-06-09T12:46:52.333Z","updated":"2018-06-09T13:16:08.883Z","comments":true,"path":"2018/06/09/Flask - Hello World/","link":"","permalink":"http://yoursite.com/2018/06/09/Flask - Hello World/","excerpt":"","text":"概述 准备整理最近学习的一系列的flask基础教程。 Hello world 安装python3 创建项目目录，激活虚拟环境，避免全局环境的污染 1234mkdir microblogcd microblogpython -m venv venvsource venv/bin/activate 安装flask 1pip install flask 目录结构 123456--|microblog---|run.py---|venv---|microblogapp----|__init__.py----|routes.py 初始化app 1234567from flask import Flask# __name__ 指定了flask的开始的点，flask根据__name__所指定的文件的位置来识别其他的资源，例如templates，static等文件夹。app = Flask(__name__)# 在最后面引入，避免了循环引用。from . import routes 定义routes 1234567from app import app# Flask 利用包装函数的概念，将视图和路由控制结合在一起@app.route(&apos;/&apos;)@app.route(&apos;/index&apos;)def index(): return &quot;Hello world&quot; 定义run.py 123#run.py 是为了flask运行指定的文件，在这里面引入appfrom microblogapp import app 启动 1234export FLASK_APP=run.pyflask run 输入 localhost:5000 完成了第一个应用。","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"},{"name":"flask","slug":"python/flask","permalink":"http://yoursite.com/categories/python/flask/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-06-09T06:58:25.169Z","updated":"2018-06-09T13:15:20.126Z","comments":true,"path":"2018/06/09/hello-world/","link":"","permalink":"http://yoursite.com/2018/06/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[{"name":"test","slug":"test","permalink":"http://yoursite.com/categories/test/"}],"tags":[]}]}